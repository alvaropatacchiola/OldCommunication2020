'------------------------------------------------------------------------------
' <auto-generated>
'     Il codice è stato generato da uno strumento.
'     Versione runtime:4.0.30319.42000
'
'     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
'     il codice viene rigenerato.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("log_db"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class log_db
    Inherits Global.System.Data.DataSet
    
    Private tableld_log As ld_logDataTable
    
    Private tablelog As logDataTable
    
    Private tablewd_log As wd_logDataTable
    
    Private tableld4_log As ld4_logDataTable
    
    Private tablelog_tower As log_towerDataTable
    
    Private tablelog_tampone As log_tamponeDataTable
    
    Private tableld_log_tampone As ld_log_tamponeDataTable
    
    Private tablelog_tower_tampone As log_tower_tamponeDataTable
    
    Private tablewd_log_tampone As wd_log_tamponeDataTable
    
    Private tablewh_log As wh_logDataTable
    
    Private tableltb_log As ltb_logDataTable
    
    Private tablelog_ldma As log_ldmaDataTable
    
    Private tablelog_lta_ltu_ltd As log_lta_ltu_ltdDataTable
    
    Private tablelog_ldlg As log_ldlgDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ld_log")) Is Nothing) Then
                MyBase.Tables.Add(New ld_logDataTable(ds.Tables("ld_log")))
            End If
            If (Not (ds.Tables("log")) Is Nothing) Then
                MyBase.Tables.Add(New logDataTable(ds.Tables("log")))
            End If
            If (Not (ds.Tables("wd_log")) Is Nothing) Then
                MyBase.Tables.Add(New wd_logDataTable(ds.Tables("wd_log")))
            End If
            If (Not (ds.Tables("ld4_log")) Is Nothing) Then
                MyBase.Tables.Add(New ld4_logDataTable(ds.Tables("ld4_log")))
            End If
            If (Not (ds.Tables("log_tower")) Is Nothing) Then
                MyBase.Tables.Add(New log_towerDataTable(ds.Tables("log_tower")))
            End If
            If (Not (ds.Tables("log_tampone")) Is Nothing) Then
                MyBase.Tables.Add(New log_tamponeDataTable(ds.Tables("log_tampone")))
            End If
            If (Not (ds.Tables("ld_log_tampone")) Is Nothing) Then
                MyBase.Tables.Add(New ld_log_tamponeDataTable(ds.Tables("ld_log_tampone")))
            End If
            If (Not (ds.Tables("log_tower_tampone")) Is Nothing) Then
                MyBase.Tables.Add(New log_tower_tamponeDataTable(ds.Tables("log_tower_tampone")))
            End If
            If (Not (ds.Tables("wd_log_tampone")) Is Nothing) Then
                MyBase.Tables.Add(New wd_log_tamponeDataTable(ds.Tables("wd_log_tampone")))
            End If
            If (Not (ds.Tables("wh_log")) Is Nothing) Then
                MyBase.Tables.Add(New wh_logDataTable(ds.Tables("wh_log")))
            End If
            If (Not (ds.Tables("ltb_log")) Is Nothing) Then
                MyBase.Tables.Add(New ltb_logDataTable(ds.Tables("ltb_log")))
            End If
            If (Not (ds.Tables("log_ldma")) Is Nothing) Then
                MyBase.Tables.Add(New log_ldmaDataTable(ds.Tables("log_ldma")))
            End If
            If (Not (ds.Tables("log_lta_ltu_ltd")) Is Nothing) Then
                MyBase.Tables.Add(New log_lta_ltu_ltdDataTable(ds.Tables("log_lta_ltu_ltd")))
            End If
            If (Not (ds.Tables("log_ldlg")) Is Nothing) Then
                MyBase.Tables.Add(New log_ldlgDataTable(ds.Tables("log_ldlg")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ld_log() As ld_logDataTable
        Get
            Return Me.tableld_log
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log() As logDataTable
        Get
            Return Me.tablelog
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property wd_log() As wd_logDataTable
        Get
            Return Me.tablewd_log
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ld4_log() As ld4_logDataTable
        Get
            Return Me.tableld4_log
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_tower() As log_towerDataTable
        Get
            Return Me.tablelog_tower
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_tampone() As log_tamponeDataTable
        Get
            Return Me.tablelog_tampone
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ld_log_tampone() As ld_log_tamponeDataTable
        Get
            Return Me.tableld_log_tampone
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_tower_tampone() As log_tower_tamponeDataTable
        Get
            Return Me.tablelog_tower_tampone
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property wd_log_tampone() As wd_log_tamponeDataTable
        Get
            Return Me.tablewd_log_tampone
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property wh_log() As wh_logDataTable
        Get
            Return Me.tablewh_log
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ltb_log() As ltb_logDataTable
        Get
            Return Me.tableltb_log
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_ldma() As log_ldmaDataTable
        Get
            Return Me.tablelog_ldma
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_lta_ltu_ltd() As log_lta_ltu_ltdDataTable
        Get
            Return Me.tablelog_lta_ltu_ltd
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_ldlg() As log_ldlgDataTable
        Get
            Return Me.tablelog_ldlg
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As log_db = CType(MyBase.Clone,log_db)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("ld_log")) Is Nothing) Then
                MyBase.Tables.Add(New ld_logDataTable(ds.Tables("ld_log")))
            End If
            If (Not (ds.Tables("log")) Is Nothing) Then
                MyBase.Tables.Add(New logDataTable(ds.Tables("log")))
            End If
            If (Not (ds.Tables("wd_log")) Is Nothing) Then
                MyBase.Tables.Add(New wd_logDataTable(ds.Tables("wd_log")))
            End If
            If (Not (ds.Tables("ld4_log")) Is Nothing) Then
                MyBase.Tables.Add(New ld4_logDataTable(ds.Tables("ld4_log")))
            End If
            If (Not (ds.Tables("log_tower")) Is Nothing) Then
                MyBase.Tables.Add(New log_towerDataTable(ds.Tables("log_tower")))
            End If
            If (Not (ds.Tables("log_tampone")) Is Nothing) Then
                MyBase.Tables.Add(New log_tamponeDataTable(ds.Tables("log_tampone")))
            End If
            If (Not (ds.Tables("ld_log_tampone")) Is Nothing) Then
                MyBase.Tables.Add(New ld_log_tamponeDataTable(ds.Tables("ld_log_tampone")))
            End If
            If (Not (ds.Tables("log_tower_tampone")) Is Nothing) Then
                MyBase.Tables.Add(New log_tower_tamponeDataTable(ds.Tables("log_tower_tampone")))
            End If
            If (Not (ds.Tables("wd_log_tampone")) Is Nothing) Then
                MyBase.Tables.Add(New wd_log_tamponeDataTable(ds.Tables("wd_log_tampone")))
            End If
            If (Not (ds.Tables("wh_log")) Is Nothing) Then
                MyBase.Tables.Add(New wh_logDataTable(ds.Tables("wh_log")))
            End If
            If (Not (ds.Tables("ltb_log")) Is Nothing) Then
                MyBase.Tables.Add(New ltb_logDataTable(ds.Tables("ltb_log")))
            End If
            If (Not (ds.Tables("log_ldma")) Is Nothing) Then
                MyBase.Tables.Add(New log_ldmaDataTable(ds.Tables("log_ldma")))
            End If
            If (Not (ds.Tables("log_lta_ltu_ltd")) Is Nothing) Then
                MyBase.Tables.Add(New log_lta_ltu_ltdDataTable(ds.Tables("log_lta_ltu_ltd")))
            End If
            If (Not (ds.Tables("log_ldlg")) Is Nothing) Then
                MyBase.Tables.Add(New log_ldlgDataTable(ds.Tables("log_ldlg")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableld_log = CType(MyBase.Tables("ld_log"),ld_logDataTable)
        If (initTable = true) Then
            If (Not (Me.tableld_log) Is Nothing) Then
                Me.tableld_log.InitVars
            End If
        End If
        Me.tablelog = CType(MyBase.Tables("log"),logDataTable)
        If (initTable = true) Then
            If (Not (Me.tablelog) Is Nothing) Then
                Me.tablelog.InitVars
            End If
        End If
        Me.tablewd_log = CType(MyBase.Tables("wd_log"),wd_logDataTable)
        If (initTable = true) Then
            If (Not (Me.tablewd_log) Is Nothing) Then
                Me.tablewd_log.InitVars
            End If
        End If
        Me.tableld4_log = CType(MyBase.Tables("ld4_log"),ld4_logDataTable)
        If (initTable = true) Then
            If (Not (Me.tableld4_log) Is Nothing) Then
                Me.tableld4_log.InitVars
            End If
        End If
        Me.tablelog_tower = CType(MyBase.Tables("log_tower"),log_towerDataTable)
        If (initTable = true) Then
            If (Not (Me.tablelog_tower) Is Nothing) Then
                Me.tablelog_tower.InitVars
            End If
        End If
        Me.tablelog_tampone = CType(MyBase.Tables("log_tampone"),log_tamponeDataTable)
        If (initTable = true) Then
            If (Not (Me.tablelog_tampone) Is Nothing) Then
                Me.tablelog_tampone.InitVars
            End If
        End If
        Me.tableld_log_tampone = CType(MyBase.Tables("ld_log_tampone"),ld_log_tamponeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableld_log_tampone) Is Nothing) Then
                Me.tableld_log_tampone.InitVars
            End If
        End If
        Me.tablelog_tower_tampone = CType(MyBase.Tables("log_tower_tampone"),log_tower_tamponeDataTable)
        If (initTable = true) Then
            If (Not (Me.tablelog_tower_tampone) Is Nothing) Then
                Me.tablelog_tower_tampone.InitVars
            End If
        End If
        Me.tablewd_log_tampone = CType(MyBase.Tables("wd_log_tampone"),wd_log_tamponeDataTable)
        If (initTable = true) Then
            If (Not (Me.tablewd_log_tampone) Is Nothing) Then
                Me.tablewd_log_tampone.InitVars
            End If
        End If
        Me.tablewh_log = CType(MyBase.Tables("wh_log"),wh_logDataTable)
        If (initTable = true) Then
            If (Not (Me.tablewh_log) Is Nothing) Then
                Me.tablewh_log.InitVars
            End If
        End If
        Me.tableltb_log = CType(MyBase.Tables("ltb_log"),ltb_logDataTable)
        If (initTable = true) Then
            If (Not (Me.tableltb_log) Is Nothing) Then
                Me.tableltb_log.InitVars
            End If
        End If
        Me.tablelog_ldma = CType(MyBase.Tables("log_ldma"),log_ldmaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablelog_ldma) Is Nothing) Then
                Me.tablelog_ldma.InitVars
            End If
        End If
        Me.tablelog_lta_ltu_ltd = CType(MyBase.Tables("log_lta_ltu_ltd"),log_lta_ltu_ltdDataTable)
        If (initTable = true) Then
            If (Not (Me.tablelog_lta_ltu_ltd) Is Nothing) Then
                Me.tablelog_lta_ltu_ltd.InitVars
            End If
        End If
        Me.tablelog_ldlg = CType(MyBase.Tables("log_ldlg"),log_ldlgDataTable)
        If (initTable = true) Then
            If (Not (Me.tablelog_ldlg) Is Nothing) Then
                Me.tablelog_ldlg.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "log_db"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/log_db.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableld_log = New ld_logDataTable()
        MyBase.Tables.Add(Me.tableld_log)
        Me.tablelog = New logDataTable()
        MyBase.Tables.Add(Me.tablelog)
        Me.tablewd_log = New wd_logDataTable()
        MyBase.Tables.Add(Me.tablewd_log)
        Me.tableld4_log = New ld4_logDataTable()
        MyBase.Tables.Add(Me.tableld4_log)
        Me.tablelog_tower = New log_towerDataTable()
        MyBase.Tables.Add(Me.tablelog_tower)
        Me.tablelog_tampone = New log_tamponeDataTable()
        MyBase.Tables.Add(Me.tablelog_tampone)
        Me.tableld_log_tampone = New ld_log_tamponeDataTable()
        MyBase.Tables.Add(Me.tableld_log_tampone)
        Me.tablelog_tower_tampone = New log_tower_tamponeDataTable()
        MyBase.Tables.Add(Me.tablelog_tower_tampone)
        Me.tablewd_log_tampone = New wd_log_tamponeDataTable()
        MyBase.Tables.Add(Me.tablewd_log_tampone)
        Me.tablewh_log = New wh_logDataTable()
        MyBase.Tables.Add(Me.tablewh_log)
        Me.tableltb_log = New ltb_logDataTable()
        MyBase.Tables.Add(Me.tableltb_log)
        Me.tablelog_ldma = New log_ldmaDataTable()
        MyBase.Tables.Add(Me.tablelog_ldma)
        Me.tablelog_lta_ltu_ltd = New log_lta_ltu_ltdDataTable()
        MyBase.Tables.Add(Me.tablelog_lta_ltu_ltd)
        Me.tablelog_ldlg = New log_ldlgDataTable()
        MyBase.Tables.Add(Me.tablelog_ldlg)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeld_log() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializelog() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializewd_log() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeld4_log() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializelog_tower() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializelog_tampone() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeld_log_tampone() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializelog_tower_tampone() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializewd_log_tampone() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializewh_log() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeltb_log() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializelog_ldma() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializelog_lta_ltu_ltd() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializelog_ldlg() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As log_db = New log_db()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ld_logRowChangeEventHandler(ByVal sender As Object, ByVal e As ld_logRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub logRowChangeEventHandler(ByVal sender As Object, ByVal e As logRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub wd_logRowChangeEventHandler(ByVal sender As Object, ByVal e As wd_logRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ld4_logRowChangeEventHandler(ByVal sender As Object, ByVal e As ld4_logRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub log_towerRowChangeEventHandler(ByVal sender As Object, ByVal e As log_towerRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub log_tamponeRowChangeEventHandler(ByVal sender As Object, ByVal e As log_tamponeRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ld_log_tamponeRowChangeEventHandler(ByVal sender As Object, ByVal e As ld_log_tamponeRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub log_tower_tamponeRowChangeEventHandler(ByVal sender As Object, ByVal e As log_tower_tamponeRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub wd_log_tamponeRowChangeEventHandler(ByVal sender As Object, ByVal e As wd_log_tamponeRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub wh_logRowChangeEventHandler(ByVal sender As Object, ByVal e As wh_logRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ltb_logRowChangeEventHandler(ByVal sender As Object, ByVal e As ltb_logRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub log_ldmaRowChangeEventHandler(ByVal sender As Object, ByVal e As log_ldmaRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub log_lta_ltu_ltdRowChangeEventHandler(ByVal sender As Object, ByVal e As log_lta_ltu_ltdRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub log_ldlgRowChangeEventHandler(ByVal sender As Object, ByVal e As log_ldlgRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ld_logDataTable
        Inherits Global.System.Data.TypedTableBase(Of ld_logRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ld_log"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ld_logRow
            Get
                Return CType(Me.Rows(index),ld_logRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ld_logRowChanging As ld_logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ld_logRowChanged As ld_logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ld_logRowDeleting As ld_logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ld_logRowDeleted As ld_logRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addld_logRow(ByVal row As ld_logRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addld_logRow(ByVal id As System.Guid) As ld_logRow
            Dim rowld_logRow As ld_logRow = CType(Me.NewRow,ld_logRow)
            Dim columnValuesArray() As Object = New Object() {id}
            rowld_logRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowld_logRow)
            Return rowld_logRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ld_logDataTable = CType(MyBase.Clone,ld_logDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ld_logDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newld_logRow() As ld_logRow
            Return CType(Me.NewRow,ld_logRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ld_logRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ld_logRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ld_logRowChangedEvent) Is Nothing) Then
                RaiseEvent ld_logRowChanged(Me, New ld_logRowChangeEvent(CType(e.Row,ld_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ld_logRowChangingEvent) Is Nothing) Then
                RaiseEvent ld_logRowChanging(Me, New ld_logRowChangeEvent(CType(e.Row,ld_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ld_logRowDeletedEvent) Is Nothing) Then
                RaiseEvent ld_logRowDeleted(Me, New ld_logRowChangeEvent(CType(e.Row,ld_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ld_logRowDeletingEvent) Is Nothing) Then
                RaiseEvent ld_logRowDeleting(Me, New ld_logRowChangeEvent(CType(e.Row,ld_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removeld_logRow(ByVal row As ld_logRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As log_db = New log_db()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ld_logDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class logDataTable
        Inherits Global.System.Data.TypedTableBase(Of logRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "log"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As logRow
            Get
                Return CType(Me.Rows(index),logRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event logRowChanging As logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event logRowChanged As logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event logRowDeleting As logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event logRowDeleted As logRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddlogRow(ByVal row As logRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddlogRow(ByVal id As System.Guid) As logRow
            Dim rowlogRow As logRow = CType(Me.NewRow,logRow)
            Dim columnValuesArray() As Object = New Object() {id}
            rowlogRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowlogRow)
            Return rowlogRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As logDataTable = CType(MyBase.Clone,logDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New logDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewlogRow() As logRow
            Return CType(Me.NewRow,logRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New logRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(logRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.logRowChangedEvent) Is Nothing) Then
                RaiseEvent logRowChanged(Me, New logRowChangeEvent(CType(e.Row,logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.logRowChangingEvent) Is Nothing) Then
                RaiseEvent logRowChanging(Me, New logRowChangeEvent(CType(e.Row,logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.logRowDeletedEvent) Is Nothing) Then
                RaiseEvent logRowDeleted(Me, New logRowChangeEvent(CType(e.Row,logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.logRowDeletingEvent) Is Nothing) Then
                RaiseEvent logRowDeleting(Me, New logRowChangeEvent(CType(e.Row,logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovelogRow(ByVal row As logRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As log_db = New log_db()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "logDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class wd_logDataTable
        Inherits Global.System.Data.TypedTableBase(Of wd_logRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "wd_log"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As wd_logRow
            Get
                Return CType(Me.Rows(index),wd_logRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event wd_logRowChanging As wd_logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event wd_logRowChanged As wd_logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event wd_logRowDeleting As wd_logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event wd_logRowDeleted As wd_logRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addwd_logRow(ByVal row As wd_logRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addwd_logRow(ByVal id As System.Guid) As wd_logRow
            Dim rowwd_logRow As wd_logRow = CType(Me.NewRow,wd_logRow)
            Dim columnValuesArray() As Object = New Object() {id}
            rowwd_logRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowwd_logRow)
            Return rowwd_logRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As wd_logDataTable = CType(MyBase.Clone,wd_logDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New wd_logDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newwd_logRow() As wd_logRow
            Return CType(Me.NewRow,wd_logRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New wd_logRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(wd_logRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.wd_logRowChangedEvent) Is Nothing) Then
                RaiseEvent wd_logRowChanged(Me, New wd_logRowChangeEvent(CType(e.Row,wd_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.wd_logRowChangingEvent) Is Nothing) Then
                RaiseEvent wd_logRowChanging(Me, New wd_logRowChangeEvent(CType(e.Row,wd_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.wd_logRowDeletedEvent) Is Nothing) Then
                RaiseEvent wd_logRowDeleted(Me, New wd_logRowChangeEvent(CType(e.Row,wd_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.wd_logRowDeletingEvent) Is Nothing) Then
                RaiseEvent wd_logRowDeleting(Me, New wd_logRowChangeEvent(CType(e.Row,wd_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removewd_logRow(ByVal row As wd_logRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As log_db = New log_db()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "wd_logDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ld4_logDataTable
        Inherits Global.System.Data.TypedTableBase(Of ld4_logRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ld4_log"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ld4_logRow
            Get
                Return CType(Me.Rows(index),ld4_logRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ld4_logRowChanging As ld4_logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ld4_logRowChanged As ld4_logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ld4_logRowDeleting As ld4_logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ld4_logRowDeleted As ld4_logRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addld4_logRow(ByVal row As ld4_logRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addld4_logRow(ByVal id As System.Guid) As ld4_logRow
            Dim rowld4_logRow As ld4_logRow = CType(Me.NewRow,ld4_logRow)
            Dim columnValuesArray() As Object = New Object() {id}
            rowld4_logRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowld4_logRow)
            Return rowld4_logRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ld4_logDataTable = CType(MyBase.Clone,ld4_logDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ld4_logDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newld4_logRow() As ld4_logRow
            Return CType(Me.NewRow,ld4_logRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ld4_logRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ld4_logRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ld4_logRowChangedEvent) Is Nothing) Then
                RaiseEvent ld4_logRowChanged(Me, New ld4_logRowChangeEvent(CType(e.Row,ld4_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ld4_logRowChangingEvent) Is Nothing) Then
                RaiseEvent ld4_logRowChanging(Me, New ld4_logRowChangeEvent(CType(e.Row,ld4_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ld4_logRowDeletedEvent) Is Nothing) Then
                RaiseEvent ld4_logRowDeleted(Me, New ld4_logRowChangeEvent(CType(e.Row,ld4_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ld4_logRowDeletingEvent) Is Nothing) Then
                RaiseEvent ld4_logRowDeleting(Me, New ld4_logRowChangeEvent(CType(e.Row,ld4_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removeld4_logRow(ByVal row As ld4_logRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As log_db = New log_db()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ld4_logDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class log_towerDataTable
        Inherits Global.System.Data.TypedTableBase(Of log_towerRow)
        
        Private columnExpr1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "log_tower"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Expr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_towerRow
            Get
                Return CType(Me.Rows(index),log_towerRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_towerRowChanging As log_towerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_towerRowChanged As log_towerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_towerRowDeleting As log_towerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_towerRowDeleted As log_towerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addlog_towerRow(ByVal row As log_towerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addlog_towerRow(ByVal Expr1 As Integer) As log_towerRow
            Dim rowlog_towerRow As log_towerRow = CType(Me.NewRow,log_towerRow)
            Dim columnValuesArray() As Object = New Object() {Expr1}
            rowlog_towerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowlog_towerRow)
            Return rowlog_towerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As log_towerDataTable = CType(MyBase.Clone,log_towerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New log_towerDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnExpr1 = MyBase.Columns("Expr1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnExpr1 = New Global.System.Data.DataColumn("Expr1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr1)
            Me.columnExpr1.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newlog_towerRow() As log_towerRow
            Return CType(Me.NewRow,log_towerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New log_towerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(log_towerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_towerRowChangedEvent) Is Nothing) Then
                RaiseEvent log_towerRowChanged(Me, New log_towerRowChangeEvent(CType(e.Row,log_towerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_towerRowChangingEvent) Is Nothing) Then
                RaiseEvent log_towerRowChanging(Me, New log_towerRowChangeEvent(CType(e.Row,log_towerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_towerRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_towerRowDeleted(Me, New log_towerRowChangeEvent(CType(e.Row,log_towerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_towerRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_towerRowDeleting(Me, New log_towerRowChangeEvent(CType(e.Row,log_towerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removelog_towerRow(ByVal row As log_towerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As log_db = New log_db()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "log_towerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class log_tamponeDataTable
        Inherits Global.System.Data.TypedTableBase(Of log_tamponeRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnidentificativo As Global.System.Data.DataColumn
        
        Private columnid_485 As Global.System.Data.DataColumn
        
        Private columndata As Global.System.Data.DataColumn
        
        Private columnvalore1 As Global.System.Data.DataColumn
        
        Private columnvalore2 As Global.System.Data.DataColumn
        
        Private columnvalore3 As Global.System.Data.DataColumn
        
        Private columnvalore4 As Global.System.Data.DataColumn
        
        Private columnvalore5 As Global.System.Data.DataColumn
        
        Private columnAa1 As Global.System.Data.DataColumn
        
        Private columnAb1 As Global.System.Data.DataColumn
        
        Private columnAd1 As Global.System.Data.DataColumn
        
        Private columnAr1 As Global.System.Data.DataColumn
        
        Private columnAa2 As Global.System.Data.DataColumn
        
        Private columnAb2 As Global.System.Data.DataColumn
        
        Private columnAd2 As Global.System.Data.DataColumn
        
        Private columnAr2 As Global.System.Data.DataColumn
        
        Private columnAa3 As Global.System.Data.DataColumn
        
        Private columnAb3 As Global.System.Data.DataColumn
        
        Private columnAd3 As Global.System.Data.DataColumn
        
        Private columnAr3 As Global.System.Data.DataColumn
        
        Private columnAa4 As Global.System.Data.DataColumn
        
        Private columnAb4 As Global.System.Data.DataColumn
        
        Private columnAd4 As Global.System.Data.DataColumn
        
        Private columnAr4 As Global.System.Data.DataColumn
        
        Private columnAa5 As Global.System.Data.DataColumn
        
        Private columnAb5 As Global.System.Data.DataColumn
        
        Private columnAd5 As Global.System.Data.DataColumn
        
        Private columnAr5 As Global.System.Data.DataColumn
        
        Private columnFlow As Global.System.Data.DataColumn
        
        Private columnwm As Global.System.Data.DataColumn
        
        Private columntemperatura As Global.System.Data.DataColumn
        
        Private columnfml As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "log_tampone"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property identificativoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidentificativo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_485Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_485
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dataColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndata
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valore1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalore1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valore2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalore2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valore3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalore3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valore4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalore4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valore5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalore5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Aa1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAa1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ab1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAb1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ad1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAd1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ar1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Aa2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAa2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ab2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAb2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ad2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAd2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ar2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAr2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Aa3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAa3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ab3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAb3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ad3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAd3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ar3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAr3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Aa4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAa4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ab4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAb4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ad4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAd4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ar4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAr4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Aa5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAa5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ab5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAb5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ad5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAd5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ar5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAr5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FlowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property wmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property temperaturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntemperatura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property fmlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfml
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_tamponeRow
            Get
                Return CType(Me.Rows(index),log_tamponeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_tamponeRowChanging As log_tamponeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_tamponeRowChanged As log_tamponeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_tamponeRowDeleting As log_tamponeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_tamponeRowDeleted As log_tamponeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addlog_tamponeRow(ByVal row As log_tamponeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addlog_tamponeRow( _
                    ByVal id As System.Guid,  _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Date,  _
                    ByVal valore1 As Single,  _
                    ByVal valore2 As Single,  _
                    ByVal valore3 As Single,  _
                    ByVal valore4 As Single,  _
                    ByVal valore5 As Single,  _
                    ByVal Aa1 As String,  _
                    ByVal Ab1 As String,  _
                    ByVal Ad1 As String,  _
                    ByVal Ar1 As String,  _
                    ByVal Aa2 As String,  _
                    ByVal Ab2 As String,  _
                    ByVal Ad2 As String,  _
                    ByVal Ar2 As String,  _
                    ByVal Aa3 As String,  _
                    ByVal Ab3 As String,  _
                    ByVal Ad3 As String,  _
                    ByVal Ar3 As String,  _
                    ByVal Aa4 As String,  _
                    ByVal Ab4 As String,  _
                    ByVal Ad4 As String,  _
                    ByVal Ar4 As String,  _
                    ByVal Aa5 As String,  _
                    ByVal Ab5 As String,  _
                    ByVal Ad5 As String,  _
                    ByVal Ar5 As String,  _
                    ByVal Flow As String,  _
                    ByVal wm As Single,  _
                    ByVal temperatura As Single,  _
                    ByVal fml As String) As log_tamponeRow
            Dim rowlog_tamponeRow As log_tamponeRow = CType(Me.NewRow,log_tamponeRow)
            Dim columnValuesArray() As Object = New Object() {id, identificativo, id_485, data, valore1, valore2, valore3, valore4, valore5, Aa1, Ab1, Ad1, Ar1, Aa2, Ab2, Ad2, Ar2, Aa3, Ab3, Ad3, Ar3, Aa4, Ab4, Ad4, Ar4, Aa5, Ab5, Ad5, Ar5, Flow, wm, temperatura, fml}
            rowlog_tamponeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowlog_tamponeRow)
            Return rowlog_tamponeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As log_tamponeDataTable = CType(MyBase.Clone,log_tamponeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New log_tamponeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnidentificativo = MyBase.Columns("identificativo")
            Me.columnid_485 = MyBase.Columns("id_485")
            Me.columndata = MyBase.Columns("data")
            Me.columnvalore1 = MyBase.Columns("valore1")
            Me.columnvalore2 = MyBase.Columns("valore2")
            Me.columnvalore3 = MyBase.Columns("valore3")
            Me.columnvalore4 = MyBase.Columns("valore4")
            Me.columnvalore5 = MyBase.Columns("valore5")
            Me.columnAa1 = MyBase.Columns("Aa1")
            Me.columnAb1 = MyBase.Columns("Ab1")
            Me.columnAd1 = MyBase.Columns("Ad1")
            Me.columnAr1 = MyBase.Columns("Ar1")
            Me.columnAa2 = MyBase.Columns("Aa2")
            Me.columnAb2 = MyBase.Columns("Ab2")
            Me.columnAd2 = MyBase.Columns("Ad2")
            Me.columnAr2 = MyBase.Columns("Ar2")
            Me.columnAa3 = MyBase.Columns("Aa3")
            Me.columnAb3 = MyBase.Columns("Ab3")
            Me.columnAd3 = MyBase.Columns("Ad3")
            Me.columnAr3 = MyBase.Columns("Ar3")
            Me.columnAa4 = MyBase.Columns("Aa4")
            Me.columnAb4 = MyBase.Columns("Ab4")
            Me.columnAd4 = MyBase.Columns("Ad4")
            Me.columnAr4 = MyBase.Columns("Ar4")
            Me.columnAa5 = MyBase.Columns("Aa5")
            Me.columnAb5 = MyBase.Columns("Ab5")
            Me.columnAd5 = MyBase.Columns("Ad5")
            Me.columnAr5 = MyBase.Columns("Ar5")
            Me.columnFlow = MyBase.Columns("Flow")
            Me.columnwm = MyBase.Columns("wm")
            Me.columntemperatura = MyBase.Columns("temperatura")
            Me.columnfml = MyBase.Columns("fml")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnidentificativo = New Global.System.Data.DataColumn("identificativo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidentificativo)
            Me.columnid_485 = New Global.System.Data.DataColumn("id_485", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_485)
            Me.columndata = New Global.System.Data.DataColumn("data", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata)
            Me.columnvalore1 = New Global.System.Data.DataColumn("valore1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalore1)
            Me.columnvalore2 = New Global.System.Data.DataColumn("valore2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalore2)
            Me.columnvalore3 = New Global.System.Data.DataColumn("valore3", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalore3)
            Me.columnvalore4 = New Global.System.Data.DataColumn("valore4", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalore4)
            Me.columnvalore5 = New Global.System.Data.DataColumn("valore5", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalore5)
            Me.columnAa1 = New Global.System.Data.DataColumn("Aa1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAa1)
            Me.columnAb1 = New Global.System.Data.DataColumn("Ab1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAb1)
            Me.columnAd1 = New Global.System.Data.DataColumn("Ad1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAd1)
            Me.columnAr1 = New Global.System.Data.DataColumn("Ar1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAr1)
            Me.columnAa2 = New Global.System.Data.DataColumn("Aa2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAa2)
            Me.columnAb2 = New Global.System.Data.DataColumn("Ab2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAb2)
            Me.columnAd2 = New Global.System.Data.DataColumn("Ad2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAd2)
            Me.columnAr2 = New Global.System.Data.DataColumn("Ar2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAr2)
            Me.columnAa3 = New Global.System.Data.DataColumn("Aa3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAa3)
            Me.columnAb3 = New Global.System.Data.DataColumn("Ab3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAb3)
            Me.columnAd3 = New Global.System.Data.DataColumn("Ad3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAd3)
            Me.columnAr3 = New Global.System.Data.DataColumn("Ar3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAr3)
            Me.columnAa4 = New Global.System.Data.DataColumn("Aa4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAa4)
            Me.columnAb4 = New Global.System.Data.DataColumn("Ab4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAb4)
            Me.columnAd4 = New Global.System.Data.DataColumn("Ad4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAd4)
            Me.columnAr4 = New Global.System.Data.DataColumn("Ar4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAr4)
            Me.columnAa5 = New Global.System.Data.DataColumn("Aa5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAa5)
            Me.columnAb5 = New Global.System.Data.DataColumn("Ab5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAb5)
            Me.columnAd5 = New Global.System.Data.DataColumn("Ad5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAd5)
            Me.columnAr5 = New Global.System.Data.DataColumn("Ar5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAr5)
            Me.columnFlow = New Global.System.Data.DataColumn("Flow", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlow)
            Me.columnwm = New Global.System.Data.DataColumn("wm", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwm)
            Me.columntemperatura = New Global.System.Data.DataColumn("temperatura", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntemperatura)
            Me.columnfml = New Global.System.Data.DataColumn("fml", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfml)
            Me.columnidentificativo.MaxLength = 50
            Me.columnid_485.MaxLength = 10
            Me.columnAa1.MaxLength = 10
            Me.columnAb1.MaxLength = 10
            Me.columnAd1.MaxLength = 10
            Me.columnAr1.MaxLength = 10
            Me.columnAa2.MaxLength = 10
            Me.columnAb2.MaxLength = 10
            Me.columnAd2.MaxLength = 10
            Me.columnAr2.MaxLength = 10
            Me.columnAa3.MaxLength = 10
            Me.columnAb3.MaxLength = 10
            Me.columnAd3.MaxLength = 10
            Me.columnAr3.MaxLength = 10
            Me.columnAa4.MaxLength = 10
            Me.columnAb4.MaxLength = 10
            Me.columnAd4.MaxLength = 10
            Me.columnAr4.MaxLength = 10
            Me.columnAa5.MaxLength = 10
            Me.columnAb5.MaxLength = 10
            Me.columnAd5.MaxLength = 10
            Me.columnAr5.MaxLength = 10
            Me.columnFlow.MaxLength = 10
            Me.columnfml.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newlog_tamponeRow() As log_tamponeRow
            Return CType(Me.NewRow,log_tamponeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New log_tamponeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(log_tamponeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_tamponeRowChangedEvent) Is Nothing) Then
                RaiseEvent log_tamponeRowChanged(Me, New log_tamponeRowChangeEvent(CType(e.Row,log_tamponeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_tamponeRowChangingEvent) Is Nothing) Then
                RaiseEvent log_tamponeRowChanging(Me, New log_tamponeRowChangeEvent(CType(e.Row,log_tamponeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_tamponeRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_tamponeRowDeleted(Me, New log_tamponeRowChangeEvent(CType(e.Row,log_tamponeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_tamponeRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_tamponeRowDeleting(Me, New log_tamponeRowChangeEvent(CType(e.Row,log_tamponeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removelog_tamponeRow(ByVal row As log_tamponeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As log_db = New log_db()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "log_tamponeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ld_log_tamponeDataTable
        Inherits Global.System.Data.TypedTableBase(Of ld_log_tamponeRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnidentificativo As Global.System.Data.DataColumn
        
        Private columnid_485 As Global.System.Data.DataColumn
        
        Private columndata As Global.System.Data.DataColumn
        
        Private columnvalore1 As Global.System.Data.DataColumn
        
        Private columnvalore2 As Global.System.Data.DataColumn
        
        Private columnvalore3 As Global.System.Data.DataColumn
        
        Private columnflusso As Global.System.Data.DataColumn
        
        Private columnfeed_limit_ph As Global.System.Data.DataColumn
        
        Private columnfeed_limit_cl As Global.System.Data.DataColumn
        
        Private columndos_alarm_cl As Global.System.Data.DataColumn
        
        Private columndos_alarm_ph As Global.System.Data.DataColumn
        
        Private columnprobe_fail_ph As Global.System.Data.DataColumn
        
        Private columnprobe_fail_cl As Global.System.Data.DataColumn
        
        Private columnlivello1 As Global.System.Data.DataColumn
        
        Private columnlivello2 As Global.System.Data.DataColumn
        
        Private columntemperatura As Global.System.Data.DataColumn
        
        Private columnlivello3 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ld_log_tampone"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property identificativoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidentificativo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_485Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_485
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dataColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndata
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valore1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalore1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valore2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalore2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valore3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalore3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property flussoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnflusso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property feed_limit_phColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfeed_limit_ph
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property feed_limit_clColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfeed_limit_cl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dos_alarm_clColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndos_alarm_cl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dos_alarm_phColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndos_alarm_ph
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property probe_fail_phColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprobe_fail_ph
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property probe_fail_clColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprobe_fail_cl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property livello1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlivello1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property livello2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlivello2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property temperaturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntemperatura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property livello3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlivello3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ld_log_tamponeRow
            Get
                Return CType(Me.Rows(index),ld_log_tamponeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ld_log_tamponeRowChanging As ld_log_tamponeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ld_log_tamponeRowChanged As ld_log_tamponeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ld_log_tamponeRowDeleting As ld_log_tamponeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ld_log_tamponeRowDeleted As ld_log_tamponeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addld_log_tamponeRow(ByVal row As ld_log_tamponeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addld_log_tamponeRow( _
                    ByVal id As System.Guid,  _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Date,  _
                    ByVal valore1 As Single,  _
                    ByVal valore2 As Single,  _
                    ByVal valore3 As Single,  _
                    ByVal flusso As String,  _
                    ByVal feed_limit_ph As String,  _
                    ByVal feed_limit_cl As String,  _
                    ByVal dos_alarm_cl As String,  _
                    ByVal dos_alarm_ph As String,  _
                    ByVal probe_fail_ph As String,  _
                    ByVal probe_fail_cl As String,  _
                    ByVal livello1 As String,  _
                    ByVal livello2 As String,  _
                    ByVal temperatura As Single,  _
                    ByVal livello3 As String) As ld_log_tamponeRow
            Dim rowld_log_tamponeRow As ld_log_tamponeRow = CType(Me.NewRow,ld_log_tamponeRow)
            Dim columnValuesArray() As Object = New Object() {id, identificativo, id_485, data, valore1, valore2, valore3, flusso, feed_limit_ph, feed_limit_cl, dos_alarm_cl, dos_alarm_ph, probe_fail_ph, probe_fail_cl, livello1, livello2, temperatura, livello3}
            rowld_log_tamponeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowld_log_tamponeRow)
            Return rowld_log_tamponeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ld_log_tamponeDataTable = CType(MyBase.Clone,ld_log_tamponeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ld_log_tamponeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnidentificativo = MyBase.Columns("identificativo")
            Me.columnid_485 = MyBase.Columns("id_485")
            Me.columndata = MyBase.Columns("data")
            Me.columnvalore1 = MyBase.Columns("valore1")
            Me.columnvalore2 = MyBase.Columns("valore2")
            Me.columnvalore3 = MyBase.Columns("valore3")
            Me.columnflusso = MyBase.Columns("flusso")
            Me.columnfeed_limit_ph = MyBase.Columns("feed_limit_ph")
            Me.columnfeed_limit_cl = MyBase.Columns("feed_limit_cl")
            Me.columndos_alarm_cl = MyBase.Columns("dos_alarm_cl")
            Me.columndos_alarm_ph = MyBase.Columns("dos_alarm_ph")
            Me.columnprobe_fail_ph = MyBase.Columns("probe_fail_ph")
            Me.columnprobe_fail_cl = MyBase.Columns("probe_fail_cl")
            Me.columnlivello1 = MyBase.Columns("livello1")
            Me.columnlivello2 = MyBase.Columns("livello2")
            Me.columntemperatura = MyBase.Columns("temperatura")
            Me.columnlivello3 = MyBase.Columns("livello3")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnidentificativo = New Global.System.Data.DataColumn("identificativo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidentificativo)
            Me.columnid_485 = New Global.System.Data.DataColumn("id_485", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_485)
            Me.columndata = New Global.System.Data.DataColumn("data", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata)
            Me.columnvalore1 = New Global.System.Data.DataColumn("valore1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalore1)
            Me.columnvalore2 = New Global.System.Data.DataColumn("valore2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalore2)
            Me.columnvalore3 = New Global.System.Data.DataColumn("valore3", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalore3)
            Me.columnflusso = New Global.System.Data.DataColumn("flusso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnflusso)
            Me.columnfeed_limit_ph = New Global.System.Data.DataColumn("feed_limit_ph", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfeed_limit_ph)
            Me.columnfeed_limit_cl = New Global.System.Data.DataColumn("feed_limit_cl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfeed_limit_cl)
            Me.columndos_alarm_cl = New Global.System.Data.DataColumn("dos_alarm_cl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndos_alarm_cl)
            Me.columndos_alarm_ph = New Global.System.Data.DataColumn("dos_alarm_ph", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndos_alarm_ph)
            Me.columnprobe_fail_ph = New Global.System.Data.DataColumn("probe_fail_ph", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprobe_fail_ph)
            Me.columnprobe_fail_cl = New Global.System.Data.DataColumn("probe_fail_cl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprobe_fail_cl)
            Me.columnlivello1 = New Global.System.Data.DataColumn("livello1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlivello1)
            Me.columnlivello2 = New Global.System.Data.DataColumn("livello2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlivello2)
            Me.columntemperatura = New Global.System.Data.DataColumn("temperatura", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntemperatura)
            Me.columnlivello3 = New Global.System.Data.DataColumn("livello3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlivello3)
            Me.columnidentificativo.MaxLength = 50
            Me.columnid_485.MaxLength = 10
            Me.columnflusso.MaxLength = 10
            Me.columnfeed_limit_ph.MaxLength = 10
            Me.columnfeed_limit_cl.MaxLength = 10
            Me.columndos_alarm_cl.MaxLength = 10
            Me.columndos_alarm_ph.MaxLength = 10
            Me.columnprobe_fail_ph.MaxLength = 10
            Me.columnprobe_fail_cl.MaxLength = 10
            Me.columnlivello1.MaxLength = 2147483647
            Me.columnlivello2.MaxLength = 2147483647
            Me.columnlivello3.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newld_log_tamponeRow() As ld_log_tamponeRow
            Return CType(Me.NewRow,ld_log_tamponeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ld_log_tamponeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ld_log_tamponeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ld_log_tamponeRowChangedEvent) Is Nothing) Then
                RaiseEvent ld_log_tamponeRowChanged(Me, New ld_log_tamponeRowChangeEvent(CType(e.Row,ld_log_tamponeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ld_log_tamponeRowChangingEvent) Is Nothing) Then
                RaiseEvent ld_log_tamponeRowChanging(Me, New ld_log_tamponeRowChangeEvent(CType(e.Row,ld_log_tamponeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ld_log_tamponeRowDeletedEvent) Is Nothing) Then
                RaiseEvent ld_log_tamponeRowDeleted(Me, New ld_log_tamponeRowChangeEvent(CType(e.Row,ld_log_tamponeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ld_log_tamponeRowDeletingEvent) Is Nothing) Then
                RaiseEvent ld_log_tamponeRowDeleting(Me, New ld_log_tamponeRowChangeEvent(CType(e.Row,ld_log_tamponeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removeld_log_tamponeRow(ByVal row As ld_log_tamponeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As log_db = New log_db()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ld_log_tamponeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class log_tower_tamponeDataTable
        Inherits Global.System.Data.TypedTableBase(Of log_tower_tamponeRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnidentificativo As Global.System.Data.DataColumn
        
        Private columnid_485 As Global.System.Data.DataColumn
        
        Private columndata As Global.System.Data.DataColumn
        
        Private columnvalore1 As Global.System.Data.DataColumn
        
        Private columnvalore2 As Global.System.Data.DataColumn
        
        Private columnvalore3 As Global.System.Data.DataColumn
        
        Private columntemperatura As Global.System.Data.DataColumn
        
        Private columncd_high As Global.System.Data.DataColumn
        
        Private columncd_low As Global.System.Data.DataColumn
        
        Private columnbleed_timeout As Global.System.Data.DataColumn
        
        Private columnflow As Global.System.Data.DataColumn
        
        Private columnlevel_inhibitor As Global.System.Data.DataColumn
        
        Private columnlevel_prebiocide1 As Global.System.Data.DataColumn
        
        Private columnlevel_prebiocide2 As Global.System.Data.DataColumn
        
        Private columnlevel_biocide1 As Global.System.Data.DataColumn
        
        Private columnlevel_biocide2 As Global.System.Data.DataColumn
        
        Private columnch2_high As Global.System.Data.DataColumn
        
        Private columnch2_low As Global.System.Data.DataColumn
        
        Private columnch2_level As Global.System.Data.DataColumn
        
        Private columnch3_high As Global.System.Data.DataColumn
        
        Private columnch3_low As Global.System.Data.DataColumn
        
        Private columnch3_level As Global.System.Data.DataColumn
        
        Private columntot_input As Global.System.Data.DataColumn
        
        Private columntot_bleed As Global.System.Data.DataColumn
        
        Private columnOut_inhibitore_digital As Global.System.Data.DataColumn
        
        Private columnOut_inhibitore_prop As Global.System.Data.DataColumn
        
        Private columnOut_bleed As Global.System.Data.DataColumn
        
        Private columnOut_prebiocide1 As Global.System.Data.DataColumn
        
        Private columnOut_prebiocide2 As Global.System.Data.DataColumn
        
        Private columnOut_biocide1 As Global.System.Data.DataColumn
        
        Private columnOut_biocide2 As Global.System.Data.DataColumn
        
        Private columnCh2_prop As Global.System.Data.DataColumn
        
        Private columnCh2_dig As Global.System.Data.DataColumn
        
        Private columnCh3_prop As Global.System.Data.DataColumn
        
        Private columnCh3_dig As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "log_tower_tampone"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property identificativoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidentificativo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_485Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_485
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dataColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndata
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valore1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalore1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valore2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalore2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valore3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalore3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property temperaturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntemperatura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property cd_highColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncd_high
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property cd_lowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncd_low
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bleed_timeoutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbleed_timeout
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property flowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnflow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property level_inhibitorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlevel_inhibitor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property level_prebiocide1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlevel_prebiocide1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property level_prebiocide2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlevel_prebiocide2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property level_biocide1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlevel_biocide1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property level_biocide2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlevel_biocide2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ch2_highColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnch2_high
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ch2_lowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnch2_low
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ch2_levelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnch2_level
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ch3_highColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnch3_high
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ch3_lowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnch3_low
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ch3_levelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnch3_level
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tot_inputColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntot_input
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tot_bleedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntot_bleed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Out_inhibitore_digitalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOut_inhibitore_digital
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Out_inhibitore_propColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOut_inhibitore_prop
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Out_bleedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOut_bleed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Out_prebiocide1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOut_prebiocide1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Out_prebiocide2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOut_prebiocide2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Out_biocide1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOut_biocide1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Out_biocide2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOut_biocide2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ch2_propColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCh2_prop
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ch2_digColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCh2_dig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ch3_propColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCh3_prop
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ch3_digColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCh3_dig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_tower_tamponeRow
            Get
                Return CType(Me.Rows(index),log_tower_tamponeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_tower_tamponeRowChanging As log_tower_tamponeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_tower_tamponeRowChanged As log_tower_tamponeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_tower_tamponeRowDeleting As log_tower_tamponeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_tower_tamponeRowDeleted As log_tower_tamponeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addlog_tower_tamponeRow(ByVal row As log_tower_tamponeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addlog_tower_tamponeRow( _
                    ByVal id As System.Guid,  _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Date,  _
                    ByVal valore1 As Single,  _
                    ByVal valore2 As Single,  _
                    ByVal valore3 As Single,  _
                    ByVal temperatura As String,  _
                    ByVal cd_high As String,  _
                    ByVal cd_low As String,  _
                    ByVal bleed_timeout As String,  _
                    ByVal flow As String,  _
                    ByVal level_inhibitor As String,  _
                    ByVal level_prebiocide1 As String,  _
                    ByVal level_prebiocide2 As String,  _
                    ByVal level_biocide1 As String,  _
                    ByVal level_biocide2 As String,  _
                    ByVal ch2_high As String,  _
                    ByVal ch2_low As String,  _
                    ByVal ch2_level As String,  _
                    ByVal ch3_high As String,  _
                    ByVal ch3_low As String,  _
                    ByVal ch3_level As String,  _
                    ByVal tot_input As String,  _
                    ByVal tot_bleed As String,  _
                    ByVal Out_inhibitore_digital As String,  _
                    ByVal Out_inhibitore_prop As String,  _
                    ByVal Out_bleed As String,  _
                    ByVal Out_prebiocide1 As String,  _
                    ByVal Out_prebiocide2 As String,  _
                    ByVal Out_biocide1 As String,  _
                    ByVal Out_biocide2 As String,  _
                    ByVal Ch2_prop As String,  _
                    ByVal Ch2_dig As String,  _
                    ByVal Ch3_prop As String,  _
                    ByVal Ch3_dig As String) As log_tower_tamponeRow
            Dim rowlog_tower_tamponeRow As log_tower_tamponeRow = CType(Me.NewRow,log_tower_tamponeRow)
            Dim columnValuesArray() As Object = New Object() {id, identificativo, id_485, data, valore1, valore2, valore3, temperatura, cd_high, cd_low, bleed_timeout, flow, level_inhibitor, level_prebiocide1, level_prebiocide2, level_biocide1, level_biocide2, ch2_high, ch2_low, ch2_level, ch3_high, ch3_low, ch3_level, tot_input, tot_bleed, Out_inhibitore_digital, Out_inhibitore_prop, Out_bleed, Out_prebiocide1, Out_prebiocide2, Out_biocide1, Out_biocide2, Ch2_prop, Ch2_dig, Ch3_prop, Ch3_dig}
            rowlog_tower_tamponeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowlog_tower_tamponeRow)
            Return rowlog_tower_tamponeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As log_tower_tamponeDataTable = CType(MyBase.Clone,log_tower_tamponeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New log_tower_tamponeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnidentificativo = MyBase.Columns("identificativo")
            Me.columnid_485 = MyBase.Columns("id_485")
            Me.columndata = MyBase.Columns("data")
            Me.columnvalore1 = MyBase.Columns("valore1")
            Me.columnvalore2 = MyBase.Columns("valore2")
            Me.columnvalore3 = MyBase.Columns("valore3")
            Me.columntemperatura = MyBase.Columns("temperatura")
            Me.columncd_high = MyBase.Columns("cd_high")
            Me.columncd_low = MyBase.Columns("cd_low")
            Me.columnbleed_timeout = MyBase.Columns("bleed_timeout")
            Me.columnflow = MyBase.Columns("flow")
            Me.columnlevel_inhibitor = MyBase.Columns("level_inhibitor")
            Me.columnlevel_prebiocide1 = MyBase.Columns("level_prebiocide1")
            Me.columnlevel_prebiocide2 = MyBase.Columns("level_prebiocide2")
            Me.columnlevel_biocide1 = MyBase.Columns("level_biocide1")
            Me.columnlevel_biocide2 = MyBase.Columns("level_biocide2")
            Me.columnch2_high = MyBase.Columns("ch2_high")
            Me.columnch2_low = MyBase.Columns("ch2_low")
            Me.columnch2_level = MyBase.Columns("ch2_level")
            Me.columnch3_high = MyBase.Columns("ch3_high")
            Me.columnch3_low = MyBase.Columns("ch3_low")
            Me.columnch3_level = MyBase.Columns("ch3_level")
            Me.columntot_input = MyBase.Columns("tot_input")
            Me.columntot_bleed = MyBase.Columns("tot_bleed")
            Me.columnOut_inhibitore_digital = MyBase.Columns("Out_inhibitore_digital")
            Me.columnOut_inhibitore_prop = MyBase.Columns("Out_inhibitore_prop")
            Me.columnOut_bleed = MyBase.Columns("Out_bleed")
            Me.columnOut_prebiocide1 = MyBase.Columns("Out_prebiocide1")
            Me.columnOut_prebiocide2 = MyBase.Columns("Out_prebiocide2")
            Me.columnOut_biocide1 = MyBase.Columns("Out_biocide1")
            Me.columnOut_biocide2 = MyBase.Columns("Out_biocide2")
            Me.columnCh2_prop = MyBase.Columns("Ch2_prop")
            Me.columnCh2_dig = MyBase.Columns("Ch2_dig")
            Me.columnCh3_prop = MyBase.Columns("Ch3_prop")
            Me.columnCh3_dig = MyBase.Columns("Ch3_dig")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnidentificativo = New Global.System.Data.DataColumn("identificativo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidentificativo)
            Me.columnid_485 = New Global.System.Data.DataColumn("id_485", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_485)
            Me.columndata = New Global.System.Data.DataColumn("data", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata)
            Me.columnvalore1 = New Global.System.Data.DataColumn("valore1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalore1)
            Me.columnvalore2 = New Global.System.Data.DataColumn("valore2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalore2)
            Me.columnvalore3 = New Global.System.Data.DataColumn("valore3", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalore3)
            Me.columntemperatura = New Global.System.Data.DataColumn("temperatura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntemperatura)
            Me.columncd_high = New Global.System.Data.DataColumn("cd_high", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncd_high)
            Me.columncd_low = New Global.System.Data.DataColumn("cd_low", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncd_low)
            Me.columnbleed_timeout = New Global.System.Data.DataColumn("bleed_timeout", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbleed_timeout)
            Me.columnflow = New Global.System.Data.DataColumn("flow", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnflow)
            Me.columnlevel_inhibitor = New Global.System.Data.DataColumn("level_inhibitor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlevel_inhibitor)
            Me.columnlevel_prebiocide1 = New Global.System.Data.DataColumn("level_prebiocide1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlevel_prebiocide1)
            Me.columnlevel_prebiocide2 = New Global.System.Data.DataColumn("level_prebiocide2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlevel_prebiocide2)
            Me.columnlevel_biocide1 = New Global.System.Data.DataColumn("level_biocide1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlevel_biocide1)
            Me.columnlevel_biocide2 = New Global.System.Data.DataColumn("level_biocide2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlevel_biocide2)
            Me.columnch2_high = New Global.System.Data.DataColumn("ch2_high", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnch2_high)
            Me.columnch2_low = New Global.System.Data.DataColumn("ch2_low", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnch2_low)
            Me.columnch2_level = New Global.System.Data.DataColumn("ch2_level", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnch2_level)
            Me.columnch3_high = New Global.System.Data.DataColumn("ch3_high", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnch3_high)
            Me.columnch3_low = New Global.System.Data.DataColumn("ch3_low", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnch3_low)
            Me.columnch3_level = New Global.System.Data.DataColumn("ch3_level", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnch3_level)
            Me.columntot_input = New Global.System.Data.DataColumn("tot_input", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntot_input)
            Me.columntot_bleed = New Global.System.Data.DataColumn("tot_bleed", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntot_bleed)
            Me.columnOut_inhibitore_digital = New Global.System.Data.DataColumn("Out_inhibitore_digital", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOut_inhibitore_digital)
            Me.columnOut_inhibitore_prop = New Global.System.Data.DataColumn("Out_inhibitore_prop", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOut_inhibitore_prop)
            Me.columnOut_bleed = New Global.System.Data.DataColumn("Out_bleed", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOut_bleed)
            Me.columnOut_prebiocide1 = New Global.System.Data.DataColumn("Out_prebiocide1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOut_prebiocide1)
            Me.columnOut_prebiocide2 = New Global.System.Data.DataColumn("Out_prebiocide2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOut_prebiocide2)
            Me.columnOut_biocide1 = New Global.System.Data.DataColumn("Out_biocide1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOut_biocide1)
            Me.columnOut_biocide2 = New Global.System.Data.DataColumn("Out_biocide2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOut_biocide2)
            Me.columnCh2_prop = New Global.System.Data.DataColumn("Ch2_prop", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCh2_prop)
            Me.columnCh2_dig = New Global.System.Data.DataColumn("Ch2_dig", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCh2_dig)
            Me.columnCh3_prop = New Global.System.Data.DataColumn("Ch3_prop", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCh3_prop)
            Me.columnCh3_dig = New Global.System.Data.DataColumn("Ch3_dig", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCh3_dig)
            Me.columnidentificativo.MaxLength = 50
            Me.columnid_485.MaxLength = 10
            Me.columntemperatura.MaxLength = 2147483647
            Me.columncd_high.MaxLength = 2147483647
            Me.columncd_low.MaxLength = 2147483647
            Me.columnbleed_timeout.MaxLength = 2147483647
            Me.columnflow.MaxLength = 2147483647
            Me.columnlevel_inhibitor.MaxLength = 2147483647
            Me.columnlevel_prebiocide1.MaxLength = 2147483647
            Me.columnlevel_prebiocide2.MaxLength = 2147483647
            Me.columnlevel_biocide1.MaxLength = 2147483647
            Me.columnlevel_biocide2.MaxLength = 2147483647
            Me.columnch2_high.MaxLength = 2147483647
            Me.columnch2_low.MaxLength = 2147483647
            Me.columnch2_level.MaxLength = 2147483647
            Me.columnch3_high.MaxLength = 2147483647
            Me.columnch3_low.MaxLength = 2147483647
            Me.columnch3_level.MaxLength = 2147483647
            Me.columntot_input.MaxLength = 2147483647
            Me.columntot_bleed.MaxLength = 2147483647
            Me.columnOut_inhibitore_digital.MaxLength = 2147483647
            Me.columnOut_inhibitore_prop.MaxLength = 2147483647
            Me.columnOut_bleed.MaxLength = 2147483647
            Me.columnOut_prebiocide1.MaxLength = 2147483647
            Me.columnOut_prebiocide2.MaxLength = 2147483647
            Me.columnOut_biocide1.MaxLength = 2147483647
            Me.columnOut_biocide2.MaxLength = 2147483647
            Me.columnCh2_prop.MaxLength = 2147483647
            Me.columnCh2_dig.MaxLength = 2147483647
            Me.columnCh3_prop.MaxLength = 2147483647
            Me.columnCh3_dig.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newlog_tower_tamponeRow() As log_tower_tamponeRow
            Return CType(Me.NewRow,log_tower_tamponeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New log_tower_tamponeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(log_tower_tamponeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_tower_tamponeRowChangedEvent) Is Nothing) Then
                RaiseEvent log_tower_tamponeRowChanged(Me, New log_tower_tamponeRowChangeEvent(CType(e.Row,log_tower_tamponeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_tower_tamponeRowChangingEvent) Is Nothing) Then
                RaiseEvent log_tower_tamponeRowChanging(Me, New log_tower_tamponeRowChangeEvent(CType(e.Row,log_tower_tamponeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_tower_tamponeRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_tower_tamponeRowDeleted(Me, New log_tower_tamponeRowChangeEvent(CType(e.Row,log_tower_tamponeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_tower_tamponeRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_tower_tamponeRowDeleting(Me, New log_tower_tamponeRowChangeEvent(CType(e.Row,log_tower_tamponeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removelog_tower_tamponeRow(ByVal row As log_tower_tamponeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As log_db = New log_db()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "log_tower_tamponeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class wd_log_tamponeDataTable
        Inherits Global.System.Data.TypedTableBase(Of wd_log_tamponeRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnidentificativo As Global.System.Data.DataColumn
        
        Private columnid_485 As Global.System.Data.DataColumn
        
        Private columndata As Global.System.Data.DataColumn
        
        Private columnvalore1 As Global.System.Data.DataColumn
        
        Private columnvalore2 As Global.System.Data.DataColumn
        
        Private columnflusso As Global.System.Data.DataColumn
        
        Private columndos_alarm_cl As Global.System.Data.DataColumn
        
        Private columndos_alarm_ph As Global.System.Data.DataColumn
        
        Private columnprobe_fail_ph As Global.System.Data.DataColumn
        
        Private columnprobe_fail_cl As Global.System.Data.DataColumn
        
        Private columnlivello1 As Global.System.Data.DataColumn
        
        Private columnlivello2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "wd_log_tampone"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property identificativoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidentificativo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_485Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_485
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dataColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndata
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valore1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalore1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valore2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalore2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property flussoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnflusso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dos_alarm_clColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndos_alarm_cl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dos_alarm_phColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndos_alarm_ph
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property probe_fail_phColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprobe_fail_ph
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property probe_fail_clColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprobe_fail_cl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property livello1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlivello1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property livello2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlivello2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As wd_log_tamponeRow
            Get
                Return CType(Me.Rows(index),wd_log_tamponeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event wd_log_tamponeRowChanging As wd_log_tamponeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event wd_log_tamponeRowChanged As wd_log_tamponeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event wd_log_tamponeRowDeleting As wd_log_tamponeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event wd_log_tamponeRowDeleted As wd_log_tamponeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addwd_log_tamponeRow(ByVal row As wd_log_tamponeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addwd_log_tamponeRow(ByVal id As System.Guid, ByVal identificativo As String, ByVal id_485 As String, ByVal data As Date, ByVal valore1 As Single, ByVal valore2 As Single, ByVal flusso As String, ByVal dos_alarm_cl As String, ByVal dos_alarm_ph As String, ByVal probe_fail_ph As String, ByVal probe_fail_cl As String, ByVal livello1 As String, ByVal livello2 As String) As wd_log_tamponeRow
            Dim rowwd_log_tamponeRow As wd_log_tamponeRow = CType(Me.NewRow,wd_log_tamponeRow)
            Dim columnValuesArray() As Object = New Object() {id, identificativo, id_485, data, valore1, valore2, flusso, dos_alarm_cl, dos_alarm_ph, probe_fail_ph, probe_fail_cl, livello1, livello2}
            rowwd_log_tamponeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowwd_log_tamponeRow)
            Return rowwd_log_tamponeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As wd_log_tamponeDataTable = CType(MyBase.Clone,wd_log_tamponeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New wd_log_tamponeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnidentificativo = MyBase.Columns("identificativo")
            Me.columnid_485 = MyBase.Columns("id_485")
            Me.columndata = MyBase.Columns("data")
            Me.columnvalore1 = MyBase.Columns("valore1")
            Me.columnvalore2 = MyBase.Columns("valore2")
            Me.columnflusso = MyBase.Columns("flusso")
            Me.columndos_alarm_cl = MyBase.Columns("dos_alarm_cl")
            Me.columndos_alarm_ph = MyBase.Columns("dos_alarm_ph")
            Me.columnprobe_fail_ph = MyBase.Columns("probe_fail_ph")
            Me.columnprobe_fail_cl = MyBase.Columns("probe_fail_cl")
            Me.columnlivello1 = MyBase.Columns("livello1")
            Me.columnlivello2 = MyBase.Columns("livello2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnidentificativo = New Global.System.Data.DataColumn("identificativo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidentificativo)
            Me.columnid_485 = New Global.System.Data.DataColumn("id_485", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_485)
            Me.columndata = New Global.System.Data.DataColumn("data", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata)
            Me.columnvalore1 = New Global.System.Data.DataColumn("valore1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalore1)
            Me.columnvalore2 = New Global.System.Data.DataColumn("valore2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalore2)
            Me.columnflusso = New Global.System.Data.DataColumn("flusso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnflusso)
            Me.columndos_alarm_cl = New Global.System.Data.DataColumn("dos_alarm_cl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndos_alarm_cl)
            Me.columndos_alarm_ph = New Global.System.Data.DataColumn("dos_alarm_ph", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndos_alarm_ph)
            Me.columnprobe_fail_ph = New Global.System.Data.DataColumn("probe_fail_ph", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprobe_fail_ph)
            Me.columnprobe_fail_cl = New Global.System.Data.DataColumn("probe_fail_cl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprobe_fail_cl)
            Me.columnlivello1 = New Global.System.Data.DataColumn("livello1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlivello1)
            Me.columnlivello2 = New Global.System.Data.DataColumn("livello2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlivello2)
            Me.columnidentificativo.MaxLength = 50
            Me.columnid_485.MaxLength = 10
            Me.columnflusso.MaxLength = 10
            Me.columndos_alarm_cl.MaxLength = 10
            Me.columndos_alarm_ph.MaxLength = 10
            Me.columnprobe_fail_ph.MaxLength = 10
            Me.columnprobe_fail_cl.MaxLength = 10
            Me.columnlivello1.MaxLength = 2147483647
            Me.columnlivello2.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newwd_log_tamponeRow() As wd_log_tamponeRow
            Return CType(Me.NewRow,wd_log_tamponeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New wd_log_tamponeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(wd_log_tamponeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.wd_log_tamponeRowChangedEvent) Is Nothing) Then
                RaiseEvent wd_log_tamponeRowChanged(Me, New wd_log_tamponeRowChangeEvent(CType(e.Row,wd_log_tamponeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.wd_log_tamponeRowChangingEvent) Is Nothing) Then
                RaiseEvent wd_log_tamponeRowChanging(Me, New wd_log_tamponeRowChangeEvent(CType(e.Row,wd_log_tamponeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.wd_log_tamponeRowDeletedEvent) Is Nothing) Then
                RaiseEvent wd_log_tamponeRowDeleted(Me, New wd_log_tamponeRowChangeEvent(CType(e.Row,wd_log_tamponeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.wd_log_tamponeRowDeletingEvent) Is Nothing) Then
                RaiseEvent wd_log_tamponeRowDeleting(Me, New wd_log_tamponeRowChangeEvent(CType(e.Row,wd_log_tamponeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removewd_log_tamponeRow(ByVal row As wd_log_tamponeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As log_db = New log_db()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "wd_log_tamponeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class wh_logDataTable
        Inherits Global.System.Data.TypedTableBase(Of wh_logRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "wh_log"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As wh_logRow
            Get
                Return CType(Me.Rows(index),wh_logRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event wh_logRowChanging As wh_logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event wh_logRowChanged As wh_logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event wh_logRowDeleting As wh_logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event wh_logRowDeleted As wh_logRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addwh_logRow(ByVal row As wh_logRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addwh_logRow(ByVal id As System.Guid) As wh_logRow
            Dim rowwh_logRow As wh_logRow = CType(Me.NewRow,wh_logRow)
            Dim columnValuesArray() As Object = New Object() {id}
            rowwh_logRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowwh_logRow)
            Return rowwh_logRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As wh_logDataTable = CType(MyBase.Clone,wh_logDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New wh_logDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newwh_logRow() As wh_logRow
            Return CType(Me.NewRow,wh_logRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New wh_logRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(wh_logRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.wh_logRowChangedEvent) Is Nothing) Then
                RaiseEvent wh_logRowChanged(Me, New wh_logRowChangeEvent(CType(e.Row,wh_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.wh_logRowChangingEvent) Is Nothing) Then
                RaiseEvent wh_logRowChanging(Me, New wh_logRowChangeEvent(CType(e.Row,wh_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.wh_logRowDeletedEvent) Is Nothing) Then
                RaiseEvent wh_logRowDeleted(Me, New wh_logRowChangeEvent(CType(e.Row,wh_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.wh_logRowDeletingEvent) Is Nothing) Then
                RaiseEvent wh_logRowDeleting(Me, New wh_logRowChangeEvent(CType(e.Row,wh_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removewh_logRow(ByVal row As wh_logRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As log_db = New log_db()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "wh_logDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ltb_logDataTable
        Inherits Global.System.Data.TypedTableBase(Of ltb_logRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ltb_log"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ltb_logRow
            Get
                Return CType(Me.Rows(index),ltb_logRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ltb_logRowChanging As ltb_logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ltb_logRowChanged As ltb_logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ltb_logRowDeleting As ltb_logRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ltb_logRowDeleted As ltb_logRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addltb_logRow(ByVal row As ltb_logRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addltb_logRow(ByVal id As System.Guid) As ltb_logRow
            Dim rowltb_logRow As ltb_logRow = CType(Me.NewRow,ltb_logRow)
            Dim columnValuesArray() As Object = New Object() {id}
            rowltb_logRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowltb_logRow)
            Return rowltb_logRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ltb_logDataTable = CType(MyBase.Clone,ltb_logDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ltb_logDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newltb_logRow() As ltb_logRow
            Return CType(Me.NewRow,ltb_logRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ltb_logRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ltb_logRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ltb_logRowChangedEvent) Is Nothing) Then
                RaiseEvent ltb_logRowChanged(Me, New ltb_logRowChangeEvent(CType(e.Row,ltb_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ltb_logRowChangingEvent) Is Nothing) Then
                RaiseEvent ltb_logRowChanging(Me, New ltb_logRowChangeEvent(CType(e.Row,ltb_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ltb_logRowDeletedEvent) Is Nothing) Then
                RaiseEvent ltb_logRowDeleted(Me, New ltb_logRowChangeEvent(CType(e.Row,ltb_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ltb_logRowDeletingEvent) Is Nothing) Then
                RaiseEvent ltb_logRowDeleting(Me, New ltb_logRowChangeEvent(CType(e.Row,ltb_logRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removeltb_logRow(ByVal row As ltb_logRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As log_db = New log_db()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ltb_logDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class log_ldmaDataTable
        Inherits Global.System.Data.TypedTableBase(Of log_ldmaRow)
        
        Private columndata As Global.System.Data.DataColumn
        
        Private columnlivello1 As Global.System.Data.DataColumn
        
        Private columnlivello2 As Global.System.Data.DataColumn
        
        Private columnlivello3 As Global.System.Data.DataColumn
        
        Private columnlivello4 As Global.System.Data.DataColumn
        
        Private columnlivello5 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "log_ldma"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dataColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndata
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property livello1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlivello1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property livello2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlivello2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property livello3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlivello3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property livello4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlivello4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property livello5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlivello5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_ldmaRow
            Get
                Return CType(Me.Rows(index),log_ldmaRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_ldmaRowChanging As log_ldmaRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_ldmaRowChanged As log_ldmaRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_ldmaRowDeleting As log_ldmaRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_ldmaRowDeleted As log_ldmaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addlog_ldmaRow(ByVal row As log_ldmaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addlog_ldmaRow(ByVal data As Date, ByVal livello1 As Single, ByVal livello2 As Single, ByVal livello3 As Single, ByVal livello4 As Single, ByVal livello5 As Single) As log_ldmaRow
            Dim rowlog_ldmaRow As log_ldmaRow = CType(Me.NewRow,log_ldmaRow)
            Dim columnValuesArray() As Object = New Object() {data, livello1, livello2, livello3, livello4, livello5}
            rowlog_ldmaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowlog_ldmaRow)
            Return rowlog_ldmaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As log_ldmaDataTable = CType(MyBase.Clone,log_ldmaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New log_ldmaDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columndata = MyBase.Columns("data")
            Me.columnlivello1 = MyBase.Columns("livello1")
            Me.columnlivello2 = MyBase.Columns("livello2")
            Me.columnlivello3 = MyBase.Columns("livello3")
            Me.columnlivello4 = MyBase.Columns("livello4")
            Me.columnlivello5 = MyBase.Columns("livello5")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columndata = New Global.System.Data.DataColumn("data", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata)
            Me.columnlivello1 = New Global.System.Data.DataColumn("livello1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlivello1)
            Me.columnlivello2 = New Global.System.Data.DataColumn("livello2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlivello2)
            Me.columnlivello3 = New Global.System.Data.DataColumn("livello3", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlivello3)
            Me.columnlivello4 = New Global.System.Data.DataColumn("livello4", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlivello4)
            Me.columnlivello5 = New Global.System.Data.DataColumn("livello5", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlivello5)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newlog_ldmaRow() As log_ldmaRow
            Return CType(Me.NewRow,log_ldmaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New log_ldmaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(log_ldmaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_ldmaRowChangedEvent) Is Nothing) Then
                RaiseEvent log_ldmaRowChanged(Me, New log_ldmaRowChangeEvent(CType(e.Row,log_ldmaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_ldmaRowChangingEvent) Is Nothing) Then
                RaiseEvent log_ldmaRowChanging(Me, New log_ldmaRowChangeEvent(CType(e.Row,log_ldmaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_ldmaRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_ldmaRowDeleted(Me, New log_ldmaRowChangeEvent(CType(e.Row,log_ldmaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_ldmaRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_ldmaRowDeleting(Me, New log_ldmaRowChangeEvent(CType(e.Row,log_ldmaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removelog_ldmaRow(ByVal row As log_ldmaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As log_db = New log_db()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "log_ldmaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class log_lta_ltu_ltdDataTable
        Inherits Global.System.Data.TypedTableBase(Of log_lta_ltu_ltdRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "log_lta_ltu_ltd"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_lta_ltu_ltdRow
            Get
                Return CType(Me.Rows(index),log_lta_ltu_ltdRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_lta_ltu_ltdRowChanging As log_lta_ltu_ltdRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_lta_ltu_ltdRowChanged As log_lta_ltu_ltdRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_lta_ltu_ltdRowDeleting As log_lta_ltu_ltdRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_lta_ltu_ltdRowDeleted As log_lta_ltu_ltdRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addlog_lta_ltu_ltdRow(ByVal row As log_lta_ltu_ltdRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addlog_lta_ltu_ltdRow(ByVal id As System.Guid) As log_lta_ltu_ltdRow
            Dim rowlog_lta_ltu_ltdRow As log_lta_ltu_ltdRow = CType(Me.NewRow,log_lta_ltu_ltdRow)
            Dim columnValuesArray() As Object = New Object() {id}
            rowlog_lta_ltu_ltdRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowlog_lta_ltu_ltdRow)
            Return rowlog_lta_ltu_ltdRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As log_lta_ltu_ltdDataTable = CType(MyBase.Clone,log_lta_ltu_ltdDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New log_lta_ltu_ltdDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newlog_lta_ltu_ltdRow() As log_lta_ltu_ltdRow
            Return CType(Me.NewRow,log_lta_ltu_ltdRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New log_lta_ltu_ltdRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(log_lta_ltu_ltdRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_lta_ltu_ltdRowChangedEvent) Is Nothing) Then
                RaiseEvent log_lta_ltu_ltdRowChanged(Me, New log_lta_ltu_ltdRowChangeEvent(CType(e.Row,log_lta_ltu_ltdRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_lta_ltu_ltdRowChangingEvent) Is Nothing) Then
                RaiseEvent log_lta_ltu_ltdRowChanging(Me, New log_lta_ltu_ltdRowChangeEvent(CType(e.Row,log_lta_ltu_ltdRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_lta_ltu_ltdRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_lta_ltu_ltdRowDeleted(Me, New log_lta_ltu_ltdRowChangeEvent(CType(e.Row,log_lta_ltu_ltdRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_lta_ltu_ltdRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_lta_ltu_ltdRowDeleting(Me, New log_lta_ltu_ltdRowChangeEvent(CType(e.Row,log_lta_ltu_ltdRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removelog_lta_ltu_ltdRow(ByVal row As log_lta_ltu_ltdRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As log_db = New log_db()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "log_lta_ltu_ltdDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class log_ldlgDataTable
        Inherits Global.System.Data.TypedTableBase(Of log_ldlgRow)
        
        Private columndata As Global.System.Data.DataColumn
        
        Private columncounter1 As Global.System.Data.DataColumn
        
        Private columncounter2 As Global.System.Data.DataColumn
        
        Private columncounter3 As Global.System.Data.DataColumn
        
        Private columncounter4 As Global.System.Data.DataColumn
        
        Private columncounter5 As Global.System.Data.DataColumn
        
        Private columncounter1_1 As Global.System.Data.DataColumn
        
        Private columncounter2_1 As Global.System.Data.DataColumn
        
        Private columncounter3_1 As Global.System.Data.DataColumn
        
        Private columncounter4_1 As Global.System.Data.DataColumn
        
        Private columncounter5_1 As Global.System.Data.DataColumn
        
        Private columncounter1_2 As Global.System.Data.DataColumn
        
        Private columncounter2_2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "log_ldlg"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dataColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndata
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property counter1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncounter1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property counter2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncounter2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property counter3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncounter3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property counter4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncounter4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property counter5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncounter5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property counter1_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncounter1_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property counter2_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncounter2_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property counter3_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncounter3_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property counter4_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncounter4_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property counter5_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncounter5_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property counter1_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncounter1_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property counter2_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncounter2_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_ldlgRow
            Get
                Return CType(Me.Rows(index),log_ldlgRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_ldlgRowChanging As log_ldlgRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_ldlgRowChanged As log_ldlgRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_ldlgRowDeleting As log_ldlgRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event log_ldlgRowDeleted As log_ldlgRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addlog_ldlgRow(ByVal row As log_ldlgRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addlog_ldlgRow(ByVal data As Date, ByVal counter1 As Single, ByVal counter2 As Single, ByVal counter3 As Single, ByVal counter4 As Single, ByVal counter5 As Single, ByVal counter1_1 As Single, ByVal counter2_1 As Single, ByVal counter3_1 As Single, ByVal counter4_1 As Single, ByVal counter5_1 As Single, ByVal counter1_2 As Single, ByVal counter2_2 As Single) As log_ldlgRow
            Dim rowlog_ldlgRow As log_ldlgRow = CType(Me.NewRow,log_ldlgRow)
            Dim columnValuesArray() As Object = New Object() {data, counter1, counter2, counter3, counter4, counter5, counter1_1, counter2_1, counter3_1, counter4_1, counter5_1, counter1_2, counter2_2}
            rowlog_ldlgRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowlog_ldlgRow)
            Return rowlog_ldlgRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As log_ldlgDataTable = CType(MyBase.Clone,log_ldlgDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New log_ldlgDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columndata = MyBase.Columns("data")
            Me.columncounter1 = MyBase.Columns("counter1")
            Me.columncounter2 = MyBase.Columns("counter2")
            Me.columncounter3 = MyBase.Columns("counter3")
            Me.columncounter4 = MyBase.Columns("counter4")
            Me.columncounter5 = MyBase.Columns("counter5")
            Me.columncounter1_1 = MyBase.Columns("counter1_1")
            Me.columncounter2_1 = MyBase.Columns("counter2_1")
            Me.columncounter3_1 = MyBase.Columns("counter3_1")
            Me.columncounter4_1 = MyBase.Columns("counter4_1")
            Me.columncounter5_1 = MyBase.Columns("counter5_1")
            Me.columncounter1_2 = MyBase.Columns("counter1_2")
            Me.columncounter2_2 = MyBase.Columns("counter2_2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columndata = New Global.System.Data.DataColumn("data", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata)
            Me.columncounter1 = New Global.System.Data.DataColumn("counter1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncounter1)
            Me.columncounter2 = New Global.System.Data.DataColumn("counter2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncounter2)
            Me.columncounter3 = New Global.System.Data.DataColumn("counter3", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncounter3)
            Me.columncounter4 = New Global.System.Data.DataColumn("counter4", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncounter4)
            Me.columncounter5 = New Global.System.Data.DataColumn("counter5", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncounter5)
            Me.columncounter1_1 = New Global.System.Data.DataColumn("counter1_1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncounter1_1)
            Me.columncounter2_1 = New Global.System.Data.DataColumn("counter2_1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncounter2_1)
            Me.columncounter3_1 = New Global.System.Data.DataColumn("counter3_1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncounter3_1)
            Me.columncounter4_1 = New Global.System.Data.DataColumn("counter4_1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncounter4_1)
            Me.columncounter5_1 = New Global.System.Data.DataColumn("counter5_1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncounter5_1)
            Me.columncounter1_2 = New Global.System.Data.DataColumn("counter1_2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncounter1_2)
            Me.columncounter2_2 = New Global.System.Data.DataColumn("counter2_2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncounter2_2)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newlog_ldlgRow() As log_ldlgRow
            Return CType(Me.NewRow,log_ldlgRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New log_ldlgRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(log_ldlgRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_ldlgRowChangedEvent) Is Nothing) Then
                RaiseEvent log_ldlgRowChanged(Me, New log_ldlgRowChangeEvent(CType(e.Row,log_ldlgRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_ldlgRowChangingEvent) Is Nothing) Then
                RaiseEvent log_ldlgRowChanging(Me, New log_ldlgRowChangeEvent(CType(e.Row,log_ldlgRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_ldlgRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_ldlgRowDeleted(Me, New log_ldlgRowChangeEvent(CType(e.Row,log_ldlgRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_ldlgRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_ldlgRowDeleting(Me, New log_ldlgRowChangeEvent(CType(e.Row,log_ldlgRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removelog_ldlgRow(ByVal row As log_ldlgRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As log_db = New log_db()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "log_ldlgDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ld_logRow
        Inherits Global.System.Data.DataRow
        
        Private tableld_log As ld_logDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableld_log = CType(Me.Table,ld_logDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableld_log.idColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'id' nella tabella 'ld_log' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tableld_log.idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetidNull()
            Me(Me.tableld_log.idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class logRow
        Inherits Global.System.Data.DataRow
        
        Private tablelog As logDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog = CType(Me.Table,logDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tablelog.idColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'id' nella tabella 'log' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tablelog.idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetidNull()
            Me(Me.tablelog.idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class wd_logRow
        Inherits Global.System.Data.DataRow
        
        Private tablewd_log As wd_logDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablewd_log = CType(Me.Table,wd_logDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tablewd_log.idColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'id' nella tabella 'wd_log' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewd_log.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tablewd_log.idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetidNull()
            Me(Me.tablewd_log.idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ld4_logRow
        Inherits Global.System.Data.DataRow
        
        Private tableld4_log As ld4_logDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableld4_log = CType(Me.Table,ld4_logDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableld4_log.idColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'id' nella tabella 'ld4_log' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld4_log.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tableld4_log.idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetidNull()
            Me(Me.tableld4_log.idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class log_towerRow
        Inherits Global.System.Data.DataRow
        
        Private tablelog_tower As log_towerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_tower = CType(Me.Table,log_towerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Expr1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower.Expr1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Expr1' nella tabella 'log_tower' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower.Expr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsExpr1Null() As Boolean
            Return Me.IsNull(Me.tablelog_tower.Expr1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetExpr1Null()
            Me(Me.tablelog_tower.Expr1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class log_tamponeRow
        Inherits Global.System.Data.DataRow
        
        Private tablelog_tampone As log_tamponeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_tampone = CType(Me.Table,log_tamponeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.idColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'id' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property identificativo() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.identificativoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'identificativo' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.identificativoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_485() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.id_485Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'id_485' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.id_485Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property data() As Date
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.dataColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'data' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.dataColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property valore1() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.valore1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'valore1' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.valore1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property valore2() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.valore2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'valore2' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.valore2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property valore3() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.valore3Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'valore3' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.valore3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property valore4() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.valore4Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'valore4' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.valore4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property valore5() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.valore5Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'valore5' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.valore5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Aa1() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Aa1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Aa1' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Aa1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ab1() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Ab1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ab1' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Ab1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ad1() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Ad1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ad1' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Ad1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ar1() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Ar1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ar1' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Ar1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Aa2() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Aa2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Aa2' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Aa2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ab2() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Ab2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ab2' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Ab2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ad2() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Ad2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ad2' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Ad2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ar2() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Ar2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ar2' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Ar2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Aa3() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Aa3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Aa3' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Aa3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ab3() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Ab3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ab3' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Ab3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ad3() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Ad3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ad3' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Ad3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ar3() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Ar3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ar3' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Ar3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Aa4() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Aa4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Aa4' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Aa4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ab4() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Ab4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ab4' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Ab4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ad4() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Ad4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ad4' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Ad4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ar4() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Ar4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ar4' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Ar4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Aa5() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Aa5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Aa5' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Aa5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ab5() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Ab5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ab5' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Ab5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ad5() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Ad5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ad5' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Ad5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ar5() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.Ar5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ar5' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.Ar5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Flow() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.FlowColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Flow' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.FlowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property wm() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.wmColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'wm' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.wmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property temperatura() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.temperaturaColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'temperatura' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.temperaturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property fml() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tampone.fmlColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'fml' nella tabella 'log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tampone.fmlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetidNull()
            Me(Me.tablelog_tampone.idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsidentificativoNull() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.identificativoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetidentificativoNull()
            Me(Me.tablelog_tampone.identificativoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_485Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.id_485Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_485Null()
            Me(Me.tablelog_tampone.id_485Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsdataNull() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.dataColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetdataNull()
            Me(Me.tablelog_tampone.dataColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvalore1Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.valore1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvalore1Null()
            Me(Me.tablelog_tampone.valore1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvalore2Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.valore2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvalore2Null()
            Me(Me.tablelog_tampone.valore2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvalore3Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.valore3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvalore3Null()
            Me(Me.tablelog_tampone.valore3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvalore4Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.valore4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvalore4Null()
            Me(Me.tablelog_tampone.valore4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvalore5Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.valore5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvalore5Null()
            Me(Me.tablelog_tampone.valore5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAa1Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Aa1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAa1Null()
            Me(Me.tablelog_tampone.Aa1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAb1Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Ab1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAb1Null()
            Me(Me.tablelog_tampone.Ab1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAd1Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Ad1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAd1Null()
            Me(Me.tablelog_tampone.Ad1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAr1Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Ar1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAr1Null()
            Me(Me.tablelog_tampone.Ar1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAa2Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Aa2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAa2Null()
            Me(Me.tablelog_tampone.Aa2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAb2Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Ab2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAb2Null()
            Me(Me.tablelog_tampone.Ab2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAd2Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Ad2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAd2Null()
            Me(Me.tablelog_tampone.Ad2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAr2Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Ar2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAr2Null()
            Me(Me.tablelog_tampone.Ar2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAa3Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Aa3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAa3Null()
            Me(Me.tablelog_tampone.Aa3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAb3Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Ab3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAb3Null()
            Me(Me.tablelog_tampone.Ab3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAd3Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Ad3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAd3Null()
            Me(Me.tablelog_tampone.Ad3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAr3Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Ar3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAr3Null()
            Me(Me.tablelog_tampone.Ar3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAa4Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Aa4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAa4Null()
            Me(Me.tablelog_tampone.Aa4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAb4Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Ab4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAb4Null()
            Me(Me.tablelog_tampone.Ab4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAd4Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Ad4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAd4Null()
            Me(Me.tablelog_tampone.Ad4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAr4Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Ar4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAr4Null()
            Me(Me.tablelog_tampone.Ar4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAa5Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Aa5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAa5Null()
            Me(Me.tablelog_tampone.Aa5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAb5Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Ab5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAb5Null()
            Me(Me.tablelog_tampone.Ab5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAd5Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Ad5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAd5Null()
            Me(Me.tablelog_tampone.Ad5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAr5Null() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.Ar5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAr5Null()
            Me(Me.tablelog_tampone.Ar5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFlowNull() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.FlowColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFlowNull()
            Me(Me.tablelog_tampone.FlowColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IswmNull() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.wmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetwmNull()
            Me(Me.tablelog_tampone.wmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IstemperaturaNull() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.temperaturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SettemperaturaNull()
            Me(Me.tablelog_tampone.temperaturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsfmlNull() As Boolean
            Return Me.IsNull(Me.tablelog_tampone.fmlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetfmlNull()
            Me(Me.tablelog_tampone.fmlColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ld_log_tamponeRow
        Inherits Global.System.Data.DataRow
        
        Private tableld_log_tampone As ld_log_tamponeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableld_log_tampone = CType(Me.Table,ld_log_tamponeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.idColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'id' nella tabella 'ld_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property identificativo() As String
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.identificativoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'identificativo' nella tabella 'ld_log_tampone' è DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.identificativoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_485() As String
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.id_485Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'id_485' nella tabella 'ld_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.id_485Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property data() As Date
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.dataColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'data' nella tabella 'ld_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.dataColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property valore1() As Single
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.valore1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'valore1' nella tabella 'ld_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.valore1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property valore2() As Single
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.valore2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'valore2' nella tabella 'ld_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.valore2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property valore3() As Single
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.valore3Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'valore3' nella tabella 'ld_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.valore3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property flusso() As String
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.flussoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'flusso' nella tabella 'ld_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.flussoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property feed_limit_ph() As String
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.feed_limit_phColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'feed_limit_ph' nella tabella 'ld_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.feed_limit_phColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property feed_limit_cl() As String
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.feed_limit_clColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'feed_limit_cl' nella tabella 'ld_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.feed_limit_clColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property dos_alarm_cl() As String
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.dos_alarm_clColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'dos_alarm_cl' nella tabella 'ld_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.dos_alarm_clColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property dos_alarm_ph() As String
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.dos_alarm_phColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'dos_alarm_ph' nella tabella 'ld_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.dos_alarm_phColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property probe_fail_ph() As String
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.probe_fail_phColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'probe_fail_ph' nella tabella 'ld_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.probe_fail_phColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property probe_fail_cl() As String
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.probe_fail_clColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'probe_fail_cl' nella tabella 'ld_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.probe_fail_clColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property livello1() As String
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.livello1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'livello1' nella tabella 'ld_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.livello1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property livello2() As String
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.livello2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'livello2' nella tabella 'ld_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.livello2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property temperatura() As Single
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.temperaturaColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'temperatura' nella tabella 'ld_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.temperaturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property livello3() As String
            Get
                Try 
                    Return CType(Me(Me.tableld_log_tampone.livello3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'livello3' nella tabella 'ld_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableld_log_tampone.livello3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetidNull()
            Me(Me.tableld_log_tampone.idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsidentificativoNull() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.identificativoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetidentificativoNull()
            Me(Me.tableld_log_tampone.identificativoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_485Null() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.id_485Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_485Null()
            Me(Me.tableld_log_tampone.id_485Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsdataNull() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.dataColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetdataNull()
            Me(Me.tableld_log_tampone.dataColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvalore1Null() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.valore1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvalore1Null()
            Me(Me.tableld_log_tampone.valore1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvalore2Null() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.valore2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvalore2Null()
            Me(Me.tableld_log_tampone.valore2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvalore3Null() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.valore3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvalore3Null()
            Me(Me.tableld_log_tampone.valore3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsflussoNull() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.flussoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetflussoNull()
            Me(Me.tableld_log_tampone.flussoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isfeed_limit_phNull() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.feed_limit_phColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setfeed_limit_phNull()
            Me(Me.tableld_log_tampone.feed_limit_phColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isfeed_limit_clNull() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.feed_limit_clColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setfeed_limit_clNull()
            Me(Me.tableld_log_tampone.feed_limit_clColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isdos_alarm_clNull() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.dos_alarm_clColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setdos_alarm_clNull()
            Me(Me.tableld_log_tampone.dos_alarm_clColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isdos_alarm_phNull() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.dos_alarm_phColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setdos_alarm_phNull()
            Me(Me.tableld_log_tampone.dos_alarm_phColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isprobe_fail_phNull() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.probe_fail_phColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setprobe_fail_phNull()
            Me(Me.tableld_log_tampone.probe_fail_phColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isprobe_fail_clNull() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.probe_fail_clColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setprobe_fail_clNull()
            Me(Me.tableld_log_tampone.probe_fail_clColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islivello1Null() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.livello1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlivello1Null()
            Me(Me.tableld_log_tampone.livello1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islivello2Null() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.livello2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlivello2Null()
            Me(Me.tableld_log_tampone.livello2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IstemperaturaNull() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.temperaturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SettemperaturaNull()
            Me(Me.tableld_log_tampone.temperaturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islivello3Null() As Boolean
            Return Me.IsNull(Me.tableld_log_tampone.livello3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlivello3Null()
            Me(Me.tableld_log_tampone.livello3Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class log_tower_tamponeRow
        Inherits Global.System.Data.DataRow
        
        Private tablelog_tower_tampone As log_tower_tamponeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_tower_tampone = CType(Me.Table,log_tower_tamponeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.idColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'id' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property identificativo() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.identificativoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'identificativo' nella tabella 'log_tower_tampone' è DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.identificativoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_485() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.id_485Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'id_485' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.id_485Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property data() As Date
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.dataColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'data' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.dataColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property valore1() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.valore1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'valore1' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.valore1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property valore2() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.valore2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'valore2' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.valore2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property valore3() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.valore3Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'valore3' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.valore3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property temperatura() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.temperaturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'temperatura' nella tabella 'log_tower_tampone' è DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.temperaturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property cd_high() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.cd_highColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'cd_high' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.cd_highColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property cd_low() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.cd_lowColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'cd_low' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.cd_lowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bleed_timeout() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.bleed_timeoutColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'bleed_timeout' nella tabella 'log_tower_tampone' è DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.bleed_timeoutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property flow() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.flowColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'flow' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.flowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property level_inhibitor() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.level_inhibitorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'level_inhibitor' nella tabella 'log_tower_tampone' è DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.level_inhibitorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property level_prebiocide1() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.level_prebiocide1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'level_prebiocide1' nella tabella 'log_tower_tampone' è D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.level_prebiocide1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property level_prebiocide2() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.level_prebiocide2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'level_prebiocide2' nella tabella 'log_tower_tampone' è D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.level_prebiocide2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property level_biocide1() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.level_biocide1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'level_biocide1' nella tabella 'log_tower_tampone' è DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.level_biocide1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property level_biocide2() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.level_biocide2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'level_biocide2' nella tabella 'log_tower_tampone' è DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.level_biocide2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ch2_high() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.ch2_highColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'ch2_high' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.ch2_highColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ch2_low() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.ch2_lowColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'ch2_low' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.ch2_lowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ch2_level() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.ch2_levelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'ch2_level' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.ch2_levelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ch3_high() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.ch3_highColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'ch3_high' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.ch3_highColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ch3_low() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.ch3_lowColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'ch3_low' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.ch3_lowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ch3_level() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.ch3_levelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'ch3_level' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.ch3_levelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tot_input() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.tot_inputColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'tot_input' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.tot_inputColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tot_bleed() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.tot_bleedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'tot_bleed' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.tot_bleedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Out_inhibitore_digital() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.Out_inhibitore_digitalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Out_inhibitore_digital' nella tabella 'log_tower_tampone"& _ 
                            "' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.Out_inhibitore_digitalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Out_inhibitore_prop() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.Out_inhibitore_propColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Out_inhibitore_prop' nella tabella 'log_tower_tampone' è"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.Out_inhibitore_propColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Out_bleed() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.Out_bleedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Out_bleed' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.Out_bleedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Out_prebiocide1() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.Out_prebiocide1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Out_prebiocide1' nella tabella 'log_tower_tampone' è DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.Out_prebiocide1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Out_prebiocide2() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.Out_prebiocide2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Out_prebiocide2' nella tabella 'log_tower_tampone' è DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.Out_prebiocide2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Out_biocide1() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.Out_biocide1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Out_biocide1' nella tabella 'log_tower_tampone' è DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.Out_biocide1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Out_biocide2() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.Out_biocide2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Out_biocide2' nella tabella 'log_tower_tampone' è DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.Out_biocide2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ch2_prop() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.Ch2_propColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ch2_prop' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.Ch2_propColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ch2_dig() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.Ch2_digColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ch2_dig' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.Ch2_digColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ch3_prop() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.Ch3_propColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ch3_prop' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.Ch3_propColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ch3_dig() As String
            Get
                Try 
                    Return CType(Me(Me.tablelog_tower_tampone.Ch3_digColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Ch3_dig' nella tabella 'log_tower_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_tower_tampone.Ch3_digColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetidNull()
            Me(Me.tablelog_tower_tampone.idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsidentificativoNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.identificativoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetidentificativoNull()
            Me(Me.tablelog_tower_tampone.identificativoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_485Null() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.id_485Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_485Null()
            Me(Me.tablelog_tower_tampone.id_485Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsdataNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.dataColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetdataNull()
            Me(Me.tablelog_tower_tampone.dataColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvalore1Null() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.valore1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvalore1Null()
            Me(Me.tablelog_tower_tampone.valore1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvalore2Null() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.valore2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvalore2Null()
            Me(Me.tablelog_tower_tampone.valore2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvalore3Null() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.valore3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvalore3Null()
            Me(Me.tablelog_tower_tampone.valore3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IstemperaturaNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.temperaturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SettemperaturaNull()
            Me(Me.tablelog_tower_tampone.temperaturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscd_highNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.cd_highColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcd_highNull()
            Me(Me.tablelog_tower_tampone.cd_highColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscd_lowNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.cd_lowColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcd_lowNull()
            Me(Me.tablelog_tower_tampone.cd_lowColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbleed_timeoutNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.bleed_timeoutColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbleed_timeoutNull()
            Me(Me.tablelog_tower_tampone.bleed_timeoutColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsflowNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.flowColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetflowNull()
            Me(Me.tablelog_tower_tampone.flowColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islevel_inhibitorNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.level_inhibitorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlevel_inhibitorNull()
            Me(Me.tablelog_tower_tampone.level_inhibitorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islevel_prebiocide1Null() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.level_prebiocide1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlevel_prebiocide1Null()
            Me(Me.tablelog_tower_tampone.level_prebiocide1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islevel_prebiocide2Null() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.level_prebiocide2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlevel_prebiocide2Null()
            Me(Me.tablelog_tower_tampone.level_prebiocide2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islevel_biocide1Null() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.level_biocide1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlevel_biocide1Null()
            Me(Me.tablelog_tower_tampone.level_biocide1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islevel_biocide2Null() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.level_biocide2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlevel_biocide2Null()
            Me(Me.tablelog_tower_tampone.level_biocide2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isch2_highNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.ch2_highColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setch2_highNull()
            Me(Me.tablelog_tower_tampone.ch2_highColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isch2_lowNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.ch2_lowColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setch2_lowNull()
            Me(Me.tablelog_tower_tampone.ch2_lowColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isch2_levelNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.ch2_levelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setch2_levelNull()
            Me(Me.tablelog_tower_tampone.ch2_levelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isch3_highNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.ch3_highColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setch3_highNull()
            Me(Me.tablelog_tower_tampone.ch3_highColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isch3_lowNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.ch3_lowColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setch3_lowNull()
            Me(Me.tablelog_tower_tampone.ch3_lowColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isch3_levelNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.ch3_levelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setch3_levelNull()
            Me(Me.tablelog_tower_tampone.ch3_levelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Istot_inputNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.tot_inputColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Settot_inputNull()
            Me(Me.tablelog_tower_tampone.tot_inputColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Istot_bleedNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.tot_bleedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Settot_bleedNull()
            Me(Me.tablelog_tower_tampone.tot_bleedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOut_inhibitore_digitalNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.Out_inhibitore_digitalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOut_inhibitore_digitalNull()
            Me(Me.tablelog_tower_tampone.Out_inhibitore_digitalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOut_inhibitore_propNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.Out_inhibitore_propColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOut_inhibitore_propNull()
            Me(Me.tablelog_tower_tampone.Out_inhibitore_propColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOut_bleedNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.Out_bleedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOut_bleedNull()
            Me(Me.tablelog_tower_tampone.Out_bleedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOut_prebiocide1Null() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.Out_prebiocide1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOut_prebiocide1Null()
            Me(Me.tablelog_tower_tampone.Out_prebiocide1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOut_prebiocide2Null() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.Out_prebiocide2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOut_prebiocide2Null()
            Me(Me.tablelog_tower_tampone.Out_prebiocide2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOut_biocide1Null() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.Out_biocide1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOut_biocide1Null()
            Me(Me.tablelog_tower_tampone.Out_biocide1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOut_biocide2Null() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.Out_biocide2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOut_biocide2Null()
            Me(Me.tablelog_tower_tampone.Out_biocide2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCh2_propNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.Ch2_propColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCh2_propNull()
            Me(Me.tablelog_tower_tampone.Ch2_propColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCh2_digNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.Ch2_digColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCh2_digNull()
            Me(Me.tablelog_tower_tampone.Ch2_digColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCh3_propNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.Ch3_propColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCh3_propNull()
            Me(Me.tablelog_tower_tampone.Ch3_propColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCh3_digNull() As Boolean
            Return Me.IsNull(Me.tablelog_tower_tampone.Ch3_digColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCh3_digNull()
            Me(Me.tablelog_tower_tampone.Ch3_digColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class wd_log_tamponeRow
        Inherits Global.System.Data.DataRow
        
        Private tablewd_log_tampone As wd_log_tamponeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablewd_log_tampone = CType(Me.Table,wd_log_tamponeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tablewd_log_tampone.idColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'id' nella tabella 'wd_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewd_log_tampone.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property identificativo() As String
            Get
                Try 
                    Return CType(Me(Me.tablewd_log_tampone.identificativoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'identificativo' nella tabella 'wd_log_tampone' è DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablewd_log_tampone.identificativoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_485() As String
            Get
                Try 
                    Return CType(Me(Me.tablewd_log_tampone.id_485Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'id_485' nella tabella 'wd_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewd_log_tampone.id_485Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property data() As Date
            Get
                Try 
                    Return CType(Me(Me.tablewd_log_tampone.dataColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'data' nella tabella 'wd_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewd_log_tampone.dataColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property valore1() As Single
            Get
                Try 
                    Return CType(Me(Me.tablewd_log_tampone.valore1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'valore1' nella tabella 'wd_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewd_log_tampone.valore1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property valore2() As Single
            Get
                Try 
                    Return CType(Me(Me.tablewd_log_tampone.valore2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'valore2' nella tabella 'wd_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewd_log_tampone.valore2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property flusso() As String
            Get
                Try 
                    Return CType(Me(Me.tablewd_log_tampone.flussoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'flusso' nella tabella 'wd_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewd_log_tampone.flussoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property dos_alarm_cl() As String
            Get
                Try 
                    Return CType(Me(Me.tablewd_log_tampone.dos_alarm_clColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'dos_alarm_cl' nella tabella 'wd_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewd_log_tampone.dos_alarm_clColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property dos_alarm_ph() As String
            Get
                Try 
                    Return CType(Me(Me.tablewd_log_tampone.dos_alarm_phColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'dos_alarm_ph' nella tabella 'wd_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewd_log_tampone.dos_alarm_phColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property probe_fail_ph() As String
            Get
                Try 
                    Return CType(Me(Me.tablewd_log_tampone.probe_fail_phColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'probe_fail_ph' nella tabella 'wd_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewd_log_tampone.probe_fail_phColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property probe_fail_cl() As String
            Get
                Try 
                    Return CType(Me(Me.tablewd_log_tampone.probe_fail_clColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'probe_fail_cl' nella tabella 'wd_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewd_log_tampone.probe_fail_clColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property livello1() As String
            Get
                Try 
                    Return CType(Me(Me.tablewd_log_tampone.livello1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'livello1' nella tabella 'wd_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewd_log_tampone.livello1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property livello2() As String
            Get
                Try 
                    Return CType(Me(Me.tablewd_log_tampone.livello2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'livello2' nella tabella 'wd_log_tampone' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewd_log_tampone.livello2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tablewd_log_tampone.idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetidNull()
            Me(Me.tablewd_log_tampone.idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsidentificativoNull() As Boolean
            Return Me.IsNull(Me.tablewd_log_tampone.identificativoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetidentificativoNull()
            Me(Me.tablewd_log_tampone.identificativoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_485Null() As Boolean
            Return Me.IsNull(Me.tablewd_log_tampone.id_485Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_485Null()
            Me(Me.tablewd_log_tampone.id_485Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsdataNull() As Boolean
            Return Me.IsNull(Me.tablewd_log_tampone.dataColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetdataNull()
            Me(Me.tablewd_log_tampone.dataColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvalore1Null() As Boolean
            Return Me.IsNull(Me.tablewd_log_tampone.valore1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvalore1Null()
            Me(Me.tablewd_log_tampone.valore1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvalore2Null() As Boolean
            Return Me.IsNull(Me.tablewd_log_tampone.valore2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvalore2Null()
            Me(Me.tablewd_log_tampone.valore2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsflussoNull() As Boolean
            Return Me.IsNull(Me.tablewd_log_tampone.flussoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetflussoNull()
            Me(Me.tablewd_log_tampone.flussoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isdos_alarm_clNull() As Boolean
            Return Me.IsNull(Me.tablewd_log_tampone.dos_alarm_clColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setdos_alarm_clNull()
            Me(Me.tablewd_log_tampone.dos_alarm_clColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isdos_alarm_phNull() As Boolean
            Return Me.IsNull(Me.tablewd_log_tampone.dos_alarm_phColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setdos_alarm_phNull()
            Me(Me.tablewd_log_tampone.dos_alarm_phColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isprobe_fail_phNull() As Boolean
            Return Me.IsNull(Me.tablewd_log_tampone.probe_fail_phColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setprobe_fail_phNull()
            Me(Me.tablewd_log_tampone.probe_fail_phColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isprobe_fail_clNull() As Boolean
            Return Me.IsNull(Me.tablewd_log_tampone.probe_fail_clColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setprobe_fail_clNull()
            Me(Me.tablewd_log_tampone.probe_fail_clColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islivello1Null() As Boolean
            Return Me.IsNull(Me.tablewd_log_tampone.livello1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlivello1Null()
            Me(Me.tablewd_log_tampone.livello1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islivello2Null() As Boolean
            Return Me.IsNull(Me.tablewd_log_tampone.livello2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlivello2Null()
            Me(Me.tablewd_log_tampone.livello2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class wh_logRow
        Inherits Global.System.Data.DataRow
        
        Private tablewh_log As wh_logDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablewh_log = CType(Me.Table,wh_logDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tablewh_log.idColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'id' nella tabella 'wh_log' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablewh_log.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tablewh_log.idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetidNull()
            Me(Me.tablewh_log.idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ltb_logRow
        Inherits Global.System.Data.DataRow
        
        Private tableltb_log As ltb_logDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableltb_log = CType(Me.Table,ltb_logDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableltb_log.idColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'id' nella tabella 'ltb_log' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableltb_log.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tableltb_log.idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetidNull()
            Me(Me.tableltb_log.idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class log_ldmaRow
        Inherits Global.System.Data.DataRow
        
        Private tablelog_ldma As log_ldmaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_ldma = CType(Me.Table,log_ldmaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property data() As Date
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldma.dataColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'data' nella tabella 'log_ldma' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldma.dataColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property livello1() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldma.livello1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'livello1' nella tabella 'log_ldma' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldma.livello1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property livello2() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldma.livello2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'livello2' nella tabella 'log_ldma' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldma.livello2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property livello3() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldma.livello3Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'livello3' nella tabella 'log_ldma' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldma.livello3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property livello4() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldma.livello4Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'livello4' nella tabella 'log_ldma' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldma.livello4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property livello5() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldma.livello5Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'livello5' nella tabella 'log_ldma' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldma.livello5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsdataNull() As Boolean
            Return Me.IsNull(Me.tablelog_ldma.dataColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetdataNull()
            Me(Me.tablelog_ldma.dataColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islivello1Null() As Boolean
            Return Me.IsNull(Me.tablelog_ldma.livello1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlivello1Null()
            Me(Me.tablelog_ldma.livello1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islivello2Null() As Boolean
            Return Me.IsNull(Me.tablelog_ldma.livello2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlivello2Null()
            Me(Me.tablelog_ldma.livello2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islivello3Null() As Boolean
            Return Me.IsNull(Me.tablelog_ldma.livello3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlivello3Null()
            Me(Me.tablelog_ldma.livello3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islivello4Null() As Boolean
            Return Me.IsNull(Me.tablelog_ldma.livello4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlivello4Null()
            Me(Me.tablelog_ldma.livello4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islivello5Null() As Boolean
            Return Me.IsNull(Me.tablelog_ldma.livello5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlivello5Null()
            Me(Me.tablelog_ldma.livello5Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class log_lta_ltu_ltdRow
        Inherits Global.System.Data.DataRow
        
        Private tablelog_lta_ltu_ltd As log_lta_ltu_ltdDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_lta_ltu_ltd = CType(Me.Table,log_lta_ltu_ltdDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tablelog_lta_ltu_ltd.idColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'id' nella tabella 'log_lta_ltu_ltd' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_lta_ltu_ltd.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tablelog_lta_ltu_ltd.idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetidNull()
            Me(Me.tablelog_lta_ltu_ltd.idColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class log_ldlgRow
        Inherits Global.System.Data.DataRow
        
        Private tablelog_ldlg As log_ldlgDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_ldlg = CType(Me.Table,log_ldlgDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property data() As Date
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldlg.dataColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'data' nella tabella 'log_ldlg' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldlg.dataColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property counter1() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldlg.counter1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'counter1' nella tabella 'log_ldlg' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldlg.counter1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property counter2() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldlg.counter2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'counter2' nella tabella 'log_ldlg' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldlg.counter2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property counter3() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldlg.counter3Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'counter3' nella tabella 'log_ldlg' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldlg.counter3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property counter4() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldlg.counter4Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'counter4' nella tabella 'log_ldlg' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldlg.counter4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property counter5() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldlg.counter5Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'counter5' nella tabella 'log_ldlg' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldlg.counter5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property counter1_1() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldlg.counter1_1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'counter1_1' nella tabella 'log_ldlg' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldlg.counter1_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property counter2_1() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldlg.counter2_1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'counter2_1' nella tabella 'log_ldlg' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldlg.counter2_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property counter3_1() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldlg.counter3_1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'counter3_1' nella tabella 'log_ldlg' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldlg.counter3_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property counter4_1() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldlg.counter4_1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'counter4_1' nella tabella 'log_ldlg' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldlg.counter4_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property counter5_1() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldlg.counter5_1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'counter5_1' nella tabella 'log_ldlg' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldlg.counter5_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property counter1_2() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldlg.counter1_2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'counter1_2' nella tabella 'log_ldlg' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldlg.counter1_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property counter2_2() As Single
            Get
                Try 
                    Return CType(Me(Me.tablelog_ldlg.counter2_2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'counter2_2' nella tabella 'log_ldlg' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelog_ldlg.counter2_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsdataNull() As Boolean
            Return Me.IsNull(Me.tablelog_ldlg.dataColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetdataNull()
            Me(Me.tablelog_ldlg.dataColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscounter1Null() As Boolean
            Return Me.IsNull(Me.tablelog_ldlg.counter1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcounter1Null()
            Me(Me.tablelog_ldlg.counter1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscounter2Null() As Boolean
            Return Me.IsNull(Me.tablelog_ldlg.counter2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcounter2Null()
            Me(Me.tablelog_ldlg.counter2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscounter3Null() As Boolean
            Return Me.IsNull(Me.tablelog_ldlg.counter3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcounter3Null()
            Me(Me.tablelog_ldlg.counter3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscounter4Null() As Boolean
            Return Me.IsNull(Me.tablelog_ldlg.counter4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcounter4Null()
            Me(Me.tablelog_ldlg.counter4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscounter5Null() As Boolean
            Return Me.IsNull(Me.tablelog_ldlg.counter5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcounter5Null()
            Me(Me.tablelog_ldlg.counter5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscounter1_1Null() As Boolean
            Return Me.IsNull(Me.tablelog_ldlg.counter1_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcounter1_1Null()
            Me(Me.tablelog_ldlg.counter1_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscounter2_1Null() As Boolean
            Return Me.IsNull(Me.tablelog_ldlg.counter2_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcounter2_1Null()
            Me(Me.tablelog_ldlg.counter2_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscounter3_1Null() As Boolean
            Return Me.IsNull(Me.tablelog_ldlg.counter3_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcounter3_1Null()
            Me(Me.tablelog_ldlg.counter3_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscounter4_1Null() As Boolean
            Return Me.IsNull(Me.tablelog_ldlg.counter4_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcounter4_1Null()
            Me(Me.tablelog_ldlg.counter4_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscounter5_1Null() As Boolean
            Return Me.IsNull(Me.tablelog_ldlg.counter5_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcounter5_1Null()
            Me(Me.tablelog_ldlg.counter5_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscounter1_2Null() As Boolean
            Return Me.IsNull(Me.tablelog_ldlg.counter1_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcounter1_2Null()
            Me(Me.tablelog_ldlg.counter1_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscounter2_2Null() As Boolean
            Return Me.IsNull(Me.tablelog_ldlg.counter2_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcounter2_2Null()
            Me(Me.tablelog_ldlg.counter2_2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ld_logRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ld_logRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ld_logRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ld_logRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class logRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As logRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As logRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As logRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class wd_logRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As wd_logRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As wd_logRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As wd_logRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ld4_logRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ld4_logRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ld4_logRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ld4_logRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class log_towerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As log_towerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As log_towerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As log_towerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class log_tamponeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As log_tamponeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As log_tamponeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As log_tamponeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ld_log_tamponeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ld_log_tamponeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ld_log_tamponeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ld_log_tamponeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class log_tower_tamponeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As log_tower_tamponeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As log_tower_tamponeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As log_tower_tamponeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class wd_log_tamponeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As wd_log_tamponeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As wd_log_tamponeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As wd_log_tamponeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class wh_logRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As wh_logRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As wh_logRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As wh_logRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ltb_logRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ltb_logRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ltb_logRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ltb_logRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class log_ldmaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As log_ldmaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As log_ldmaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As log_ldmaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class log_lta_ltu_ltdRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As log_lta_ltu_ltdRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As log_lta_ltu_ltdRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As log_lta_ltu_ltdRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class log_ldlgRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As log_ldlgRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As log_ldlgRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As log_ldlgRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace log_dbTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ld_logTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ld_log"
            tableMapping.ColumnMappings.Add("id", "id")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ld_log] ([id]) VALUES (@id)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.OldCommunication2020.My.MySettings.Default.max_5ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     id"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         ld_log"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (identificativo = @identificativo) "& _ 
                "AND (id_485 = @id_485) AND (data = @data) AND (valore1 = @valore1) AND (valore2 "& _ 
                "= @valore2) AND (valore3 = @valore3) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (flusso = @flus"& _ 
                "so) AND (feed_limit_ph = @feed_limit_ph) AND (feed_limit_cl = @feed_limit_cl) AN"& _ 
                "D (dos_alarm_cl = @dos_alarm_cl) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (dos_alarm_ph = @do"& _ 
                "s_alarm_ph) AND (probe_fail_ph = @probe_fail_ph) AND (probe_fail_cl = @probe_fai"& _ 
                "l_cl) AND (livello1 = @livello1) AND (livello2 = @livello2) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "    AND (temperatura = @temperatura) AND (livello3 = @livello3)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore3", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flusso", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "flusso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@feed_limit_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "feed_limit_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@feed_limit_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "feed_limit_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello3", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO ld_log"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (id, identificativo, id_485, data, v"& _ 
                "alore1, valore2, valore3, flusso, feed_limit_ph, feed_limit_cl, dos_alarm_cl, do"& _ 
                "s_alarm_ph, probe_fail_ph, probe_fail_cl, livello1, livello2, temperatura, livel"& _ 
                "lo3, m3h, totalizer, stby, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Stato_pulse1_ch1, Stato_pu"& _ 
                "lse2_ch1, Stato_pulse_ch2, Stato_rele_ch1, Stato_rele_ch2, valore4, feed_limit_c"& _ 
                "h3, feed_limit_ch4)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES        (NEWID(),@identificativo,@id_485,@data,@valor"& _ 
                "e1,@valore2,@valore3,@flusso,@feed_limit_ph,@feed_limit_cl,@dos_alarm_cl,@dos_al"& _ 
                "arm_ph,@probe_fail_ph,@probe_fail_cl,@livello1,@livello2,@temperatura,@livello3,"& _ 
                "@m3h,@totalizer,@stby,@Stato_pulse1_ch1,@Stato_pulse2_ch1,@Stato_pulse_ch2,@Stat"& _ 
                "o_rele_ch1,@Stato_rele_ch2,@valore4,@feed_limit_ch3,@feed_limit_ch4)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore3", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flusso", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "flusso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@feed_limit_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "feed_limit_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@feed_limit_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "feed_limit_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello3", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@m3h", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "m3h", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@totalizer", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "totalizer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stby", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "stby", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stato_pulse1_ch1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Stato_pulse1_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stato_pulse2_ch1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Stato_pulse2_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stato_pulse_ch2", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Stato_pulse_ch2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stato_rele_ch1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Stato_rele_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stato_rele_ch2", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Stato_rele_ch2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore4", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@feed_limit_ch3", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "feed_limit_ch3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@feed_limit_ch4", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "feed_limit_ch4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill( _
                    ByVal dataTable As log_db.ld_logDataTable,  _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal valore3 As Global.System.Nullable(Of Single),  _
                    ByVal flusso As String,  _
                    ByVal feed_limit_ph As String,  _
                    ByVal feed_limit_cl As String,  _
                    ByVal dos_alarm_cl As String,  _
                    ByVal dos_alarm_ph As String,  _
                    ByVal probe_fail_ph As String,  _
                    ByVal probe_fail_cl As String,  _
                    ByVal livello1 As String,  _
                    ByVal livello2 As String,  _
                    ByVal temperatura As Global.System.Nullable(Of Single),  _
                    ByVal livello3 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(data.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore3.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(valore3.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (flusso Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(flusso,String)
            End If
            If (feed_limit_ph Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(feed_limit_ph,String)
            End If
            If (feed_limit_cl Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(feed_limit_cl,String)
            End If
            If (dos_alarm_cl Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(dos_alarm_cl,String)
            End If
            If (dos_alarm_ph Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(dos_alarm_ph,String)
            End If
            If (probe_fail_ph Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(probe_fail_ph,String)
            End If
            If (probe_fail_cl Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(probe_fail_cl,String)
            End If
            If (livello1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(livello1,String)
            End If
            If (livello2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(livello2,String)
            End If
            If (temperatura.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(temperatura.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (livello3 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(livello3,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal valore3 As Global.System.Nullable(Of Single),  _
                    ByVal flusso As String,  _
                    ByVal feed_limit_ph As String,  _
                    ByVal feed_limit_cl As String,  _
                    ByVal dos_alarm_cl As String,  _
                    ByVal dos_alarm_ph As String,  _
                    ByVal probe_fail_ph As String,  _
                    ByVal probe_fail_cl As String,  _
                    ByVal livello1 As String,  _
                    ByVal livello2 As String,  _
                    ByVal temperatura As Global.System.Nullable(Of Single),  _
                    ByVal livello3 As String) As log_db.ld_logDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(data.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore3.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(valore3.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (flusso Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(flusso,String)
            End If
            If (feed_limit_ph Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(feed_limit_ph,String)
            End If
            If (feed_limit_cl Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(feed_limit_cl,String)
            End If
            If (dos_alarm_cl Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(dos_alarm_cl,String)
            End If
            If (dos_alarm_ph Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(dos_alarm_ph,String)
            End If
            If (probe_fail_ph Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(probe_fail_ph,String)
            End If
            If (probe_fail_cl Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(probe_fail_cl,String)
            End If
            If (livello1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(livello1,String)
            End If
            If (livello2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(livello2,String)
            End If
            If (temperatura.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(temperatura.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (livello3 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(livello3,String)
            End If
            Dim dataTable As log_db.ld_logDataTable = New log_db.ld_logDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As log_db.ld_logDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As log_db) As Integer
            Return Me.Adapter.Update(dataSet, "ld_log")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Global.System.Nullable(Of Global.System.Guid)) As Integer
            If (id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(id.Value,System.Guid)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function InsertQuery( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal valore3 As Global.System.Nullable(Of Single),  _
                    ByVal flusso As String,  _
                    ByVal feed_limit_ph As String,  _
                    ByVal feed_limit_cl As String,  _
                    ByVal dos_alarm_cl As String,  _
                    ByVal dos_alarm_ph As String,  _
                    ByVal probe_fail_ph As String,  _
                    ByVal probe_fail_cl As String,  _
                    ByVal livello1 As String,  _
                    ByVal livello2 As String,  _
                    ByVal temperatura As Global.System.Nullable(Of Single),  _
                    ByVal livello3 As String,  _
                    ByVal m3h As Global.System.Nullable(Of Single),  _
                    ByVal totalizer As Global.System.Nullable(Of Single),  _
                    ByVal stby As Global.System.Nullable(Of Boolean),  _
                    ByVal Stato_pulse1_ch1 As Global.System.Nullable(Of Integer),  _
                    ByVal Stato_pulse2_ch1 As Global.System.Nullable(Of Integer),  _
                    ByVal Stato_pulse_ch2 As Global.System.Nullable(Of Integer),  _
                    ByVal Stato_rele_ch1 As Global.System.Nullable(Of Integer),  _
                    ByVal Stato_rele_ch2 As Global.System.Nullable(Of Integer),  _
                    ByVal valore4 As Global.System.Nullable(Of Single),  _
                    ByVal feed_limit_ch3 As Global.System.Nullable(Of Boolean),  _
                    ByVal feed_limit_ch4 As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                command.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                command.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore3.HasValue = true) Then
                command.Parameters(5).Value = CType(valore3.Value,Single)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (flusso Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(flusso,String)
            End If
            If (feed_limit_ph Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(feed_limit_ph,String)
            End If
            If (feed_limit_cl Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(feed_limit_cl,String)
            End If
            If (dos_alarm_cl Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(dos_alarm_cl,String)
            End If
            If (dos_alarm_ph Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(dos_alarm_ph,String)
            End If
            If (probe_fail_ph Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(probe_fail_ph,String)
            End If
            If (probe_fail_cl Is Nothing) Then
                command.Parameters(12).Value = Global.System.DBNull.Value
            Else
                command.Parameters(12).Value = CType(probe_fail_cl,String)
            End If
            If (livello1 Is Nothing) Then
                command.Parameters(13).Value = Global.System.DBNull.Value
            Else
                command.Parameters(13).Value = CType(livello1,String)
            End If
            If (livello2 Is Nothing) Then
                command.Parameters(14).Value = Global.System.DBNull.Value
            Else
                command.Parameters(14).Value = CType(livello2,String)
            End If
            If (temperatura.HasValue = true) Then
                command.Parameters(15).Value = CType(temperatura.Value,Single)
            Else
                command.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (livello3 Is Nothing) Then
                command.Parameters(16).Value = Global.System.DBNull.Value
            Else
                command.Parameters(16).Value = CType(livello3,String)
            End If
            If (m3h.HasValue = true) Then
                command.Parameters(17).Value = CType(m3h.Value,Single)
            Else
                command.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (totalizer.HasValue = true) Then
                command.Parameters(18).Value = CType(totalizer.Value,Single)
            Else
                command.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (stby.HasValue = true) Then
                command.Parameters(19).Value = CType(stby.Value,Boolean)
            Else
                command.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Stato_pulse1_ch1.HasValue = true) Then
                command.Parameters(20).Value = CType(Stato_pulse1_ch1.Value,Integer)
            Else
                command.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Stato_pulse2_ch1.HasValue = true) Then
                command.Parameters(21).Value = CType(Stato_pulse2_ch1.Value,Integer)
            Else
                command.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Stato_pulse_ch2.HasValue = true) Then
                command.Parameters(22).Value = CType(Stato_pulse_ch2.Value,Integer)
            Else
                command.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Stato_rele_ch1.HasValue = true) Then
                command.Parameters(23).Value = CType(Stato_rele_ch1.Value,Integer)
            Else
                command.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Stato_rele_ch2.HasValue = true) Then
                command.Parameters(24).Value = CType(Stato_rele_ch2.Value,Integer)
            Else
                command.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (valore4.HasValue = true) Then
                command.Parameters(25).Value = CType(valore4.Value,Single)
            Else
                command.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (feed_limit_ch3.HasValue = true) Then
                command.Parameters(26).Value = CType(feed_limit_ch3.Value,Boolean)
            Else
                command.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (feed_limit_ch4.HasValue = true) Then
                command.Parameters(27).Value = CType(feed_limit_ch4.Value,Boolean)
            Else
                command.Parameters(27).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class logTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "log"
            tableMapping.ColumnMappings.Add("id", "id")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [log] ([id]) VALUES (@id)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.OldCommunication2020.My.MySettings.Default.max_5ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     id"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         [log]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (identificativo = @identificativo) A"& _ 
                "ND (id_485 = @id_485) AND (data = @data) AND (Aa1 = @Aa1) AND (Ab1 = @Ab1) AND ("& _ 
                "Ad1 = @Ad1) AND (Ar1 = @Ar1) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (Aa2 = @Aa2) AND (Ab2 ="& _ 
                " @Ab2) AND (Ad2 = @Ad2) AND (Ar2 = @Ar2) AND (Aa3 = @Aa3) AND (Ab3 = @Ab3) AND ("& _ 
                "Ad3 = @Ad3) AND (Ar3 = @Ar3) AND (Aa4 = @Aa4) AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       (Ab4 ="& _ 
                " @Ab4) AND (Ad4 = @Ad4) AND (Ar4 = @Ar4) AND (Aa5 = @Aa5) AND (Ab5 = @Ab5) AND ("& _ 
                "Ad5 = @Ad5) AND (Ar5 = @Ar5) AND (Flow = @Flow) AND (wm = @wm) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "       AND (temperatura = @temperatura) AND (fml = @fml)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa3", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab3", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad3", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar3", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa4", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab4", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad4", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar4", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa5", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab5", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad5", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar5", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flow", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Flow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wm", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "wm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fml", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "fml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO [log]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (id, identificativo, id_485, data, valor"& _ 
                "e1, valore2, valore3, valore4, valore5, Aa1, Ab1, Ad1, Ar1, Aa2, Ab2, Ad2, Ar2, "& _ 
                "Aa3, Ab3, Ad3, Ar3, Aa4, Ab4, Ad4, Ar4, Aa5, Ab5, Ad5, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      A"& _ 
                "r5, Flow, wm, temperatura, fml, da1, db1, pa1, pb1, ma1, da2, db2, pa2, pb2, ma2"& _ 
                ", da3, db3, pa3, pb3, ma3, da4, db4, pa4, pb4, ma4, da5, db5, pa5, pb5, ma5, stb"& _ 
                "y)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES     (NEWID(),@identificativo,@id_485,@data,@valore1,@valore2,@valore3"& _ 
                ",@valore4,@valore5,@Aa1,@Ab1,@Ad1,@Ar1,@Aa2,@Ab2,@Ad2,@Ar2,@Aa3,@Ab3,@Ad3,@Ar3,@"& _ 
                "Aa4,@Ab4,@Ad4,@Ar4,@Aa5,@Ab5,@Ad5,@Ar5,@Flow,@wm,@temperatura,@fml,@da1,@db1,@pa"& _ 
                "1,@pb1,@ma1,@da2,@db2,@pa2,@pb2,@ma2,@da3,@db3,@pa3,@pb3,@ma3,@da4,@db4,@pa4,@pb"& _ 
                "4,@ma4,@da5,@db5,@pa5,@pb5,@ma5,@stby)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore3", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore4", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore5", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa3", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab3", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad3", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar3", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa4", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab4", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad4", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar4", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa5", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab5", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad5", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar5", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flow", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Flow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wm", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "wm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fml", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "fml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@da1", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "da1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@db1", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "db1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pa1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pa1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pb1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pb1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ma1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ma1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@da2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "da2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@db2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "db2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pa2", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pa2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pb2", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pb2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ma2", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ma2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@da3", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "da3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@db3", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "db3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pa3", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pa3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pb3", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pb3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ma3", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ma3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@da4", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "da4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@db4", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "db4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pa4", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pa4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pb4", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pb4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ma4", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ma4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@da5", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "da5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@db5", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "db5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pa5", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pa5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pb5", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "pb5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ma5", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ma5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stby", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "stby", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill( _
                    ByVal dataTable As log_db.logDataTable,  _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal Aa1 As String,  _
                    ByVal Ab1 As String,  _
                    ByVal Ad1 As String,  _
                    ByVal Ar1 As String,  _
                    ByVal Aa2 As String,  _
                    ByVal Ab2 As String,  _
                    ByVal Ad2 As String,  _
                    ByVal Ar2 As String,  _
                    ByVal Aa3 As String,  _
                    ByVal Ab3 As String,  _
                    ByVal Ad3 As String,  _
                    ByVal Ar3 As String,  _
                    ByVal Aa4 As String,  _
                    ByVal Ab4 As String,  _
                    ByVal Ad4 As String,  _
                    ByVal Ar4 As String,  _
                    ByVal Aa5 As String,  _
                    ByVal Ab5 As String,  _
                    ByVal Ad5 As String,  _
                    ByVal Ar5 As String,  _
                    ByVal Flow As String,  _
                    ByVal wm As Global.System.Nullable(Of Single),  _
                    ByVal temperatura As Global.System.Nullable(Of Single),  _
                    ByVal fml As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(data.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Aa1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Aa1,String)
            End If
            If (Ab1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Ab1,String)
            End If
            If (Ad1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Ad1,String)
            End If
            If (Ar1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Ar1,String)
            End If
            If (Aa2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(Aa2,String)
            End If
            If (Ab2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(Ab2,String)
            End If
            If (Ad2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(Ad2,String)
            End If
            If (Ar2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(Ar2,String)
            End If
            If (Aa3 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(Aa3,String)
            End If
            If (Ab3 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(Ab3,String)
            End If
            If (Ad3 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(Ad3,String)
            End If
            If (Ar3 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(Ar3,String)
            End If
            If (Aa4 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(Aa4,String)
            End If
            If (Ab4 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(Ab4,String)
            End If
            If (Ad4 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(17).Value = CType(Ad4,String)
            End If
            If (Ar4 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(18).Value = CType(Ar4,String)
            End If
            If (Aa5 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(19).Value = CType(Aa5,String)
            End If
            If (Ab5 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(20).Value = CType(Ab5,String)
            End If
            If (Ad5 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(21).Value = CType(Ad5,String)
            End If
            If (Ar5 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(22).Value = CType(Ar5,String)
            End If
            If (Flow Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(23).Value = CType(Flow,String)
            End If
            If (wm.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(24).Value = CType(wm.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (temperatura.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(25).Value = CType(temperatura.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (fml Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(26).Value = CType(fml,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal Aa1 As String,  _
                    ByVal Ab1 As String,  _
                    ByVal Ad1 As String,  _
                    ByVal Ar1 As String,  _
                    ByVal Aa2 As String,  _
                    ByVal Ab2 As String,  _
                    ByVal Ad2 As String,  _
                    ByVal Ar2 As String,  _
                    ByVal Aa3 As String,  _
                    ByVal Ab3 As String,  _
                    ByVal Ad3 As String,  _
                    ByVal Ar3 As String,  _
                    ByVal Aa4 As String,  _
                    ByVal Ab4 As String,  _
                    ByVal Ad4 As String,  _
                    ByVal Ar4 As String,  _
                    ByVal Aa5 As String,  _
                    ByVal Ab5 As String,  _
                    ByVal Ad5 As String,  _
                    ByVal Ar5 As String,  _
                    ByVal Flow As String,  _
                    ByVal wm As Global.System.Nullable(Of Single),  _
                    ByVal temperatura As Global.System.Nullable(Of Single),  _
                    ByVal fml As String) As log_db.logDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(data.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Aa1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Aa1,String)
            End If
            If (Ab1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Ab1,String)
            End If
            If (Ad1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Ad1,String)
            End If
            If (Ar1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Ar1,String)
            End If
            If (Aa2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(Aa2,String)
            End If
            If (Ab2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(Ab2,String)
            End If
            If (Ad2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(Ad2,String)
            End If
            If (Ar2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(Ar2,String)
            End If
            If (Aa3 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(Aa3,String)
            End If
            If (Ab3 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(Ab3,String)
            End If
            If (Ad3 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(Ad3,String)
            End If
            If (Ar3 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(Ar3,String)
            End If
            If (Aa4 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(Aa4,String)
            End If
            If (Ab4 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(Ab4,String)
            End If
            If (Ad4 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(17).Value = CType(Ad4,String)
            End If
            If (Ar4 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(18).Value = CType(Ar4,String)
            End If
            If (Aa5 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(19).Value = CType(Aa5,String)
            End If
            If (Ab5 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(20).Value = CType(Ab5,String)
            End If
            If (Ad5 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(21).Value = CType(Ad5,String)
            End If
            If (Ar5 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(22).Value = CType(Ar5,String)
            End If
            If (Flow Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(23).Value = CType(Flow,String)
            End If
            If (wm.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(24).Value = CType(wm.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (temperatura.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(25).Value = CType(temperatura.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (fml Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(26).Value = CType(fml,String)
            End If
            Dim dataTable As log_db.logDataTable = New log_db.logDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As log_db.logDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As log_db) As Integer
            Return Me.Adapter.Update(dataSet, "log")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Global.System.Nullable(Of Global.System.Guid)) As Integer
            If (id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(id.Value,System.Guid)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function InsertQuery( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal valore3 As Global.System.Nullable(Of Single),  _
                    ByVal valore4 As Global.System.Nullable(Of Single),  _
                    ByVal valore5 As Global.System.Nullable(Of Single),  _
                    ByVal Aa1 As String,  _
                    ByVal Ab1 As String,  _
                    ByVal Ad1 As String,  _
                    ByVal Ar1 As String,  _
                    ByVal Aa2 As String,  _
                    ByVal Ab2 As String,  _
                    ByVal Ad2 As String,  _
                    ByVal Ar2 As String,  _
                    ByVal Aa3 As String,  _
                    ByVal Ab3 As String,  _
                    ByVal Ad3 As String,  _
                    ByVal Ar3 As String,  _
                    ByVal Aa4 As String,  _
                    ByVal Ab4 As String,  _
                    ByVal Ad4 As String,  _
                    ByVal Ar4 As String,  _
                    ByVal Aa5 As String,  _
                    ByVal Ab5 As String,  _
                    ByVal Ad5 As String,  _
                    ByVal Ar5 As String,  _
                    ByVal Flow As String,  _
                    ByVal wm As Global.System.Nullable(Of Single),  _
                    ByVal temperatura As Global.System.Nullable(Of Single),  _
                    ByVal fml As String,  _
                    ByVal da1 As Global.System.Nullable(Of Boolean),  _
                    ByVal db1 As Global.System.Nullable(Of Boolean),  _
                    ByVal pa1 As Global.System.Nullable(Of Integer),  _
                    ByVal pb1 As Global.System.Nullable(Of Integer),  _
                    ByVal ma1 As Global.System.Nullable(Of Integer),  _
                    ByVal da2 As Global.System.Nullable(Of Boolean),  _
                    ByVal db2 As Global.System.Nullable(Of Boolean),  _
                    ByVal pa2 As Global.System.Nullable(Of Integer),  _
                    ByVal pb2 As Global.System.Nullable(Of Integer),  _
                    ByVal ma2 As Global.System.Nullable(Of Integer),  _
                    ByVal da3 As Global.System.Nullable(Of Boolean),  _
                    ByVal db3 As Global.System.Nullable(Of Boolean),  _
                    ByVal pa3 As Global.System.Nullable(Of Integer),  _
                    ByVal pb3 As Global.System.Nullable(Of Integer),  _
                    ByVal ma3 As Global.System.Nullable(Of Integer),  _
                    ByVal da4 As Global.System.Nullable(Of Boolean),  _
                    ByVal db4 As Global.System.Nullable(Of Boolean),  _
                    ByVal pa4 As Global.System.Nullable(Of Integer),  _
                    ByVal pb4 As Global.System.Nullable(Of Integer),  _
                    ByVal ma4 As Global.System.Nullable(Of Integer),  _
                    ByVal da5 As Global.System.Nullable(Of Boolean),  _
                    ByVal db5 As Global.System.Nullable(Of Boolean),  _
                    ByVal pa5 As Global.System.Nullable(Of Integer),  _
                    ByVal pb5 As Global.System.Nullable(Of Integer),  _
                    ByVal ma5 As Global.System.Nullable(Of Integer),  _
                    ByVal stby As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                command.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                command.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore3.HasValue = true) Then
                command.Parameters(5).Value = CType(valore3.Value,Single)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (valore4.HasValue = true) Then
                command.Parameters(6).Value = CType(valore4.Value,Single)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (valore5.HasValue = true) Then
                command.Parameters(7).Value = CType(valore5.Value,Single)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Aa1 Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(Aa1,String)
            End If
            If (Ab1 Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(Ab1,String)
            End If
            If (Ad1 Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(Ad1,String)
            End If
            If (Ar1 Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(Ar1,String)
            End If
            If (Aa2 Is Nothing) Then
                command.Parameters(12).Value = Global.System.DBNull.Value
            Else
                command.Parameters(12).Value = CType(Aa2,String)
            End If
            If (Ab2 Is Nothing) Then
                command.Parameters(13).Value = Global.System.DBNull.Value
            Else
                command.Parameters(13).Value = CType(Ab2,String)
            End If
            If (Ad2 Is Nothing) Then
                command.Parameters(14).Value = Global.System.DBNull.Value
            Else
                command.Parameters(14).Value = CType(Ad2,String)
            End If
            If (Ar2 Is Nothing) Then
                command.Parameters(15).Value = Global.System.DBNull.Value
            Else
                command.Parameters(15).Value = CType(Ar2,String)
            End If
            If (Aa3 Is Nothing) Then
                command.Parameters(16).Value = Global.System.DBNull.Value
            Else
                command.Parameters(16).Value = CType(Aa3,String)
            End If
            If (Ab3 Is Nothing) Then
                command.Parameters(17).Value = Global.System.DBNull.Value
            Else
                command.Parameters(17).Value = CType(Ab3,String)
            End If
            If (Ad3 Is Nothing) Then
                command.Parameters(18).Value = Global.System.DBNull.Value
            Else
                command.Parameters(18).Value = CType(Ad3,String)
            End If
            If (Ar3 Is Nothing) Then
                command.Parameters(19).Value = Global.System.DBNull.Value
            Else
                command.Parameters(19).Value = CType(Ar3,String)
            End If
            If (Aa4 Is Nothing) Then
                command.Parameters(20).Value = Global.System.DBNull.Value
            Else
                command.Parameters(20).Value = CType(Aa4,String)
            End If
            If (Ab4 Is Nothing) Then
                command.Parameters(21).Value = Global.System.DBNull.Value
            Else
                command.Parameters(21).Value = CType(Ab4,String)
            End If
            If (Ad4 Is Nothing) Then
                command.Parameters(22).Value = Global.System.DBNull.Value
            Else
                command.Parameters(22).Value = CType(Ad4,String)
            End If
            If (Ar4 Is Nothing) Then
                command.Parameters(23).Value = Global.System.DBNull.Value
            Else
                command.Parameters(23).Value = CType(Ar4,String)
            End If
            If (Aa5 Is Nothing) Then
                command.Parameters(24).Value = Global.System.DBNull.Value
            Else
                command.Parameters(24).Value = CType(Aa5,String)
            End If
            If (Ab5 Is Nothing) Then
                command.Parameters(25).Value = Global.System.DBNull.Value
            Else
                command.Parameters(25).Value = CType(Ab5,String)
            End If
            If (Ad5 Is Nothing) Then
                command.Parameters(26).Value = Global.System.DBNull.Value
            Else
                command.Parameters(26).Value = CType(Ad5,String)
            End If
            If (Ar5 Is Nothing) Then
                command.Parameters(27).Value = Global.System.DBNull.Value
            Else
                command.Parameters(27).Value = CType(Ar5,String)
            End If
            If (Flow Is Nothing) Then
                command.Parameters(28).Value = Global.System.DBNull.Value
            Else
                command.Parameters(28).Value = CType(Flow,String)
            End If
            If (wm.HasValue = true) Then
                command.Parameters(29).Value = CType(wm.Value,Single)
            Else
                command.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (temperatura.HasValue = true) Then
                command.Parameters(30).Value = CType(temperatura.Value,Single)
            Else
                command.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (fml Is Nothing) Then
                command.Parameters(31).Value = Global.System.DBNull.Value
            Else
                command.Parameters(31).Value = CType(fml,String)
            End If
            If (da1.HasValue = true) Then
                command.Parameters(32).Value = CType(da1.Value,Boolean)
            Else
                command.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (db1.HasValue = true) Then
                command.Parameters(33).Value = CType(db1.Value,Boolean)
            Else
                command.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (pa1.HasValue = true) Then
                command.Parameters(34).Value = CType(pa1.Value,Integer)
            Else
                command.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (pb1.HasValue = true) Then
                command.Parameters(35).Value = CType(pb1.Value,Integer)
            Else
                command.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (ma1.HasValue = true) Then
                command.Parameters(36).Value = CType(ma1.Value,Integer)
            Else
                command.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (da2.HasValue = true) Then
                command.Parameters(37).Value = CType(da2.Value,Boolean)
            Else
                command.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (db2.HasValue = true) Then
                command.Parameters(38).Value = CType(db2.Value,Boolean)
            Else
                command.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (pa2.HasValue = true) Then
                command.Parameters(39).Value = CType(pa2.Value,Integer)
            Else
                command.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (pb2.HasValue = true) Then
                command.Parameters(40).Value = CType(pb2.Value,Integer)
            Else
                command.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (ma2.HasValue = true) Then
                command.Parameters(41).Value = CType(ma2.Value,Integer)
            Else
                command.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (da3.HasValue = true) Then
                command.Parameters(42).Value = CType(da3.Value,Boolean)
            Else
                command.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (db3.HasValue = true) Then
                command.Parameters(43).Value = CType(db3.Value,Boolean)
            Else
                command.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (pa3.HasValue = true) Then
                command.Parameters(44).Value = CType(pa3.Value,Integer)
            Else
                command.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (pb3.HasValue = true) Then
                command.Parameters(45).Value = CType(pb3.Value,Integer)
            Else
                command.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (ma3.HasValue = true) Then
                command.Parameters(46).Value = CType(ma3.Value,Integer)
            Else
                command.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (da4.HasValue = true) Then
                command.Parameters(47).Value = CType(da4.Value,Boolean)
            Else
                command.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (db4.HasValue = true) Then
                command.Parameters(48).Value = CType(db4.Value,Boolean)
            Else
                command.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (pa4.HasValue = true) Then
                command.Parameters(49).Value = CType(pa4.Value,Integer)
            Else
                command.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (pb4.HasValue = true) Then
                command.Parameters(50).Value = CType(pb4.Value,Integer)
            Else
                command.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (ma4.HasValue = true) Then
                command.Parameters(51).Value = CType(ma4.Value,Integer)
            Else
                command.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (da5.HasValue = true) Then
                command.Parameters(52).Value = CType(da5.Value,Boolean)
            Else
                command.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (db5.HasValue = true) Then
                command.Parameters(53).Value = CType(db5.Value,Boolean)
            Else
                command.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (pa5.HasValue = true) Then
                command.Parameters(54).Value = CType(pa5.Value,Integer)
            Else
                command.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (pb5.HasValue = true) Then
                command.Parameters(55).Value = CType(pb5.Value,Integer)
            Else
                command.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (ma5.HasValue = true) Then
                command.Parameters(56).Value = CType(ma5.Value,Integer)
            Else
                command.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (stby.HasValue = true) Then
                command.Parameters(57).Value = CType(stby.Value,Boolean)
            Else
                command.Parameters(57).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class wd_logTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "wd_log"
            tableMapping.ColumnMappings.Add("id", "id")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [wd_log] ([id]) VALUES (@id)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.OldCommunication2020.My.MySettings.Default.max_5ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     id"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         wd_log"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (identificativo = @identificativo) "& _ 
                "AND (id_485 = @id_485) AND (data = @data) AND (valore1 = @valore1) AND (valore2 "& _ 
                "= @valore2) AND (flusso = @flusso) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (dos_alarm_cl = @"& _ 
                "dos_alarm_cl) AND (dos_alarm_ph = @dos_alarm_ph) AND (probe_fail_ph = @probe_fai"& _ 
                "l_ph) AND (probe_fail_cl = @probe_fail_cl) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (livello1"& _ 
                " = @livello1) AND (livello2 = @livello2) AND (rele_ch1 = @rele_ch1) AND (rele_ch"& _ 
                "2 = @rele_ch2)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flusso", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "flusso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rele_ch1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "rele_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rele_ch2", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "rele_ch2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO wd_log"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (id, identificativo, id_485, data, valo"& _ 
                "re1, valore2, flusso, dos_alarm_cl, dos_alarm_ph, probe_fail_ph, probe_fail_cl, "& _ 
                "livello1, livello2, rele_ch1, rele_ch2)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES     (NEWID(),@identificativo,@id"& _ 
                "_485,@data,@valore1,@valore2,@flusso,@dos_alarm_cl,@dos_alarm_ph,@probe_fail_ph,"& _ 
                "@probe_fail_cl,@livello1,@livello2,@rele_ch1,@rele_ch2)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flusso", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "flusso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rele_ch1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "rele_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rele_ch2", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "rele_ch2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As log_db.wd_logDataTable, ByVal identificativo As String, ByVal id_485 As String, ByVal data As Global.System.Nullable(Of Date), ByVal valore1 As Global.System.Nullable(Of Single), ByVal valore2 As Global.System.Nullable(Of Single), ByVal flusso As String, ByVal dos_alarm_cl As String, ByVal dos_alarm_ph As String, ByVal probe_fail_ph As String, ByVal probe_fail_cl As String, ByVal livello1 As String, ByVal livello2 As String, ByVal rele_ch1 As Global.System.Nullable(Of Integer), ByVal rele_ch2 As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(data.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (flusso Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(flusso,String)
            End If
            If (dos_alarm_cl Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(dos_alarm_cl,String)
            End If
            If (dos_alarm_ph Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(dos_alarm_ph,String)
            End If
            If (probe_fail_ph Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(probe_fail_ph,String)
            End If
            If (probe_fail_cl Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(probe_fail_cl,String)
            End If
            If (livello1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(livello1,String)
            End If
            If (livello2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(livello2,String)
            End If
            If (rele_ch1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(rele_ch1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (rele_ch2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(rele_ch2.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal identificativo As String, ByVal id_485 As String, ByVal data As Global.System.Nullable(Of Date), ByVal valore1 As Global.System.Nullable(Of Single), ByVal valore2 As Global.System.Nullable(Of Single), ByVal flusso As String, ByVal dos_alarm_cl As String, ByVal dos_alarm_ph As String, ByVal probe_fail_ph As String, ByVal probe_fail_cl As String, ByVal livello1 As String, ByVal livello2 As String, ByVal rele_ch1 As Global.System.Nullable(Of Integer), ByVal rele_ch2 As Global.System.Nullable(Of Integer)) As log_db.wd_logDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(data.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (flusso Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(flusso,String)
            End If
            If (dos_alarm_cl Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(dos_alarm_cl,String)
            End If
            If (dos_alarm_ph Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(dos_alarm_ph,String)
            End If
            If (probe_fail_ph Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(probe_fail_ph,String)
            End If
            If (probe_fail_cl Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(probe_fail_cl,String)
            End If
            If (livello1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(livello1,String)
            End If
            If (livello2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(livello2,String)
            End If
            If (rele_ch1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(rele_ch1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (rele_ch2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(rele_ch2.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As log_db.wd_logDataTable = New log_db.wd_logDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As log_db.wd_logDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As log_db) As Integer
            Return Me.Adapter.Update(dataSet, "wd_log")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Global.System.Nullable(Of Global.System.Guid)) As Integer
            If (id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(id.Value,System.Guid)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function InsertQuery(ByVal identificativo As String, ByVal id_485 As String, ByVal data As Global.System.Nullable(Of Date), ByVal valore1 As Global.System.Nullable(Of Single), ByVal valore2 As Global.System.Nullable(Of Single), ByVal flusso As String, ByVal dos_alarm_cl As String, ByVal dos_alarm_ph As String, ByVal probe_fail_ph As String, ByVal probe_fail_cl As String, ByVal livello1 As String, ByVal livello2 As String, ByVal rele_ch1 As Global.System.Nullable(Of Integer), ByVal rele_ch2 As Global.System.Nullable(Of Integer)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                command.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                command.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (flusso Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(flusso,String)
            End If
            If (dos_alarm_cl Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(dos_alarm_cl,String)
            End If
            If (dos_alarm_ph Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(dos_alarm_ph,String)
            End If
            If (probe_fail_ph Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(probe_fail_ph,String)
            End If
            If (probe_fail_cl Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(probe_fail_cl,String)
            End If
            If (livello1 Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(livello1,String)
            End If
            If (livello2 Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(livello2,String)
            End If
            If (rele_ch1.HasValue = true) Then
                command.Parameters(12).Value = CType(rele_ch1.Value,Integer)
            Else
                command.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (rele_ch2.HasValue = true) Then
                command.Parameters(13).Value = CType(rele_ch2.Value,Integer)
            Else
                command.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ld4_logTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ld4_log"
            tableMapping.ColumnMappings.Add("id", "id")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ld4_log] ([id], [identificativo], [id_485], [data], [valore1], [valo"& _ 
                "re2], [valore3], [valore4], [flusso], [livello_ch1], [livello_ch2], [dos_ch1], ["& _ 
                "dos_ch2], [alarm_probe_ch1], [alarm_probe_ch2], [relay1], [relay2], [alarm_sogli"& _ 
                "a_1], [alarm_soglia_2], [alarm_soglia_3], [alarm_soglia_4], [livello_stby], [tem"& _ 
                "peratura], [flow_meter], [totalizer], [flow_mtr]) VALUES (@id, @identificativo, "& _ 
                "@id_485, @data, @valore1, @valore2, @valore3, @valore4, @flusso, @livello_ch1, @"& _ 
                "livello_ch2, @dos_ch1, @dos_ch2, @alarm_probe_ch1, @alarm_probe_ch2, @relay1, @r"& _ 
                "elay2, @alarm_soglia_1, @alarm_soglia_2, @alarm_soglia_3, @alarm_soglia_4, @live"& _ 
                "llo_stby, @temperatura, @flow_meter, @totalizer, @flow_mtr)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore3", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valore3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore4", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valore4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flusso", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "flusso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello_ch1", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "livello_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello_ch2", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "livello_ch2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_ch1", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_ch2", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_ch2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_probe_ch1", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_probe_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_probe_ch2", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_probe_ch2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@relay1", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "relay1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@relay2", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "relay2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_soglia_1", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_soglia_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_soglia_2", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_soglia_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_soglia_3", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_soglia_3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_soglia_4", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_soglia_4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello_stby", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "livello_stby", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flow_meter", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "flow_meter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@totalizer", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "totalizer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flow_mtr", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "flow_mtr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.OldCommunication2020.My.MySettings.Default.max_5ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     id"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         ld4_log"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (identificativo = @identificativo)"& _ 
                " AND (id_485 = @id_485) AND (data = @data) AND (valore1 = @valore1) AND (valore2"& _ 
                " = @valore2) AND (valore3 = @valore3) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (valore4 = @va"& _ 
                "lore4) AND (flusso = @flusso) AND (livello_ch1 = @livello_ch1) AND (livello_ch2 "& _ 
                "= @livello_ch2) AND (dos_ch1 = @dos_ch1) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (dos_ch2 = "& _ 
                "@dos_ch2) AND (alarm_probe_ch1 = @alarm_probe_ch1) AND (alarm_probe_ch2 = @alarm"& _ 
                "_probe_ch2) AND (relay1 = @relay1) AND (relay2 = @relay2) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "& _ 
                "  AND (alarm_soglia_1 = @alarm_soglia_1) AND (alarm_soglia_2 = @alarm_soglia_2) "& _ 
                "AND (alarm_soglia_3 = @alarm_soglia_3) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (alarm_soglia"& _ 
                "_4 = @alarm_soglia_4) AND (livello_stby = @livello_stby) AND (temperatura = @tem"& _ 
                "peratura) AND (flow_meter = @flow_meter) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (totalizer "& _ 
                "= @totalizer) AND (flow_mtr = @flow_mtr)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore3", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore4", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flusso", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "flusso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello_ch1", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "livello_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello_ch2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "livello_ch2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_ch1", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_ch2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_ch2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_probe_ch1", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_probe_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_probe_ch2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_probe_ch2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@relay1", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "relay1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@relay2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "relay2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_soglia_1", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_soglia_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_soglia_2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_soglia_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_soglia_3", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_soglia_3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_soglia_4", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_soglia_4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello_stby", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "livello_stby", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flow_meter", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "flow_meter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@totalizer", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "totalizer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flow_mtr", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "flow_mtr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO ld4_log"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (id, identificativo, id_485, data, val"& _ 
                "ore1, valore2, valore3, valore4, flusso, livello_ch1, livello_ch2, dos_ch1, dos_"& _ 
                "ch2, alarm_probe_ch1, alarm_probe_ch2, relay1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      relay2, a"& _ 
                "larm_soglia_1, alarm_soglia_2, alarm_soglia_3, alarm_soglia_4, livello_stby, tem"& _ 
                "peratura, flow_meter, totalizer, flow_mtr)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES     (NEWID(),@identificativo,"& _ 
                "@id_485,@data,@valore1,@valore2,@valore3,@valore4,@flusso,@livello_ch1,@livello_"& _ 
                "ch2,@dos_ch1,@dos_ch2,@alarm_probe_ch1,@alarm_probe_ch2,@relay1,@relay2,@alarm_s"& _ 
                "oglia_1,@alarm_soglia_2,@alarm_soglia_3,@alarm_soglia_4,@livello_stby,@temperatu"& _ 
                "ra,@flow_meter,@totalizer,@flow_mtr)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore3", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore4", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flusso", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "flusso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello_ch1", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "livello_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello_ch2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "livello_ch2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_ch1", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_ch2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_ch2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_probe_ch1", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_probe_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_probe_ch2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_probe_ch2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@relay1", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "relay1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@relay2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "relay2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_soglia_1", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_soglia_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_soglia_2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_soglia_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_soglia_3", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_soglia_3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarm_soglia_4", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "alarm_soglia_4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello_stby", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "livello_stby", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flow_meter", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "flow_meter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@totalizer", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "totalizer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flow_mtr", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "flow_mtr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill( _
                    ByVal dataTable As log_db.ld4_logDataTable,  _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal valore3 As Global.System.Nullable(Of Single),  _
                    ByVal valore4 As Global.System.Nullable(Of Single),  _
                    ByVal flusso As Global.System.Nullable(Of Boolean),  _
                    ByVal livello_ch1 As Global.System.Nullable(Of Boolean),  _
                    ByVal livello_ch2 As Global.System.Nullable(Of Boolean),  _
                    ByVal dos_ch1 As Global.System.Nullable(Of Boolean),  _
                    ByVal dos_ch2 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_probe_ch1 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_probe_ch2 As Global.System.Nullable(Of Boolean),  _
                    ByVal relay1 As Global.System.Nullable(Of Boolean),  _
                    ByVal relay2 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_soglia_1 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_soglia_2 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_soglia_3 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_soglia_4 As Global.System.Nullable(Of Boolean),  _
                    ByVal livello_stby As Global.System.Nullable(Of Boolean),  _
                    ByVal temperatura As Global.System.Nullable(Of Single),  _
                    ByVal flow_meter As Global.System.Nullable(Of Single),  _
                    ByVal totalizer As Global.System.Nullable(Of Single),  _
                    ByVal flow_mtr As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(data.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore3.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(valore3.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (valore4.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(valore4.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (flusso.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(flusso.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (livello_ch1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(livello_ch1.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (livello_ch2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(livello_ch2.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (dos_ch1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(dos_ch1.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (dos_ch2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(dos_ch2.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (alarm_probe_ch1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(alarm_probe_ch1.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (alarm_probe_ch2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(alarm_probe_ch2.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (relay1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(relay1.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (relay2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(relay2.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (alarm_soglia_1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(alarm_soglia_1.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (alarm_soglia_2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(17).Value = CType(alarm_soglia_2.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (alarm_soglia_3.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(18).Value = CType(alarm_soglia_3.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (alarm_soglia_4.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(19).Value = CType(alarm_soglia_4.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (livello_stby.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(20).Value = CType(livello_stby.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (temperatura.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(21).Value = CType(temperatura.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (flow_meter.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(22).Value = CType(flow_meter.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (totalizer.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(23).Value = CType(totalizer.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (flow_mtr.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(24).Value = CType(flow_mtr.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal valore3 As Global.System.Nullable(Of Single),  _
                    ByVal valore4 As Global.System.Nullable(Of Single),  _
                    ByVal flusso As Global.System.Nullable(Of Boolean),  _
                    ByVal livello_ch1 As Global.System.Nullable(Of Boolean),  _
                    ByVal livello_ch2 As Global.System.Nullable(Of Boolean),  _
                    ByVal dos_ch1 As Global.System.Nullable(Of Boolean),  _
                    ByVal dos_ch2 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_probe_ch1 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_probe_ch2 As Global.System.Nullable(Of Boolean),  _
                    ByVal relay1 As Global.System.Nullable(Of Boolean),  _
                    ByVal relay2 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_soglia_1 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_soglia_2 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_soglia_3 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_soglia_4 As Global.System.Nullable(Of Boolean),  _
                    ByVal livello_stby As Global.System.Nullable(Of Boolean),  _
                    ByVal temperatura As Global.System.Nullable(Of Single),  _
                    ByVal flow_meter As Global.System.Nullable(Of Single),  _
                    ByVal totalizer As Global.System.Nullable(Of Single),  _
                    ByVal flow_mtr As Global.System.Nullable(Of Boolean)) As log_db.ld4_logDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(data.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore3.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(valore3.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (valore4.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(valore4.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (flusso.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(flusso.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (livello_ch1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(livello_ch1.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (livello_ch2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(livello_ch2.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (dos_ch1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(dos_ch1.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (dos_ch2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(dos_ch2.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (alarm_probe_ch1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(alarm_probe_ch1.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (alarm_probe_ch2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(alarm_probe_ch2.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (relay1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(relay1.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (relay2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(relay2.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (alarm_soglia_1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(alarm_soglia_1.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (alarm_soglia_2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(17).Value = CType(alarm_soglia_2.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (alarm_soglia_3.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(18).Value = CType(alarm_soglia_3.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (alarm_soglia_4.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(19).Value = CType(alarm_soglia_4.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (livello_stby.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(20).Value = CType(livello_stby.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (temperatura.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(21).Value = CType(temperatura.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (flow_meter.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(22).Value = CType(flow_meter.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (totalizer.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(23).Value = CType(totalizer.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (flow_mtr.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(24).Value = CType(flow_mtr.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As log_db.ld4_logDataTable = New log_db.ld4_logDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As log_db.ld4_logDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As log_db) As Integer
            Return Me.Adapter.Update(dataSet, "ld4_log")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal id As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal valore3 As Global.System.Nullable(Of Single),  _
                    ByVal valore4 As Global.System.Nullable(Of Single),  _
                    ByVal flusso As Global.System.Nullable(Of Boolean),  _
                    ByVal livello_ch1 As Global.System.Nullable(Of Boolean),  _
                    ByVal livello_ch2 As Global.System.Nullable(Of Boolean),  _
                    ByVal dos_ch1 As Global.System.Nullable(Of Boolean),  _
                    ByVal dos_ch2 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_probe_ch1 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_probe_ch2 As Global.System.Nullable(Of Boolean),  _
                    ByVal relay1 As Global.System.Nullable(Of Boolean),  _
                    ByVal relay2 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_soglia_1 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_soglia_2 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_soglia_3 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_soglia_4 As Global.System.Nullable(Of Boolean),  _
                    ByVal livello_stby As Global.System.Nullable(Of Boolean),  _
                    ByVal temperatura As Global.System.Nullable(Of Single),  _
                    ByVal flow_meter As Global.System.Nullable(Of Single),  _
                    ByVal totalizer As Global.System.Nullable(Of Single),  _
                    ByVal flow_mtr As Global.System.Nullable(Of Boolean)) As Integer
            If (id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(id.Value,System.Guid)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (identificativo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(data.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(valore1.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(valore2.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (valore3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(valore3.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (valore4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(valore4.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (flusso.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(flusso.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (livello_ch1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(livello_ch1.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (livello_ch2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(livello_ch2.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (dos_ch1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(dos_ch1.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (dos_ch2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(dos_ch2.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (alarm_probe_ch1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(alarm_probe_ch1.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (alarm_probe_ch2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(alarm_probe_ch2.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (relay1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(relay1.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (relay2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(relay2.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (alarm_soglia_1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(alarm_soglia_1.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (alarm_soglia_2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(alarm_soglia_2.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (alarm_soglia_3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(alarm_soglia_3.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (alarm_soglia_4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(alarm_soglia_4.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (livello_stby.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(livello_stby.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (temperatura.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(temperatura.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (flow_meter.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(flow_meter.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (totalizer.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(totalizer.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (flow_mtr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(flow_mtr.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function InsertQuery( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal valore3 As Global.System.Nullable(Of Single),  _
                    ByVal valore4 As Global.System.Nullable(Of Single),  _
                    ByVal flusso As Global.System.Nullable(Of Boolean),  _
                    ByVal livello_ch1 As Global.System.Nullable(Of Boolean),  _
                    ByVal livello_ch2 As Global.System.Nullable(Of Boolean),  _
                    ByVal dos_ch1 As Global.System.Nullable(Of Boolean),  _
                    ByVal dos_ch2 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_probe_ch1 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_probe_ch2 As Global.System.Nullable(Of Boolean),  _
                    ByVal relay1 As Global.System.Nullable(Of Boolean),  _
                    ByVal relay2 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_soglia_1 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_soglia_2 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_soglia_3 As Global.System.Nullable(Of Boolean),  _
                    ByVal alarm_soglia_4 As Global.System.Nullable(Of Boolean),  _
                    ByVal livello_stby As Global.System.Nullable(Of Boolean),  _
                    ByVal temperatura As Global.System.Nullable(Of Single),  _
                    ByVal flow_meter As Global.System.Nullable(Of Single),  _
                    ByVal totalizer As Global.System.Nullable(Of Single),  _
                    ByVal flow_mtr As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                command.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                command.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore3.HasValue = true) Then
                command.Parameters(5).Value = CType(valore3.Value,Single)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (valore4.HasValue = true) Then
                command.Parameters(6).Value = CType(valore4.Value,Single)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (flusso.HasValue = true) Then
                command.Parameters(7).Value = CType(flusso.Value,Boolean)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (livello_ch1.HasValue = true) Then
                command.Parameters(8).Value = CType(livello_ch1.Value,Boolean)
            Else
                command.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (livello_ch2.HasValue = true) Then
                command.Parameters(9).Value = CType(livello_ch2.Value,Boolean)
            Else
                command.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (dos_ch1.HasValue = true) Then
                command.Parameters(10).Value = CType(dos_ch1.Value,Boolean)
            Else
                command.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (dos_ch2.HasValue = true) Then
                command.Parameters(11).Value = CType(dos_ch2.Value,Boolean)
            Else
                command.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (alarm_probe_ch1.HasValue = true) Then
                command.Parameters(12).Value = CType(alarm_probe_ch1.Value,Boolean)
            Else
                command.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (alarm_probe_ch2.HasValue = true) Then
                command.Parameters(13).Value = CType(alarm_probe_ch2.Value,Boolean)
            Else
                command.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (relay1.HasValue = true) Then
                command.Parameters(14).Value = CType(relay1.Value,Boolean)
            Else
                command.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (relay2.HasValue = true) Then
                command.Parameters(15).Value = CType(relay2.Value,Boolean)
            Else
                command.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (alarm_soglia_1.HasValue = true) Then
                command.Parameters(16).Value = CType(alarm_soglia_1.Value,Boolean)
            Else
                command.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (alarm_soglia_2.HasValue = true) Then
                command.Parameters(17).Value = CType(alarm_soglia_2.Value,Boolean)
            Else
                command.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (alarm_soglia_3.HasValue = true) Then
                command.Parameters(18).Value = CType(alarm_soglia_3.Value,Boolean)
            Else
                command.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (alarm_soglia_4.HasValue = true) Then
                command.Parameters(19).Value = CType(alarm_soglia_4.Value,Boolean)
            Else
                command.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (livello_stby.HasValue = true) Then
                command.Parameters(20).Value = CType(livello_stby.Value,Boolean)
            Else
                command.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (temperatura.HasValue = true) Then
                command.Parameters(21).Value = CType(temperatura.Value,Single)
            Else
                command.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (flow_meter.HasValue = true) Then
                command.Parameters(22).Value = CType(flow_meter.Value,Single)
            Else
                command.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (totalizer.HasValue = true) Then
                command.Parameters(23).Value = CType(totalizer.Value,Single)
            Else
                command.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (flow_mtr.HasValue = true) Then
                command.Parameters(24).Value = CType(flow_mtr.Value,Boolean)
            Else
                command.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class log_towerTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "log_tower"
            tableMapping.ColumnMappings.Add("Expr1", "Expr1")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [log_tower] ([id]) VALUES (@id)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.OldCommunication2020.My.MySettings.Default.max_5ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     COUNT(id) AS Expr1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         log_tower"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (identificativo "& _ 
                "= @identificativo) AND (id_485 = @id_485) AND (data = @data) AND (cd_high = @cd_"& _ 
                "high) AND (cd_low = @cd_low) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (bleed_timeout = @bleed"& _ 
                "_timeout) AND (flow = @flow) AND (level_inhibitor = @level_inhibitor) AND (level"& _ 
                "_prebiocide1 = @level_prebiocide1) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (level_prebiocide"& _ 
                "2 = @level_prebiocide2) AND (level_biocide1 = @level_biocide1) AND (level_biocid"& _ 
                "e2 = @level_biocide2) AND (ch2_high = @ch2_high) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (ch"& _ 
                "2_low = @ch2_low) AND (ch2_level = @ch2_level) AND (ch3_high = @ch3_high) AND (c"& _ 
                "h3_low = @ch3_low) AND (ch3_level = @ch3_level)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_high", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_high", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_low", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_low", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bleed_timeout", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "bleed_timeout", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flow", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "flow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_inhibitor", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_inhibitor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_prebiocide1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_prebiocide1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_prebiocide2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_prebiocide2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_biocide1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_biocide1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_biocide2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_biocide2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch2_high", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch2_high", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch2_low", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch2_low", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch2_level", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch2_level", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch3_high", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch3_high", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch3_low", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch3_low", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch3_level", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch3_level", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO log_tower"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (id, identificativo, id_485, data, v"& _ 
                "alore1, valore2, valore3, temperatura, cd_high, cd_low, bleed_timeout, flow, lev"& _ 
                "el_inhibitor, level_prebiocide1, level_prebiocide2, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      leve"& _ 
                "l_biocide1, level_biocide2, ch2_high, ch2_low, ch2_level, ch3_high, ch3_low, ch3"& _ 
                "_level, tot_input, tot_bleed, Out_inhibitore_digital, Out_inhibitore_prop, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                   Out_bleed, Out_prebiocide1, Out_prebiocide2, Out_biocide1, Ou"& _ 
                "t_biocide2, Ch2_prop, Ch2_dig, Ch3_prop, Ch3_dig)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES     (NEWID(),@identifi"& _ 
                "cativo,@id_485,@data,@valore1,@valore2,@valore3,@temperatura,@cd_high,@cd_low,@b"& _ 
                "leed_timeout,@flow,@level_inhibitor,@level_prebiocide1,@level_prebiocide2,@level"& _ 
                "_biocide1,@level_biocide2,@ch2_high,@ch2_low,@ch2_level,@ch3_high,@ch3_low,@ch3_"& _ 
                "level,@tot_in,@tot_b,@Out_inhibitore_digital,@Out_inhibitore_prop,@Out_bleed,@Ou"& _ 
                "t_prebiocide1,@Out_prebiocide2,@Out_biocide1,@Out_biocide2,@Ch2_prop,@Ch2_dig,@C"& _ 
                "h3_prop,@Ch3_dig)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore3", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_high", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_high", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_low", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_low", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bleed_timeout", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "bleed_timeout", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flow", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "flow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_inhibitor", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_inhibitor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_prebiocide1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_prebiocide1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_prebiocide2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_prebiocide2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_biocide1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_biocide1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_biocide2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_biocide2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch2_high", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch2_high", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch2_low", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch2_low", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch2_level", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch2_level", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch3_high", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch3_high", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch3_low", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch3_low", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch3_level", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch3_level", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tot_in", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "tot_input", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tot_b", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "tot_bleed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Out_inhibitore_digital", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Out_inhibitore_digital", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Out_inhibitore_prop", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Out_inhibitore_prop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Out_bleed", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Out_bleed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Out_prebiocide1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Out_prebiocide1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Out_prebiocide2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Out_prebiocide2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Out_biocide1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Out_biocide1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Out_biocide2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Out_biocide2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ch2_prop", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Ch2_prop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ch2_dig", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Ch2_dig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ch3_prop", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Ch3_prop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ch3_dig", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Ch3_dig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill( _
                    ByVal dataTable As log_db.log_towerDataTable,  _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal cd_high As String,  _
                    ByVal cd_low As String,  _
                    ByVal bleed_timeout As String,  _
                    ByVal flow As String,  _
                    ByVal level_inhibitor As String,  _
                    ByVal level_prebiocide1 As String,  _
                    ByVal level_prebiocide2 As String,  _
                    ByVal level_biocide1 As String,  _
                    ByVal level_biocide2 As String,  _
                    ByVal ch2_high As String,  _
                    ByVal ch2_low As String,  _
                    ByVal ch2_level As String,  _
                    ByVal ch3_high As String,  _
                    ByVal ch3_low As String,  _
                    ByVal ch3_level As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(data.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (cd_high Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(cd_high,String)
            End If
            If (cd_low Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(cd_low,String)
            End If
            If (bleed_timeout Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(bleed_timeout,String)
            End If
            If (flow Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(flow,String)
            End If
            If (level_inhibitor Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(level_inhibitor,String)
            End If
            If (level_prebiocide1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(level_prebiocide1,String)
            End If
            If (level_prebiocide2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(level_prebiocide2,String)
            End If
            If (level_biocide1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(level_biocide1,String)
            End If
            If (level_biocide2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(level_biocide2,String)
            End If
            If (ch2_high Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(ch2_high,String)
            End If
            If (ch2_low Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(ch2_low,String)
            End If
            If (ch2_level Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(ch2_level,String)
            End If
            If (ch3_high Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(ch3_high,String)
            End If
            If (ch3_low Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(ch3_low,String)
            End If
            If (ch3_level Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(17).Value = CType(ch3_level,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal cd_high As String,  _
                    ByVal cd_low As String,  _
                    ByVal bleed_timeout As String,  _
                    ByVal flow As String,  _
                    ByVal level_inhibitor As String,  _
                    ByVal level_prebiocide1 As String,  _
                    ByVal level_prebiocide2 As String,  _
                    ByVal level_biocide1 As String,  _
                    ByVal level_biocide2 As String,  _
                    ByVal ch2_high As String,  _
                    ByVal ch2_low As String,  _
                    ByVal ch2_level As String,  _
                    ByVal ch3_high As String,  _
                    ByVal ch3_low As String,  _
                    ByVal ch3_level As String) As log_db.log_towerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(data.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (cd_high Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(cd_high,String)
            End If
            If (cd_low Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(cd_low,String)
            End If
            If (bleed_timeout Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(bleed_timeout,String)
            End If
            If (flow Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(flow,String)
            End If
            If (level_inhibitor Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(level_inhibitor,String)
            End If
            If (level_prebiocide1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(level_prebiocide1,String)
            End If
            If (level_prebiocide2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(level_prebiocide2,String)
            End If
            If (level_biocide1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(level_biocide1,String)
            End If
            If (level_biocide2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(level_biocide2,String)
            End If
            If (ch2_high Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(ch2_high,String)
            End If
            If (ch2_low Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(ch2_low,String)
            End If
            If (ch2_level Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(ch2_level,String)
            End If
            If (ch3_high Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(ch3_high,String)
            End If
            If (ch3_low Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(ch3_low,String)
            End If
            If (ch3_level Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(17).Value = CType(ch3_level,String)
            End If
            Dim dataTable As log_db.log_towerDataTable = New log_db.log_towerDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As log_db.log_towerDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As log_db) As Integer
            Return Me.Adapter.Update(dataSet, "log_tower")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Global.System.Nullable(Of Global.System.Guid)) As Integer
            If (id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(id.Value,System.Guid)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function InsertQuery( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal valore3 As Global.System.Nullable(Of Single),  _
                    ByVal temperatura As String,  _
                    ByVal cd_high As String,  _
                    ByVal cd_low As String,  _
                    ByVal bleed_timeout As String,  _
                    ByVal flow As String,  _
                    ByVal level_inhibitor As String,  _
                    ByVal level_prebiocide1 As String,  _
                    ByVal level_prebiocide2 As String,  _
                    ByVal level_biocide1 As String,  _
                    ByVal level_biocide2 As String,  _
                    ByVal ch2_high As String,  _
                    ByVal ch2_low As String,  _
                    ByVal ch2_level As String,  _
                    ByVal ch3_high As String,  _
                    ByVal ch3_low As String,  _
                    ByVal ch3_level As String,  _
                    ByVal tot_in As String,  _
                    ByVal tot_b As String,  _
                    ByVal Out_inhibitore_digital As String,  _
                    ByVal Out_inhibitore_prop As String,  _
                    ByVal Out_bleed As String,  _
                    ByVal Out_prebiocide1 As String,  _
                    ByVal Out_prebiocide2 As String,  _
                    ByVal Out_biocide1 As String,  _
                    ByVal Out_biocide2 As String,  _
                    ByVal Ch2_prop As String,  _
                    ByVal Ch2_dig As String,  _
                    ByVal Ch3_prop As String,  _
                    ByVal Ch3_dig As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                command.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                command.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore3.HasValue = true) Then
                command.Parameters(5).Value = CType(valore3.Value,Single)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (temperatura Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(temperatura,String)
            End If
            If (cd_high Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(cd_high,String)
            End If
            If (cd_low Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(cd_low,String)
            End If
            If (bleed_timeout Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(bleed_timeout,String)
            End If
            If (flow Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(flow,String)
            End If
            If (level_inhibitor Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(level_inhibitor,String)
            End If
            If (level_prebiocide1 Is Nothing) Then
                command.Parameters(12).Value = Global.System.DBNull.Value
            Else
                command.Parameters(12).Value = CType(level_prebiocide1,String)
            End If
            If (level_prebiocide2 Is Nothing) Then
                command.Parameters(13).Value = Global.System.DBNull.Value
            Else
                command.Parameters(13).Value = CType(level_prebiocide2,String)
            End If
            If (level_biocide1 Is Nothing) Then
                command.Parameters(14).Value = Global.System.DBNull.Value
            Else
                command.Parameters(14).Value = CType(level_biocide1,String)
            End If
            If (level_biocide2 Is Nothing) Then
                command.Parameters(15).Value = Global.System.DBNull.Value
            Else
                command.Parameters(15).Value = CType(level_biocide2,String)
            End If
            If (ch2_high Is Nothing) Then
                command.Parameters(16).Value = Global.System.DBNull.Value
            Else
                command.Parameters(16).Value = CType(ch2_high,String)
            End If
            If (ch2_low Is Nothing) Then
                command.Parameters(17).Value = Global.System.DBNull.Value
            Else
                command.Parameters(17).Value = CType(ch2_low,String)
            End If
            If (ch2_level Is Nothing) Then
                command.Parameters(18).Value = Global.System.DBNull.Value
            Else
                command.Parameters(18).Value = CType(ch2_level,String)
            End If
            If (ch3_high Is Nothing) Then
                command.Parameters(19).Value = Global.System.DBNull.Value
            Else
                command.Parameters(19).Value = CType(ch3_high,String)
            End If
            If (ch3_low Is Nothing) Then
                command.Parameters(20).Value = Global.System.DBNull.Value
            Else
                command.Parameters(20).Value = CType(ch3_low,String)
            End If
            If (ch3_level Is Nothing) Then
                command.Parameters(21).Value = Global.System.DBNull.Value
            Else
                command.Parameters(21).Value = CType(ch3_level,String)
            End If
            If (tot_in Is Nothing) Then
                command.Parameters(22).Value = Global.System.DBNull.Value
            Else
                command.Parameters(22).Value = CType(tot_in,String)
            End If
            If (tot_b Is Nothing) Then
                command.Parameters(23).Value = Global.System.DBNull.Value
            Else
                command.Parameters(23).Value = CType(tot_b,String)
            End If
            If (Out_inhibitore_digital Is Nothing) Then
                command.Parameters(24).Value = Global.System.DBNull.Value
            Else
                command.Parameters(24).Value = CType(Out_inhibitore_digital,String)
            End If
            If (Out_inhibitore_prop Is Nothing) Then
                command.Parameters(25).Value = Global.System.DBNull.Value
            Else
                command.Parameters(25).Value = CType(Out_inhibitore_prop,String)
            End If
            If (Out_bleed Is Nothing) Then
                command.Parameters(26).Value = Global.System.DBNull.Value
            Else
                command.Parameters(26).Value = CType(Out_bleed,String)
            End If
            If (Out_prebiocide1 Is Nothing) Then
                command.Parameters(27).Value = Global.System.DBNull.Value
            Else
                command.Parameters(27).Value = CType(Out_prebiocide1,String)
            End If
            If (Out_prebiocide2 Is Nothing) Then
                command.Parameters(28).Value = Global.System.DBNull.Value
            Else
                command.Parameters(28).Value = CType(Out_prebiocide2,String)
            End If
            If (Out_biocide1 Is Nothing) Then
                command.Parameters(29).Value = Global.System.DBNull.Value
            Else
                command.Parameters(29).Value = CType(Out_biocide1,String)
            End If
            If (Out_biocide2 Is Nothing) Then
                command.Parameters(30).Value = Global.System.DBNull.Value
            Else
                command.Parameters(30).Value = CType(Out_biocide2,String)
            End If
            If (Ch2_prop Is Nothing) Then
                command.Parameters(31).Value = Global.System.DBNull.Value
            Else
                command.Parameters(31).Value = CType(Ch2_prop,String)
            End If
            If (Ch2_dig Is Nothing) Then
                command.Parameters(32).Value = Global.System.DBNull.Value
            Else
                command.Parameters(32).Value = CType(Ch2_dig,String)
            End If
            If (Ch3_prop Is Nothing) Then
                command.Parameters(33).Value = Global.System.DBNull.Value
            Else
                command.Parameters(33).Value = CType(Ch3_prop,String)
            End If
            If (Ch3_dig Is Nothing) Then
                command.Parameters(34).Value = Global.System.DBNull.Value
            Else
                command.Parameters(34).Value = CType(Ch3_dig,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class log_tamponeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "log_tampone"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("identificativo", "identificativo")
            tableMapping.ColumnMappings.Add("id_485", "id_485")
            tableMapping.ColumnMappings.Add("data", "data")
            tableMapping.ColumnMappings.Add("valore1", "valore1")
            tableMapping.ColumnMappings.Add("valore2", "valore2")
            tableMapping.ColumnMappings.Add("valore3", "valore3")
            tableMapping.ColumnMappings.Add("valore4", "valore4")
            tableMapping.ColumnMappings.Add("valore5", "valore5")
            tableMapping.ColumnMappings.Add("Aa1", "Aa1")
            tableMapping.ColumnMappings.Add("Ab1", "Ab1")
            tableMapping.ColumnMappings.Add("Ad1", "Ad1")
            tableMapping.ColumnMappings.Add("Ar1", "Ar1")
            tableMapping.ColumnMappings.Add("Aa2", "Aa2")
            tableMapping.ColumnMappings.Add("Ab2", "Ab2")
            tableMapping.ColumnMappings.Add("Ad2", "Ad2")
            tableMapping.ColumnMappings.Add("Ar2", "Ar2")
            tableMapping.ColumnMappings.Add("Aa3", "Aa3")
            tableMapping.ColumnMappings.Add("Ab3", "Ab3")
            tableMapping.ColumnMappings.Add("Ad3", "Ad3")
            tableMapping.ColumnMappings.Add("Ar3", "Ar3")
            tableMapping.ColumnMappings.Add("Aa4", "Aa4")
            tableMapping.ColumnMappings.Add("Ab4", "Ab4")
            tableMapping.ColumnMappings.Add("Ad4", "Ad4")
            tableMapping.ColumnMappings.Add("Ar4", "Ar4")
            tableMapping.ColumnMappings.Add("Aa5", "Aa5")
            tableMapping.ColumnMappings.Add("Ab5", "Ab5")
            tableMapping.ColumnMappings.Add("Ad5", "Ad5")
            tableMapping.ColumnMappings.Add("Ar5", "Ar5")
            tableMapping.ColumnMappings.Add("Flow", "Flow")
            tableMapping.ColumnMappings.Add("wm", "wm")
            tableMapping.ColumnMappings.Add("temperatura", "temperatura")
            tableMapping.ColumnMappings.Add("fml", "fml")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [log_tampone] ([id], [identificativo], [id_485], [data], [valore1], ["& _ 
                "valore2], [valore3], [valore4], [valore5], [Aa1], [Ab1], [Ad1], [Ar1], [Aa2], [A"& _ 
                "b2], [Ad2], [Ar2], [Aa3], [Ab3], [Ad3], [Ar3], [Aa4], [Ab4], [Ad4], [Ar4], [Aa5]"& _ 
                ", [Ab5], [Ad5], [Ar5], [Flow], [wm], [temperatura], [fml]) VALUES (@id, @identif"& _ 
                "icativo, @id_485, @data, @valore1, @valore2, @valore3, @valore4, @valore5, @Aa1,"& _ 
                " @Ab1, @Ad1, @Ar1, @Aa2, @Ab2, @Ad2, @Ar2, @Aa3, @Ab3, @Ad3, @Ar3, @Aa4, @Ab4, @"& _ 
                "Ad4, @Ar4, @Aa5, @Ab5, @Ad5, @Ar5, @Flow, @wm, @temperatura, @fml)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore3", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valore3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore4", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valore4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore5", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valore5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa3", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab3", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad3", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar3", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa4", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab4", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad4", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar4", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa5", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab5", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad5", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar5", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flow", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wm", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "wm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fml", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.OldCommunication2020.My.MySettings.Default.max_5ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     id, identificativo, id_485, data, valore1, valore2, valore3, valore4, "& _ 
                "valore5, Aa1, Ab1, Ad1, Ar1, Aa2, Ab2, Ad2, Ar2, Aa3, Ab3, Ad3, Ar3, Aa4, Ab4, A"& _ 
                "d4, Ar4, Aa5, Ab5, Ad5, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Ar5, Flow, wm, temperatura, fml"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         log_tampone"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (identificativo = @identificativo) AND (id_"& _ 
                "485 = @id_485)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM ld_log_tampone"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (identificativo = @identificativo) AND (id_"& _ 
                "485 = @id_485)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "INSERT INTO [log_tampone]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (id, identificativo, id_485, dat"& _ 
                "a, valore1, valore2, valore3, valore4, valore5, Aa1, Ab1, Ad1, Ar1, Aa2, Ab2, Ad"& _ 
                "2, Ar2, Aa3, Ab3, Ad3, Ar3, Aa4, Ab4, Ad4, Ar4, Aa5, Ab5, Ad5, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "       Ar5, Flow, wm, temperatura, fml)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES     (NEWID(),@identificativo,@id"& _ 
                "_485,@data,@valore1,@valore2,@valore3,@valore4,@valore5,@Aa1,@Ab1,@Ad1,@Ar1,@Aa2"& _ 
                ",@Ab2,@Ad2,@Ar2,@Aa3,@Ab3,@Ad3,@Ar3,@Aa4,@Ab4,@Ad4,@Ar4,@Aa5,@Ab5,@Ad5,@Ar5,@Flo"& _ 
                "w,@wm,@temperatura,@fml)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore3", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore4", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore5", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa3", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab3", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad3", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar3", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa4", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab4", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad4", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar4", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa5", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab5", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad5", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar5", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flow", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Flow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wm", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "wm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fml", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "fml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "UPDATE    log_tampone"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET              identificativo = @identificativo, id_485 "& _ 
                "= @id_485, data = @data, valore1 = @valore1, valore2 = @valore2, valore3 = @valo"& _ 
                "re3, valore4 = @valore4, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      valore5 = @valore5, Aa1 = @Aa1,"& _ 
                " Ab1 = @Ab1, Ad1 = @Ad1, Ar1 = @Ar1, Aa2 = @Aa2, Ab2 = @Ab2, Ad2 = @Ad2, Ar2 = @"& _ 
                "Ar2, Aa3 = @Aa3, Ab3 = @Ab3, Ad3 = @Ad3, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Ar3 = @Ar3, Aa4"& _ 
                " = @Aa4, Ab4 = @Ab4, Ad4 = @Ad4, Ar4 = @Ar4, Aa5 = @Aa5, Ab5 = @Ab5, Ad5 = @Ad5,"& _ 
                " Ar5 = @Ar5, Flow = @Flow, wm = @wm, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      temperatura = @temp"& _ 
                "eratura, fml = @fml"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (id = @id)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore3", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore4", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore5", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar1", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar2", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa3", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab3", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad3", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar3", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa4", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab4", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad4", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar4", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aa5", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Aa5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ab5", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ab5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ad5", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ad5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ar5", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Ar5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flow", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Flow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wm", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "wm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fml", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "fml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As log_db.log_tamponeDataTable, ByVal identificativo As String, ByVal id_485 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal identificativo As String, ByVal id_485 As String) As log_db.log_tamponeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            Dim dataTable As log_db.log_tamponeDataTable = New log_db.log_tamponeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As log_db.log_tamponeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As log_db) As Integer
            Return Me.Adapter.Update(dataSet, "log_tampone")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal id As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal valore3 As Global.System.Nullable(Of Single),  _
                    ByVal valore4 As Global.System.Nullable(Of Single),  _
                    ByVal valore5 As Global.System.Nullable(Of Single),  _
                    ByVal Aa1 As String,  _
                    ByVal Ab1 As String,  _
                    ByVal Ad1 As String,  _
                    ByVal Ar1 As String,  _
                    ByVal Aa2 As String,  _
                    ByVal Ab2 As String,  _
                    ByVal Ad2 As String,  _
                    ByVal Ar2 As String,  _
                    ByVal Aa3 As String,  _
                    ByVal Ab3 As String,  _
                    ByVal Ad3 As String,  _
                    ByVal Ar3 As String,  _
                    ByVal Aa4 As String,  _
                    ByVal Ab4 As String,  _
                    ByVal Ad4 As String,  _
                    ByVal Ar4 As String,  _
                    ByVal Aa5 As String,  _
                    ByVal Ab5 As String,  _
                    ByVal Ad5 As String,  _
                    ByVal Ar5 As String,  _
                    ByVal Flow As String,  _
                    ByVal wm As Global.System.Nullable(Of Single),  _
                    ByVal temperatura As Global.System.Nullable(Of Single),  _
                    ByVal fml As String) As Integer
            If (id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(id.Value,System.Guid)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (identificativo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(data.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(valore1.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(valore2.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (valore3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(valore3.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (valore4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(valore4.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (valore5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(valore5.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Aa1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Aa1,String)
            End If
            If (Ab1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Ab1,String)
            End If
            If (Ad1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Ad1,String)
            End If
            If (Ar1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Ar1,String)
            End If
            If (Aa2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Aa2,String)
            End If
            If (Ab2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Ab2,String)
            End If
            If (Ad2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Ad2,String)
            End If
            If (Ar2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Ar2,String)
            End If
            If (Aa3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Aa3,String)
            End If
            If (Ab3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Ab3,String)
            End If
            If (Ad3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Ad3,String)
            End If
            If (Ar3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Ar3,String)
            End If
            If (Aa4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(Aa4,String)
            End If
            If (Ab4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(Ab4,String)
            End If
            If (Ad4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(Ad4,String)
            End If
            If (Ar4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Ar4,String)
            End If
            If (Aa5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Aa5,String)
            End If
            If (Ab5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(Ab5,String)
            End If
            If (Ad5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(Ad5,String)
            End If
            If (Ar5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Ar5,String)
            End If
            If (Flow Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Flow,String)
            End If
            If (wm.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(wm.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (temperatura.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(temperatura.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (fml Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(fml,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteQuery(ByVal identificativo As String, ByVal id_485 As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertQuery( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal valore3 As Global.System.Nullable(Of Single),  _
                    ByVal valore4 As Global.System.Nullable(Of Single),  _
                    ByVal valore5 As Global.System.Nullable(Of Single),  _
                    ByVal Aa1 As String,  _
                    ByVal Ab1 As String,  _
                    ByVal Ad1 As String,  _
                    ByVal Ar1 As String,  _
                    ByVal Aa2 As String,  _
                    ByVal Ab2 As String,  _
                    ByVal Ad2 As String,  _
                    ByVal Ar2 As String,  _
                    ByVal Aa3 As String,  _
                    ByVal Ab3 As String,  _
                    ByVal Ad3 As String,  _
                    ByVal Ar3 As String,  _
                    ByVal Aa4 As String,  _
                    ByVal Ab4 As String,  _
                    ByVal Ad4 As String,  _
                    ByVal Ar4 As String,  _
                    ByVal Aa5 As String,  _
                    ByVal Ab5 As String,  _
                    ByVal Ad5 As String,  _
                    ByVal Ar5 As String,  _
                    ByVal Flow As String,  _
                    ByVal wm As Global.System.Nullable(Of Single),  _
                    ByVal temperatura As Global.System.Nullable(Of Single),  _
                    ByVal fml As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                command.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                command.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore3.HasValue = true) Then
                command.Parameters(5).Value = CType(valore3.Value,Single)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (valore4.HasValue = true) Then
                command.Parameters(6).Value = CType(valore4.Value,Single)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (valore5.HasValue = true) Then
                command.Parameters(7).Value = CType(valore5.Value,Single)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Aa1 Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(Aa1,String)
            End If
            If (Ab1 Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(Ab1,String)
            End If
            If (Ad1 Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(Ad1,String)
            End If
            If (Ar1 Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(Ar1,String)
            End If
            If (Aa2 Is Nothing) Then
                command.Parameters(12).Value = Global.System.DBNull.Value
            Else
                command.Parameters(12).Value = CType(Aa2,String)
            End If
            If (Ab2 Is Nothing) Then
                command.Parameters(13).Value = Global.System.DBNull.Value
            Else
                command.Parameters(13).Value = CType(Ab2,String)
            End If
            If (Ad2 Is Nothing) Then
                command.Parameters(14).Value = Global.System.DBNull.Value
            Else
                command.Parameters(14).Value = CType(Ad2,String)
            End If
            If (Ar2 Is Nothing) Then
                command.Parameters(15).Value = Global.System.DBNull.Value
            Else
                command.Parameters(15).Value = CType(Ar2,String)
            End If
            If (Aa3 Is Nothing) Then
                command.Parameters(16).Value = Global.System.DBNull.Value
            Else
                command.Parameters(16).Value = CType(Aa3,String)
            End If
            If (Ab3 Is Nothing) Then
                command.Parameters(17).Value = Global.System.DBNull.Value
            Else
                command.Parameters(17).Value = CType(Ab3,String)
            End If
            If (Ad3 Is Nothing) Then
                command.Parameters(18).Value = Global.System.DBNull.Value
            Else
                command.Parameters(18).Value = CType(Ad3,String)
            End If
            If (Ar3 Is Nothing) Then
                command.Parameters(19).Value = Global.System.DBNull.Value
            Else
                command.Parameters(19).Value = CType(Ar3,String)
            End If
            If (Aa4 Is Nothing) Then
                command.Parameters(20).Value = Global.System.DBNull.Value
            Else
                command.Parameters(20).Value = CType(Aa4,String)
            End If
            If (Ab4 Is Nothing) Then
                command.Parameters(21).Value = Global.System.DBNull.Value
            Else
                command.Parameters(21).Value = CType(Ab4,String)
            End If
            If (Ad4 Is Nothing) Then
                command.Parameters(22).Value = Global.System.DBNull.Value
            Else
                command.Parameters(22).Value = CType(Ad4,String)
            End If
            If (Ar4 Is Nothing) Then
                command.Parameters(23).Value = Global.System.DBNull.Value
            Else
                command.Parameters(23).Value = CType(Ar4,String)
            End If
            If (Aa5 Is Nothing) Then
                command.Parameters(24).Value = Global.System.DBNull.Value
            Else
                command.Parameters(24).Value = CType(Aa5,String)
            End If
            If (Ab5 Is Nothing) Then
                command.Parameters(25).Value = Global.System.DBNull.Value
            Else
                command.Parameters(25).Value = CType(Ab5,String)
            End If
            If (Ad5 Is Nothing) Then
                command.Parameters(26).Value = Global.System.DBNull.Value
            Else
                command.Parameters(26).Value = CType(Ad5,String)
            End If
            If (Ar5 Is Nothing) Then
                command.Parameters(27).Value = Global.System.DBNull.Value
            Else
                command.Parameters(27).Value = CType(Ar5,String)
            End If
            If (Flow Is Nothing) Then
                command.Parameters(28).Value = Global.System.DBNull.Value
            Else
                command.Parameters(28).Value = CType(Flow,String)
            End If
            If (wm.HasValue = true) Then
                command.Parameters(29).Value = CType(wm.Value,Single)
            Else
                command.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (temperatura.HasValue = true) Then
                command.Parameters(30).Value = CType(temperatura.Value,Single)
            Else
                command.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (fml Is Nothing) Then
                command.Parameters(31).Value = Global.System.DBNull.Value
            Else
                command.Parameters(31).Value = CType(fml,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function UpdateQuery( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal valore3 As Global.System.Nullable(Of Single),  _
                    ByVal valore4 As Global.System.Nullable(Of Single),  _
                    ByVal valore5 As Global.System.Nullable(Of Single),  _
                    ByVal Aa1 As String,  _
                    ByVal Ab1 As String,  _
                    ByVal Ad1 As String,  _
                    ByVal Ar1 As String,  _
                    ByVal Aa2 As String,  _
                    ByVal Ab2 As String,  _
                    ByVal Ad2 As String,  _
                    ByVal Ar2 As String,  _
                    ByVal Aa3 As String,  _
                    ByVal Ab3 As String,  _
                    ByVal Ad3 As String,  _
                    ByVal Ar3 As String,  _
                    ByVal Aa4 As String,  _
                    ByVal Ab4 As String,  _
                    ByVal Ad4 As String,  _
                    ByVal Ar4 As String,  _
                    ByVal Aa5 As String,  _
                    ByVal Ab5 As String,  _
                    ByVal Ad5 As String,  _
                    ByVal Ar5 As String,  _
                    ByVal Flow As String,  _
                    ByVal wm As Global.System.Nullable(Of Single),  _
                    ByVal temperatura As Global.System.Nullable(Of Single),  _
                    ByVal fml As String,  _
                    ByVal id As Global.System.Nullable(Of Global.System.Guid)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                command.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                command.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore3.HasValue = true) Then
                command.Parameters(5).Value = CType(valore3.Value,Single)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (valore4.HasValue = true) Then
                command.Parameters(6).Value = CType(valore4.Value,Single)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (valore5.HasValue = true) Then
                command.Parameters(7).Value = CType(valore5.Value,Single)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Aa1 Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(Aa1,String)
            End If
            If (Ab1 Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(Ab1,String)
            End If
            If (Ad1 Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(Ad1,String)
            End If
            If (Ar1 Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(Ar1,String)
            End If
            If (Aa2 Is Nothing) Then
                command.Parameters(12).Value = Global.System.DBNull.Value
            Else
                command.Parameters(12).Value = CType(Aa2,String)
            End If
            If (Ab2 Is Nothing) Then
                command.Parameters(13).Value = Global.System.DBNull.Value
            Else
                command.Parameters(13).Value = CType(Ab2,String)
            End If
            If (Ad2 Is Nothing) Then
                command.Parameters(14).Value = Global.System.DBNull.Value
            Else
                command.Parameters(14).Value = CType(Ad2,String)
            End If
            If (Ar2 Is Nothing) Then
                command.Parameters(15).Value = Global.System.DBNull.Value
            Else
                command.Parameters(15).Value = CType(Ar2,String)
            End If
            If (Aa3 Is Nothing) Then
                command.Parameters(16).Value = Global.System.DBNull.Value
            Else
                command.Parameters(16).Value = CType(Aa3,String)
            End If
            If (Ab3 Is Nothing) Then
                command.Parameters(17).Value = Global.System.DBNull.Value
            Else
                command.Parameters(17).Value = CType(Ab3,String)
            End If
            If (Ad3 Is Nothing) Then
                command.Parameters(18).Value = Global.System.DBNull.Value
            Else
                command.Parameters(18).Value = CType(Ad3,String)
            End If
            If (Ar3 Is Nothing) Then
                command.Parameters(19).Value = Global.System.DBNull.Value
            Else
                command.Parameters(19).Value = CType(Ar3,String)
            End If
            If (Aa4 Is Nothing) Then
                command.Parameters(20).Value = Global.System.DBNull.Value
            Else
                command.Parameters(20).Value = CType(Aa4,String)
            End If
            If (Ab4 Is Nothing) Then
                command.Parameters(21).Value = Global.System.DBNull.Value
            Else
                command.Parameters(21).Value = CType(Ab4,String)
            End If
            If (Ad4 Is Nothing) Then
                command.Parameters(22).Value = Global.System.DBNull.Value
            Else
                command.Parameters(22).Value = CType(Ad4,String)
            End If
            If (Ar4 Is Nothing) Then
                command.Parameters(23).Value = Global.System.DBNull.Value
            Else
                command.Parameters(23).Value = CType(Ar4,String)
            End If
            If (Aa5 Is Nothing) Then
                command.Parameters(24).Value = Global.System.DBNull.Value
            Else
                command.Parameters(24).Value = CType(Aa5,String)
            End If
            If (Ab5 Is Nothing) Then
                command.Parameters(25).Value = Global.System.DBNull.Value
            Else
                command.Parameters(25).Value = CType(Ab5,String)
            End If
            If (Ad5 Is Nothing) Then
                command.Parameters(26).Value = Global.System.DBNull.Value
            Else
                command.Parameters(26).Value = CType(Ad5,String)
            End If
            If (Ar5 Is Nothing) Then
                command.Parameters(27).Value = Global.System.DBNull.Value
            Else
                command.Parameters(27).Value = CType(Ar5,String)
            End If
            If (Flow Is Nothing) Then
                command.Parameters(28).Value = Global.System.DBNull.Value
            Else
                command.Parameters(28).Value = CType(Flow,String)
            End If
            If (wm.HasValue = true) Then
                command.Parameters(29).Value = CType(wm.Value,Single)
            Else
                command.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (temperatura.HasValue = true) Then
                command.Parameters(30).Value = CType(temperatura.Value,Single)
            Else
                command.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (fml Is Nothing) Then
                command.Parameters(31).Value = Global.System.DBNull.Value
            Else
                command.Parameters(31).Value = CType(fml,String)
            End If
            If (id.HasValue = true) Then
                command.Parameters(32).Value = CType(id.Value,System.Guid)
            Else
                command.Parameters(32).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ld_log_tamponeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ld_log_tampone"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("identificativo", "identificativo")
            tableMapping.ColumnMappings.Add("id_485", "id_485")
            tableMapping.ColumnMappings.Add("data", "data")
            tableMapping.ColumnMappings.Add("valore1", "valore1")
            tableMapping.ColumnMappings.Add("valore2", "valore2")
            tableMapping.ColumnMappings.Add("valore3", "valore3")
            tableMapping.ColumnMappings.Add("flusso", "flusso")
            tableMapping.ColumnMappings.Add("feed_limit_ph", "feed_limit_ph")
            tableMapping.ColumnMappings.Add("feed_limit_cl", "feed_limit_cl")
            tableMapping.ColumnMappings.Add("dos_alarm_cl", "dos_alarm_cl")
            tableMapping.ColumnMappings.Add("dos_alarm_ph", "dos_alarm_ph")
            tableMapping.ColumnMappings.Add("probe_fail_ph", "probe_fail_ph")
            tableMapping.ColumnMappings.Add("probe_fail_cl", "probe_fail_cl")
            tableMapping.ColumnMappings.Add("livello1", "livello1")
            tableMapping.ColumnMappings.Add("livello2", "livello2")
            tableMapping.ColumnMappings.Add("temperatura", "temperatura")
            tableMapping.ColumnMappings.Add("livello3", "livello3")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ld_log_tampone] ([id], [identificativo], [id_485], [data], [valore1]"& _ 
                ", [valore2], [valore3], [flusso], [feed_limit_ph], [feed_limit_cl], [dos_alarm_c"& _ 
                "l], [dos_alarm_ph], [probe_fail_ph], [probe_fail_cl], [livello1], [livello2], [t"& _ 
                "emperatura], [livello3]) VALUES (@id, @identificativo, @id_485, @data, @valore1,"& _ 
                " @valore2, @valore3, @flusso, @feed_limit_ph, @feed_limit_cl, @dos_alarm_cl, @do"& _ 
                "s_alarm_ph, @probe_fail_ph, @probe_fail_cl, @livello1, @livello2, @temperatura, "& _ 
                "@livello3)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore3", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valore3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flusso", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "flusso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@feed_limit_ph", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "feed_limit_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@feed_limit_cl", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "feed_limit_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_cl", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_ph", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_ph", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_cl", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "livello1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "livello2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "livello3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.OldCommunication2020.My.MySettings.Default.max_5ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     id, identificativo, id_485, data, valore1, valore2, valore3, flusso, f"& _ 
                "eed_limit_ph, feed_limit_cl, dos_alarm_cl, dos_alarm_ph, probe_fail_ph, probe_fa"& _ 
                "il_cl, livello1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      livello2, temperatura, livello3"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM  "& _ 
                "       ld_log_tampone"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (identificativo = @identificativo) AND (id_485 "& _ 
                "= @id_485)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM ld_log_tampone"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (identificativo = @identificativo) AND (id_"& _ 
                "485 = @id_485)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "INSERT INTO ld_log_tampone"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (id, identificativo, id_485, da"& _ 
                "ta, valore1, valore2, valore3, flusso, feed_limit_ph, feed_limit_cl, dos_alarm_c"& _ 
                "l, dos_alarm_ph, probe_fail_ph, probe_fail_cl, livello1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                " livello2, temperatura, livello3)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES     (NEWID(),@identificativo,@id_485,@"& _ 
                "data,@valore1,@valore2,@valore3,@flusso,@feed_limit_ph,@feed_limit_cl,@dos_alarm"& _ 
                "_cl,@dos_alarm_ph,@probe_fail_ph,@probe_fail_cl,@livello1,@livello2,@temperatura"& _ 
                ",@livello3)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore3", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flusso", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "flusso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@feed_limit_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "feed_limit_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@feed_limit_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "feed_limit_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello3", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "UPDATE    ld_log_tampone"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET              identificativo = @identificativo, id_4"& _ 
                "85 = @id_485, data = @data, valore1 = @valore1, valore2 = @valore2, valore3 = @v"& _ 
                "alore3, flusso = @flusso, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      feed_limit_ph = @feed_limit_ph"& _ 
                ", feed_limit_cl = @feed_limit_cl, dos_alarm_cl = @dos_alarm_cl, dos_alarm_ph = @"& _ 
                "dos_alarm_ph, probe_fail_ph = @probe_fail_ph, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      probe_fail"& _ 
                "_cl = @probe_fail_cl, livello1 = @livello1, livello2 = @livello2, temperatura = "& _ 
                "@temperatura, livello3 = @livello3"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (id = @id)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore3", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flusso", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "flusso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@feed_limit_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "feed_limit_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@feed_limit_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "feed_limit_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello3", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As log_db.ld_log_tamponeDataTable, ByVal identificativo As String, ByVal id_485 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal identificativo As String, ByVal id_485 As String) As log_db.ld_log_tamponeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            Dim dataTable As log_db.ld_log_tamponeDataTable = New log_db.ld_log_tamponeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As log_db.ld_log_tamponeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As log_db) As Integer
            Return Me.Adapter.Update(dataSet, "ld_log_tampone")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal id As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal valore3 As Global.System.Nullable(Of Single),  _
                    ByVal flusso As String,  _
                    ByVal feed_limit_ph As String,  _
                    ByVal feed_limit_cl As String,  _
                    ByVal dos_alarm_cl As String,  _
                    ByVal dos_alarm_ph As String,  _
                    ByVal probe_fail_ph As String,  _
                    ByVal probe_fail_cl As String,  _
                    ByVal livello1 As String,  _
                    ByVal livello2 As String,  _
                    ByVal temperatura As Global.System.Nullable(Of Single),  _
                    ByVal livello3 As String) As Integer
            If (id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(id.Value,System.Guid)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (identificativo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(data.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(valore1.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(valore2.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (valore3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(valore3.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (flusso Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(flusso,String)
            End If
            If (feed_limit_ph Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(feed_limit_ph,String)
            End If
            If (feed_limit_cl Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(feed_limit_cl,String)
            End If
            If (dos_alarm_cl Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(dos_alarm_cl,String)
            End If
            If (dos_alarm_ph Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(dos_alarm_ph,String)
            End If
            If (probe_fail_ph Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(probe_fail_ph,String)
            End If
            If (probe_fail_cl Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(probe_fail_cl,String)
            End If
            If (livello1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(livello1,String)
            End If
            If (livello2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(livello2,String)
            End If
            If (temperatura.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(temperatura.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (livello3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(livello3,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteQuery(ByVal identificativo As String, ByVal id_485 As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertQuery( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal valore3 As Global.System.Nullable(Of Single),  _
                    ByVal flusso As String,  _
                    ByVal feed_limit_ph As String,  _
                    ByVal feed_limit_cl As String,  _
                    ByVal dos_alarm_cl As String,  _
                    ByVal dos_alarm_ph As String,  _
                    ByVal probe_fail_ph As String,  _
                    ByVal probe_fail_cl As String,  _
                    ByVal livello1 As String,  _
                    ByVal livello2 As String,  _
                    ByVal temperatura As Global.System.Nullable(Of Single),  _
                    ByVal livello3 As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                command.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                command.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore3.HasValue = true) Then
                command.Parameters(5).Value = CType(valore3.Value,Single)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (flusso Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(flusso,String)
            End If
            If (feed_limit_ph Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(feed_limit_ph,String)
            End If
            If (feed_limit_cl Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(feed_limit_cl,String)
            End If
            If (dos_alarm_cl Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(dos_alarm_cl,String)
            End If
            If (dos_alarm_ph Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(dos_alarm_ph,String)
            End If
            If (probe_fail_ph Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(probe_fail_ph,String)
            End If
            If (probe_fail_cl Is Nothing) Then
                command.Parameters(12).Value = Global.System.DBNull.Value
            Else
                command.Parameters(12).Value = CType(probe_fail_cl,String)
            End If
            If (livello1 Is Nothing) Then
                command.Parameters(13).Value = Global.System.DBNull.Value
            Else
                command.Parameters(13).Value = CType(livello1,String)
            End If
            If (livello2 Is Nothing) Then
                command.Parameters(14).Value = Global.System.DBNull.Value
            Else
                command.Parameters(14).Value = CType(livello2,String)
            End If
            If (temperatura.HasValue = true) Then
                command.Parameters(15).Value = CType(temperatura.Value,Single)
            Else
                command.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (livello3 Is Nothing) Then
                command.Parameters(16).Value = Global.System.DBNull.Value
            Else
                command.Parameters(16).Value = CType(livello3,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function UpdateQuery( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal valore3 As Global.System.Nullable(Of Single),  _
                    ByVal flusso As String,  _
                    ByVal feed_limit_ph As String,  _
                    ByVal feed_limit_cl As String,  _
                    ByVal dos_alarm_cl As String,  _
                    ByVal dos_alarm_ph As String,  _
                    ByVal probe_fail_ph As String,  _
                    ByVal probe_fail_cl As String,  _
                    ByVal livello1 As String,  _
                    ByVal livello2 As String,  _
                    ByVal temperatura As Global.System.Nullable(Of Single),  _
                    ByVal livello3 As String,  _
                    ByVal id As Global.System.Nullable(Of Global.System.Guid)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                command.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                command.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore3.HasValue = true) Then
                command.Parameters(5).Value = CType(valore3.Value,Single)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (flusso Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(flusso,String)
            End If
            If (feed_limit_ph Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(feed_limit_ph,String)
            End If
            If (feed_limit_cl Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(feed_limit_cl,String)
            End If
            If (dos_alarm_cl Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(dos_alarm_cl,String)
            End If
            If (dos_alarm_ph Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(dos_alarm_ph,String)
            End If
            If (probe_fail_ph Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(probe_fail_ph,String)
            End If
            If (probe_fail_cl Is Nothing) Then
                command.Parameters(12).Value = Global.System.DBNull.Value
            Else
                command.Parameters(12).Value = CType(probe_fail_cl,String)
            End If
            If (livello1 Is Nothing) Then
                command.Parameters(13).Value = Global.System.DBNull.Value
            Else
                command.Parameters(13).Value = CType(livello1,String)
            End If
            If (livello2 Is Nothing) Then
                command.Parameters(14).Value = Global.System.DBNull.Value
            Else
                command.Parameters(14).Value = CType(livello2,String)
            End If
            If (temperatura.HasValue = true) Then
                command.Parameters(15).Value = CType(temperatura.Value,Single)
            Else
                command.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (livello3 Is Nothing) Then
                command.Parameters(16).Value = Global.System.DBNull.Value
            Else
                command.Parameters(16).Value = CType(livello3,String)
            End If
            If (id.HasValue = true) Then
                command.Parameters(17).Value = CType(id.Value,System.Guid)
            Else
                command.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class log_tower_tamponeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "log_tower_tampone"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("identificativo", "identificativo")
            tableMapping.ColumnMappings.Add("id_485", "id_485")
            tableMapping.ColumnMappings.Add("data", "data")
            tableMapping.ColumnMappings.Add("valore1", "valore1")
            tableMapping.ColumnMappings.Add("valore2", "valore2")
            tableMapping.ColumnMappings.Add("valore3", "valore3")
            tableMapping.ColumnMappings.Add("temperatura", "temperatura")
            tableMapping.ColumnMappings.Add("cd_high", "cd_high")
            tableMapping.ColumnMappings.Add("cd_low", "cd_low")
            tableMapping.ColumnMappings.Add("bleed_timeout", "bleed_timeout")
            tableMapping.ColumnMappings.Add("flow", "flow")
            tableMapping.ColumnMappings.Add("level_inhibitor", "level_inhibitor")
            tableMapping.ColumnMappings.Add("level_prebiocide1", "level_prebiocide1")
            tableMapping.ColumnMappings.Add("level_prebiocide2", "level_prebiocide2")
            tableMapping.ColumnMappings.Add("level_biocide1", "level_biocide1")
            tableMapping.ColumnMappings.Add("level_biocide2", "level_biocide2")
            tableMapping.ColumnMappings.Add("ch2_high", "ch2_high")
            tableMapping.ColumnMappings.Add("ch2_low", "ch2_low")
            tableMapping.ColumnMappings.Add("ch2_level", "ch2_level")
            tableMapping.ColumnMappings.Add("ch3_high", "ch3_high")
            tableMapping.ColumnMappings.Add("ch3_low", "ch3_low")
            tableMapping.ColumnMappings.Add("ch3_level", "ch3_level")
            tableMapping.ColumnMappings.Add("tot_input", "tot_input")
            tableMapping.ColumnMappings.Add("tot_bleed", "tot_bleed")
            tableMapping.ColumnMappings.Add("Out_inhibitore_digital", "Out_inhibitore_digital")
            tableMapping.ColumnMappings.Add("Out_inhibitore_prop", "Out_inhibitore_prop")
            tableMapping.ColumnMappings.Add("Out_bleed", "Out_bleed")
            tableMapping.ColumnMappings.Add("Out_prebiocide1", "Out_prebiocide1")
            tableMapping.ColumnMappings.Add("Out_prebiocide2", "Out_prebiocide2")
            tableMapping.ColumnMappings.Add("Out_biocide1", "Out_biocide1")
            tableMapping.ColumnMappings.Add("Out_biocide2", "Out_biocide2")
            tableMapping.ColumnMappings.Add("Ch2_prop", "Ch2_prop")
            tableMapping.ColumnMappings.Add("Ch2_dig", "Ch2_dig")
            tableMapping.ColumnMappings.Add("Ch3_prop", "Ch3_prop")
            tableMapping.ColumnMappings.Add("Ch3_dig", "Ch3_dig")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [log_tower_tampone] ([id]) VALUES (@id)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.OldCommunication2020.My.MySettings.Default.max_5ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     id, identificativo, id_485, data, valore1, valore2, valore3, temperatu"& _ 
                "ra, cd_high, cd_low, bleed_timeout, flow, level_inhibitor, level_prebiocide1, le"& _ 
                "vel_prebiocide2, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      level_biocide1, level_biocide2, ch2_hig"& _ 
                "h, ch2_low, ch2_level, ch3_high, ch3_low, ch3_level, tot_input, tot_bleed, Out_i"& _ 
                "nhibitore_digital, Out_inhibitore_prop, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Out_bleed, Out_p"& _ 
                "rebiocide1, Out_prebiocide2, Out_biocide1, Out_biocide2, Ch2_prop, Ch2_dig, Ch3_"& _ 
                "prop, Ch3_dig"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         log_tower_tampone"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (identificativo = @iden"& _ 
                "tificativo) AND (id_485 = @id_485)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM log_tower_tampone"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (identificativo = @identificativo) AND ("& _ 
                "id_485 = @id_485)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "INSERT INTO log_tower_tampone"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (id, identificativo, id_485,"& _ 
                " data, valore1, valore2, valore3, temperatura, cd_high, cd_low, bleed_timeout, f"& _ 
                "low, level_inhibitor, level_prebiocide1, level_prebiocide2, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "    level_biocide1, level_biocide2, ch2_high, ch2_low, ch2_level, ch3_high, ch3_"& _ 
                "low, ch3_level, tot_input, tot_bleed, Out_inhibitore_digital, Out_inhibitore_pro"& _ 
                "p, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Out_bleed, Out_prebiocide1, Out_prebiocide2, Out_bioc"& _ 
                "ide1, Out_biocide2, Ch2_prop, Ch2_dig, Ch3_prop, Ch3_dig)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES     (NEWID(),@"& _ 
                "identificativo,@id_485,@data,@valore1,@valore2,@valore3,@temperatura,@cd_high,@c"& _ 
                "d_low,@bleed_timeout,@flow,@level_inhibitor,@level_prebiocide1,@level_prebiocide"& _ 
                "2,@level_biocide1,@level_biocide2,@ch2_high,@ch2_low,@ch2_level,@ch3_high,@ch3_l"& _ 
                "ow,@ch3_level,@tot_in,@tot_bl,@Out_inhibitore_digital,@Out_inhibitore_prop,@Out_"& _ 
                "bleed,@Out_prebiocide1,@Out_prebiocide2,@Out_biocide1,@Out_biocide2,@Ch2_prop,@C"& _ 
                "h2_dig,@Ch3_prop,@Ch3_dig)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore3", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_high", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_high", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_low", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_low", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bleed_timeout", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "bleed_timeout", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flow", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "flow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_inhibitor", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_inhibitor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_prebiocide1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_prebiocide1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_prebiocide2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_prebiocide2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_biocide1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_biocide1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_biocide2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_biocide2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch2_high", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch2_high", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch2_low", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch2_low", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch2_level", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch2_level", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch3_high", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch3_high", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch3_low", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch3_low", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch3_level", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch3_level", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tot_in", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "tot_input", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tot_bl", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "tot_bleed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Out_inhibitore_digital", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Out_inhibitore_digital", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Out_inhibitore_prop", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Out_inhibitore_prop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Out_bleed", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Out_bleed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Out_prebiocide1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Out_prebiocide1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Out_prebiocide2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Out_prebiocide2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Out_biocide1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Out_biocide1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Out_biocide2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Out_biocide2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ch2_prop", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Ch2_prop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ch2_dig", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Ch2_dig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ch3_prop", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Ch3_prop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ch3_dig", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "Ch3_dig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "UPDATE    log_tower_tampone"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET              identificativo = @identificativo, i"& _ 
                "d_485 = @id_485, data = @data, valore1 = @valore1, valore2 = @valore2, valore3 ="& _ 
                " @valore3, temperatura = @temperatura, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      cd_high = @cd_hig"& _ 
                "h, cd_low = @cd_low, bleed_timeout = @bleed_timeout, flow = @flow, level_inhibit"& _ 
                "or = @level_inhibitor, level_prebiocide1 = @level_prebiocide1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "       level_prebiocide2 = @level_prebiocide2, level_biocide1 = @level_biocide1,"& _ 
                " level_biocide2 = @level_biocide2, ch2_high = @ch2_high, ch2_low = @ch2_low, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                     ch2_level = @ch2_level, ch3_high = @ch3_high, ch3_low = @ch"& _ 
                "3_low, ch3_level = @ch3_level, tot_input = @tot_input, tot_bleed = @tot_bleed"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"W"& _ 
                "HERE     (id = @id)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore3", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_high", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_high", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cd_low", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "cd_low", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bleed_timeout", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "bleed_timeout", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flow", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "flow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_inhibitor", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_inhibitor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_prebiocide1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_prebiocide1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_prebiocide2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_prebiocide2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_biocide1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_biocide1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_biocide2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "level_biocide2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch2_high", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch2_high", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch2_low", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch2_low", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch2_level", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch2_level", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch3_high", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch3_high", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch3_low", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch3_low", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ch3_level", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ch3_level", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tot_input", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "tot_input", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tot_bleed", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "tot_bleed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As log_db.log_tower_tamponeDataTable, ByVal identificativo As String, ByVal id_485 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal identificativo As String, ByVal id_485 As String) As log_db.log_tower_tamponeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            Dim dataTable As log_db.log_tower_tamponeDataTable = New log_db.log_tower_tamponeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As log_db.log_tower_tamponeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As log_db) As Integer
            Return Me.Adapter.Update(dataSet, "log_tower_tampone")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Global.System.Nullable(Of Global.System.Guid)) As Integer
            If (id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(id.Value,System.Guid)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteQuery(ByVal identificativo As String, ByVal id_485 As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function InsertQuery( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal valore3 As Global.System.Nullable(Of Single),  _
                    ByVal temperatura As String,  _
                    ByVal cd_high As String,  _
                    ByVal cd_low As String,  _
                    ByVal bleed_timeout As String,  _
                    ByVal flow As String,  _
                    ByVal level_inhibitor As String,  _
                    ByVal level_prebiocide1 As String,  _
                    ByVal level_prebiocide2 As String,  _
                    ByVal level_biocide1 As String,  _
                    ByVal level_biocide2 As String,  _
                    ByVal ch2_high As String,  _
                    ByVal ch2_low As String,  _
                    ByVal ch2_level As String,  _
                    ByVal ch3_high As String,  _
                    ByVal ch3_low As String,  _
                    ByVal ch3_level As String,  _
                    ByVal tot_in As String,  _
                    ByVal tot_bl As String,  _
                    ByVal Out_inhibitore_digital As String,  _
                    ByVal Out_inhibitore_prop As String,  _
                    ByVal Out_bleed As String,  _
                    ByVal Out_prebiocide1 As String,  _
                    ByVal Out_prebiocide2 As String,  _
                    ByVal Out_biocide1 As String,  _
                    ByVal Out_biocide2 As String,  _
                    ByVal Ch2_prop As String,  _
                    ByVal Ch2_dig As String,  _
                    ByVal Ch3_prop As String,  _
                    ByVal Ch3_dig As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                command.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                command.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore3.HasValue = true) Then
                command.Parameters(5).Value = CType(valore3.Value,Single)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (temperatura Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(temperatura,String)
            End If
            If (cd_high Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(cd_high,String)
            End If
            If (cd_low Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(cd_low,String)
            End If
            If (bleed_timeout Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(bleed_timeout,String)
            End If
            If (flow Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(flow,String)
            End If
            If (level_inhibitor Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(level_inhibitor,String)
            End If
            If (level_prebiocide1 Is Nothing) Then
                command.Parameters(12).Value = Global.System.DBNull.Value
            Else
                command.Parameters(12).Value = CType(level_prebiocide1,String)
            End If
            If (level_prebiocide2 Is Nothing) Then
                command.Parameters(13).Value = Global.System.DBNull.Value
            Else
                command.Parameters(13).Value = CType(level_prebiocide2,String)
            End If
            If (level_biocide1 Is Nothing) Then
                command.Parameters(14).Value = Global.System.DBNull.Value
            Else
                command.Parameters(14).Value = CType(level_biocide1,String)
            End If
            If (level_biocide2 Is Nothing) Then
                command.Parameters(15).Value = Global.System.DBNull.Value
            Else
                command.Parameters(15).Value = CType(level_biocide2,String)
            End If
            If (ch2_high Is Nothing) Then
                command.Parameters(16).Value = Global.System.DBNull.Value
            Else
                command.Parameters(16).Value = CType(ch2_high,String)
            End If
            If (ch2_low Is Nothing) Then
                command.Parameters(17).Value = Global.System.DBNull.Value
            Else
                command.Parameters(17).Value = CType(ch2_low,String)
            End If
            If (ch2_level Is Nothing) Then
                command.Parameters(18).Value = Global.System.DBNull.Value
            Else
                command.Parameters(18).Value = CType(ch2_level,String)
            End If
            If (ch3_high Is Nothing) Then
                command.Parameters(19).Value = Global.System.DBNull.Value
            Else
                command.Parameters(19).Value = CType(ch3_high,String)
            End If
            If (ch3_low Is Nothing) Then
                command.Parameters(20).Value = Global.System.DBNull.Value
            Else
                command.Parameters(20).Value = CType(ch3_low,String)
            End If
            If (ch3_level Is Nothing) Then
                command.Parameters(21).Value = Global.System.DBNull.Value
            Else
                command.Parameters(21).Value = CType(ch3_level,String)
            End If
            If (tot_in Is Nothing) Then
                command.Parameters(22).Value = Global.System.DBNull.Value
            Else
                command.Parameters(22).Value = CType(tot_in,String)
            End If
            If (tot_bl Is Nothing) Then
                command.Parameters(23).Value = Global.System.DBNull.Value
            Else
                command.Parameters(23).Value = CType(tot_bl,String)
            End If
            If (Out_inhibitore_digital Is Nothing) Then
                command.Parameters(24).Value = Global.System.DBNull.Value
            Else
                command.Parameters(24).Value = CType(Out_inhibitore_digital,String)
            End If
            If (Out_inhibitore_prop Is Nothing) Then
                command.Parameters(25).Value = Global.System.DBNull.Value
            Else
                command.Parameters(25).Value = CType(Out_inhibitore_prop,String)
            End If
            If (Out_bleed Is Nothing) Then
                command.Parameters(26).Value = Global.System.DBNull.Value
            Else
                command.Parameters(26).Value = CType(Out_bleed,String)
            End If
            If (Out_prebiocide1 Is Nothing) Then
                command.Parameters(27).Value = Global.System.DBNull.Value
            Else
                command.Parameters(27).Value = CType(Out_prebiocide1,String)
            End If
            If (Out_prebiocide2 Is Nothing) Then
                command.Parameters(28).Value = Global.System.DBNull.Value
            Else
                command.Parameters(28).Value = CType(Out_prebiocide2,String)
            End If
            If (Out_biocide1 Is Nothing) Then
                command.Parameters(29).Value = Global.System.DBNull.Value
            Else
                command.Parameters(29).Value = CType(Out_biocide1,String)
            End If
            If (Out_biocide2 Is Nothing) Then
                command.Parameters(30).Value = Global.System.DBNull.Value
            Else
                command.Parameters(30).Value = CType(Out_biocide2,String)
            End If
            If (Ch2_prop Is Nothing) Then
                command.Parameters(31).Value = Global.System.DBNull.Value
            Else
                command.Parameters(31).Value = CType(Ch2_prop,String)
            End If
            If (Ch2_dig Is Nothing) Then
                command.Parameters(32).Value = Global.System.DBNull.Value
            Else
                command.Parameters(32).Value = CType(Ch2_dig,String)
            End If
            If (Ch3_prop Is Nothing) Then
                command.Parameters(33).Value = Global.System.DBNull.Value
            Else
                command.Parameters(33).Value = CType(Ch3_prop,String)
            End If
            If (Ch3_dig Is Nothing) Then
                command.Parameters(34).Value = Global.System.DBNull.Value
            Else
                command.Parameters(34).Value = CType(Ch3_dig,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function UpdateQuery( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal valore3 As Global.System.Nullable(Of Single),  _
                    ByVal temperatura As String,  _
                    ByVal cd_high As String,  _
                    ByVal cd_low As String,  _
                    ByVal bleed_timeout As String,  _
                    ByVal flow As String,  _
                    ByVal level_inhibitor As String,  _
                    ByVal level_prebiocide1 As String,  _
                    ByVal level_prebiocide2 As String,  _
                    ByVal level_biocide1 As String,  _
                    ByVal level_biocide2 As String,  _
                    ByVal ch2_high As String,  _
                    ByVal ch2_low As String,  _
                    ByVal ch2_level As String,  _
                    ByVal ch3_high As String,  _
                    ByVal ch3_low As String,  _
                    ByVal ch3_level As String,  _
                    ByVal tot_input As String,  _
                    ByVal tot_bleed As String,  _
                    ByVal id As Global.System.Nullable(Of Global.System.Guid)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                command.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                command.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore3.HasValue = true) Then
                command.Parameters(5).Value = CType(valore3.Value,Single)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (temperatura Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(temperatura,String)
            End If
            If (cd_high Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(cd_high,String)
            End If
            If (cd_low Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(cd_low,String)
            End If
            If (bleed_timeout Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(bleed_timeout,String)
            End If
            If (flow Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(flow,String)
            End If
            If (level_inhibitor Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(level_inhibitor,String)
            End If
            If (level_prebiocide1 Is Nothing) Then
                command.Parameters(12).Value = Global.System.DBNull.Value
            Else
                command.Parameters(12).Value = CType(level_prebiocide1,String)
            End If
            If (level_prebiocide2 Is Nothing) Then
                command.Parameters(13).Value = Global.System.DBNull.Value
            Else
                command.Parameters(13).Value = CType(level_prebiocide2,String)
            End If
            If (level_biocide1 Is Nothing) Then
                command.Parameters(14).Value = Global.System.DBNull.Value
            Else
                command.Parameters(14).Value = CType(level_biocide1,String)
            End If
            If (level_biocide2 Is Nothing) Then
                command.Parameters(15).Value = Global.System.DBNull.Value
            Else
                command.Parameters(15).Value = CType(level_biocide2,String)
            End If
            If (ch2_high Is Nothing) Then
                command.Parameters(16).Value = Global.System.DBNull.Value
            Else
                command.Parameters(16).Value = CType(ch2_high,String)
            End If
            If (ch2_low Is Nothing) Then
                command.Parameters(17).Value = Global.System.DBNull.Value
            Else
                command.Parameters(17).Value = CType(ch2_low,String)
            End If
            If (ch2_level Is Nothing) Then
                command.Parameters(18).Value = Global.System.DBNull.Value
            Else
                command.Parameters(18).Value = CType(ch2_level,String)
            End If
            If (ch3_high Is Nothing) Then
                command.Parameters(19).Value = Global.System.DBNull.Value
            Else
                command.Parameters(19).Value = CType(ch3_high,String)
            End If
            If (ch3_low Is Nothing) Then
                command.Parameters(20).Value = Global.System.DBNull.Value
            Else
                command.Parameters(20).Value = CType(ch3_low,String)
            End If
            If (ch3_level Is Nothing) Then
                command.Parameters(21).Value = Global.System.DBNull.Value
            Else
                command.Parameters(21).Value = CType(ch3_level,String)
            End If
            If (tot_input Is Nothing) Then
                command.Parameters(22).Value = Global.System.DBNull.Value
            Else
                command.Parameters(22).Value = CType(tot_input,String)
            End If
            If (tot_bleed Is Nothing) Then
                command.Parameters(23).Value = Global.System.DBNull.Value
            Else
                command.Parameters(23).Value = CType(tot_bleed,String)
            End If
            If (id.HasValue = true) Then
                command.Parameters(24).Value = CType(id.Value,System.Guid)
            Else
                command.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class wd_log_tamponeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "wd_log_tampone"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("identificativo", "identificativo")
            tableMapping.ColumnMappings.Add("id_485", "id_485")
            tableMapping.ColumnMappings.Add("data", "data")
            tableMapping.ColumnMappings.Add("valore1", "valore1")
            tableMapping.ColumnMappings.Add("valore2", "valore2")
            tableMapping.ColumnMappings.Add("flusso", "flusso")
            tableMapping.ColumnMappings.Add("dos_alarm_cl", "dos_alarm_cl")
            tableMapping.ColumnMappings.Add("dos_alarm_ph", "dos_alarm_ph")
            tableMapping.ColumnMappings.Add("probe_fail_ph", "probe_fail_ph")
            tableMapping.ColumnMappings.Add("probe_fail_cl", "probe_fail_cl")
            tableMapping.ColumnMappings.Add("livello1", "livello1")
            tableMapping.ColumnMappings.Add("livello2", "livello2")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [wd_log_tampone] ([id], [identificativo], [id_485], [data], [valore1]"& _ 
                ", [valore2], [flusso], [dos_alarm_cl], [dos_alarm_ph], [probe_fail_ph], [probe_f"& _ 
                "ail_cl], [livello1], [livello2]) VALUES (@id, @identificativo, @id_485, @data, @"& _ 
                "valore1, @valore2, @flusso, @dos_alarm_cl, @dos_alarm_ph, @probe_fail_ph, @probe"& _ 
                "_fail_cl, @livello1, @livello2)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flusso", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "flusso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_cl", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_ph", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_ph", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_cl", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "livello1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "livello2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.OldCommunication2020.My.MySettings.Default.max_5ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     id, identificativo, id_485, data, valore1, valore2, flusso, dos_alarm_"& _ 
                "cl, dos_alarm_ph, probe_fail_ph, probe_fail_cl, livello1, livello2"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM        "& _ 
                " wd_log_tampone"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (identificativo = @identificativo) AND (id_485 = @id_"& _ 
                "485)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM wd_log_tampone"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (identificativo = @identificativo) AND (id_"& _ 
                "485 = @id_485)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "INSERT INTO wd_log_tampone"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (id, identificativo, id_485, da"& _ 
                "ta, valore1, valore2, flusso, dos_alarm_cl, dos_alarm_ph, probe_fail_ph, probe_f"& _ 
                "ail_cl, livello1, livello2)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES     (NEWID(),@identificativo,@id_485,@data,@"& _ 
                "valore1,@valore2,@flusso,@dos_alarm_cl,@dos_alarm_ph,@probe_fail_ph,@probe_fail_"& _ 
                "cl,@livello1,@livello2)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flusso", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "flusso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "UPDATE    wd_log_tampone"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET              identificativo = @identificativo, id_4"& _ 
                "85 = @id_485, data = @data, valore1 = @valore1, valore2 = @valore2, flusso = @fl"& _ 
                "usso, dos_alarm_cl = @dos_alarm_cl, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      dos_alarm_ph = @dos_"& _ 
                "alarm_ph, probe_fail_ph = @probe_fail_ph, probe_fail_cl = @probe_fail_cl, livell"& _ 
                "o1 = @livello1, livello2 = @livello2"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (id = @id)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flusso", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "flusso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_ph", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_cl", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello1", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello2", Global.System.Data.SqlDbType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "livello2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As log_db.wd_log_tamponeDataTable, ByVal identificativo As String, ByVal id_485 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal identificativo As String, ByVal id_485 As String) As log_db.wd_log_tamponeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            Dim dataTable As log_db.wd_log_tamponeDataTable = New log_db.wd_log_tamponeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As log_db.wd_log_tamponeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As log_db) As Integer
            Return Me.Adapter.Update(dataSet, "wd_log_tampone")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Global.System.Nullable(Of Global.System.Guid), ByVal identificativo As String, ByVal id_485 As String, ByVal data As Global.System.Nullable(Of Date), ByVal valore1 As Global.System.Nullable(Of Single), ByVal valore2 As Global.System.Nullable(Of Single), ByVal flusso As String, ByVal dos_alarm_cl As String, ByVal dos_alarm_ph As String, ByVal probe_fail_ph As String, ByVal probe_fail_cl As String, ByVal livello1 As String, ByVal livello2 As String) As Integer
            If (id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(id.Value,System.Guid)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (identificativo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(data.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(valore1.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(valore2.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (flusso Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(flusso,String)
            End If
            If (dos_alarm_cl Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(dos_alarm_cl,String)
            End If
            If (dos_alarm_ph Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(dos_alarm_ph,String)
            End If
            If (probe_fail_ph Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(probe_fail_ph,String)
            End If
            If (probe_fail_cl Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(probe_fail_cl,String)
            End If
            If (livello1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(livello1,String)
            End If
            If (livello2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(livello2,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteQuery(ByVal identificativo As String, ByVal id_485 As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertQuery(ByVal identificativo As String, ByVal id_485 As String, ByVal data As Global.System.Nullable(Of Date), ByVal valore1 As Global.System.Nullable(Of Single), ByVal valore2 As Global.System.Nullable(Of Single), ByVal flusso As String, ByVal dos_alarm_cl As String, ByVal dos_alarm_ph As String, ByVal probe_fail_ph As String, ByVal probe_fail_cl As String, ByVal livello1 As String, ByVal livello2 As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                command.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                command.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (flusso Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(flusso,String)
            End If
            If (dos_alarm_cl Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(dos_alarm_cl,String)
            End If
            If (dos_alarm_ph Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(dos_alarm_ph,String)
            End If
            If (probe_fail_ph Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(probe_fail_ph,String)
            End If
            If (probe_fail_cl Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(probe_fail_cl,String)
            End If
            If (livello1 Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(livello1,String)
            End If
            If (livello2 Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(livello2,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function UpdateQuery(ByVal identificativo As String, ByVal id_485 As String, ByVal data As Global.System.Nullable(Of Date), ByVal valore1 As Global.System.Nullable(Of Single), ByVal valore2 As Global.System.Nullable(Of Single), ByVal flusso As String, ByVal dos_alarm_cl As String, ByVal dos_alarm_ph As String, ByVal probe_fail_ph As String, ByVal probe_fail_cl As String, ByVal livello1 As String, ByVal livello2 As String, ByVal id As Global.System.Nullable(Of Global.System.Guid)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                command.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                command.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (flusso Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(flusso,String)
            End If
            If (dos_alarm_cl Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(dos_alarm_cl,String)
            End If
            If (dos_alarm_ph Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(dos_alarm_ph,String)
            End If
            If (probe_fail_ph Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(probe_fail_ph,String)
            End If
            If (probe_fail_cl Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(probe_fail_cl,String)
            End If
            If (livello1 Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(livello1,String)
            End If
            If (livello2 Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(livello2,String)
            End If
            If (id.HasValue = true) Then
                command.Parameters(12).Value = CType(id.Value,System.Guid)
            Else
                command.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class wh_logTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "wh_log"
            tableMapping.ColumnMappings.Add("id", "id")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [wh_log] ([id]) VALUES (@id)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.OldCommunication2020.My.MySettings.Default.max_5ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     id"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         wh_log"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (identificativo = @identificativo) "& _ 
                "AND (id_485 = @id_485) AND (data = @data) AND (valore1 = @valore1) AND (valore2 "& _ 
                "= @valore2) AND (flusso = @flusso) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (dos_alarm_cl = @"& _ 
                "dos_alarm_cl) AND (dos_alarm_ph = @dos_alarm_ph) AND (probe_fail_ph = @probe_fai"& _ 
                "l_ph) AND (probe_fail_cl = @probe_fail_cl) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (livello1"& _ 
                " = @livello1) AND (livello2 = @livello2) AND (timer_filtro = @timer_filtro) AND "& _ 
                "(timer_sonda_ph = @timer_sonda_ph) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (timer_sonda_mv ="& _ 
                " @timer_sonda_mv) AND (timer_pagamento = @timer_pagamento) AND (timer_manutenzio"& _ 
                "ne = @timer_manutenzione) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (stato_pulse1_ch1 = @stato"& _ 
                "_pulse1_ch1) AND (stato_pulse2_ch1 = @stato_pulse2_ch1) AND (stato_pulse_ch2 = @"& _ 
                "stato_pulse_ch2) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (stato_rele_ch1 = @stato_rele_ch1) "& _ 
                "AND (stato_rele_ch2 = @stato_rele_ch2) AND (stby = @stby)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flusso", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "flusso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_cl", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_ph", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_ph", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_cl", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello1", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "livello1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "livello2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timer_filtro", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "timer_filtro", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timer_sonda_ph", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "timer_sonda_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timer_sonda_mv", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "timer_sonda_mv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timer_pagamento", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "timer_pagamento", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timer_manutenzione", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "timer_manutenzione", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stato_pulse1_ch1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "stato_pulse1_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stato_pulse2_ch1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "stato_pulse2_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stato_pulse_ch2", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "stato_pulse_ch2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stato_rele_ch1", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "stato_rele_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stato_rele_ch2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "stato_rele_ch2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stby", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "stby", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO wh_log"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (id, identificativo, id_485, data, valo"& _ 
                "re1, valore2, flusso, dos_alarm_cl, dos_alarm_ph, probe_fail_ph, probe_fail_cl, "& _ 
                "livello1, livello2, timer_filtro, timer_sonda_ph, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      timer_"& _ 
                "sonda_mv, timer_pagamento, timer_manutenzione, stato_pulse1_ch1, stato_pulse2_ch"& _ 
                "1, stato_pulse_ch2, stato_rele_ch1, stato_rele_ch2, stby)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES     (NEWID(),@"& _ 
                "identificativo,@id_485,@data,@valore1,@valore2,@flusso,@dos_alarm_cl,@dos_alarm_"& _ 
                "ph,@probe_fail_ph,@probe_fail_cl,@livello1,@livello2,@timer_filtro,@timer_sonda_"& _ 
                "ph,@timer_sonda_mv,@timer_pagamento,@timer_manutenzione,@stato_pulse1_ch1,@stato"& _ 
                "_pulse2_ch1,@stato_pulse_ch2,@stato_rele_ch1,@stato_rele_ch2,@stby)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flusso", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "flusso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_cl", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dos_alarm_ph", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "dos_alarm_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_ph", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@probe_fail_cl", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "probe_fail_cl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello1", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "livello1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "livello2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timer_filtro", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "timer_filtro", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timer_sonda_ph", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "timer_sonda_ph", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timer_sonda_mv", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "timer_sonda_mv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timer_pagamento", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "timer_pagamento", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@timer_manutenzione", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "timer_manutenzione", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stato_pulse1_ch1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "stato_pulse1_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stato_pulse2_ch1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "stato_pulse2_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stato_pulse_ch2", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "stato_pulse_ch2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stato_rele_ch1", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "stato_rele_ch1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stato_rele_ch2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "stato_rele_ch2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stby", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "stby", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill( _
                    ByVal dataTable As log_db.wh_logDataTable,  _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal flusso As Global.System.Nullable(Of Boolean),  _
                    ByVal dos_alarm_cl As Global.System.Nullable(Of Boolean),  _
                    ByVal dos_alarm_ph As Global.System.Nullable(Of Boolean),  _
                    ByVal probe_fail_ph As Global.System.Nullable(Of Boolean),  _
                    ByVal probe_fail_cl As Global.System.Nullable(Of Boolean),  _
                    ByVal livello1 As Global.System.Nullable(Of Boolean),  _
                    ByVal livello2 As Global.System.Nullable(Of Boolean),  _
                    ByVal timer_filtro As Global.System.Nullable(Of Boolean),  _
                    ByVal timer_sonda_ph As Global.System.Nullable(Of Boolean),  _
                    ByVal timer_sonda_mv As Global.System.Nullable(Of Boolean),  _
                    ByVal timer_pagamento As Global.System.Nullable(Of Boolean),  _
                    ByVal timer_manutenzione As Global.System.Nullable(Of Boolean),  _
                    ByVal stato_pulse1_ch1 As Global.System.Nullable(Of Integer),  _
                    ByVal stato_pulse2_ch1 As Global.System.Nullable(Of Integer),  _
                    ByVal stato_pulse_ch2 As Global.System.Nullable(Of Integer),  _
                    ByVal stato_rele_ch1 As Global.System.Nullable(Of Boolean),  _
                    ByVal stato_rele_ch2 As Global.System.Nullable(Of Boolean),  _
                    ByVal stby As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(data.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (flusso.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(flusso.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (dos_alarm_cl.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(dos_alarm_cl.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (dos_alarm_ph.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(dos_alarm_ph.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (probe_fail_ph.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(probe_fail_ph.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (probe_fail_cl.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(probe_fail_cl.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (livello1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(livello1.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (livello2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(livello2.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (timer_filtro.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(timer_filtro.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (timer_sonda_ph.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(timer_sonda_ph.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (timer_sonda_mv.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(timer_sonda_mv.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (timer_pagamento.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(timer_pagamento.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (timer_manutenzione.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(timer_manutenzione.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (stato_pulse1_ch1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(17).Value = CType(stato_pulse1_ch1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (stato_pulse2_ch1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(18).Value = CType(stato_pulse2_ch1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (stato_pulse_ch2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(19).Value = CType(stato_pulse_ch2.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (stato_rele_ch1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(20).Value = CType(stato_rele_ch1.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (stato_rele_ch2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(21).Value = CType(stato_rele_ch2.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (stby.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(22).Value = CType(stby.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal flusso As Global.System.Nullable(Of Boolean),  _
                    ByVal dos_alarm_cl As Global.System.Nullable(Of Boolean),  _
                    ByVal dos_alarm_ph As Global.System.Nullable(Of Boolean),  _
                    ByVal probe_fail_ph As Global.System.Nullable(Of Boolean),  _
                    ByVal probe_fail_cl As Global.System.Nullable(Of Boolean),  _
                    ByVal livello1 As Global.System.Nullable(Of Boolean),  _
                    ByVal livello2 As Global.System.Nullable(Of Boolean),  _
                    ByVal timer_filtro As Global.System.Nullable(Of Boolean),  _
                    ByVal timer_sonda_ph As Global.System.Nullable(Of Boolean),  _
                    ByVal timer_sonda_mv As Global.System.Nullable(Of Boolean),  _
                    ByVal timer_pagamento As Global.System.Nullable(Of Boolean),  _
                    ByVal timer_manutenzione As Global.System.Nullable(Of Boolean),  _
                    ByVal stato_pulse1_ch1 As Global.System.Nullable(Of Integer),  _
                    ByVal stato_pulse2_ch1 As Global.System.Nullable(Of Integer),  _
                    ByVal stato_pulse_ch2 As Global.System.Nullable(Of Integer),  _
                    ByVal stato_rele_ch1 As Global.System.Nullable(Of Boolean),  _
                    ByVal stato_rele_ch2 As Global.System.Nullable(Of Boolean),  _
                    ByVal stby As Global.System.Nullable(Of Boolean)) As log_db.wh_logDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(data.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (flusso.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(flusso.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (dos_alarm_cl.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(dos_alarm_cl.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (dos_alarm_ph.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(dos_alarm_ph.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (probe_fail_ph.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(probe_fail_ph.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (probe_fail_cl.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(probe_fail_cl.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (livello1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(livello1.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (livello2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(livello2.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (timer_filtro.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(timer_filtro.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (timer_sonda_ph.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(timer_sonda_ph.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (timer_sonda_mv.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(timer_sonda_mv.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (timer_pagamento.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(timer_pagamento.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (timer_manutenzione.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(timer_manutenzione.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (stato_pulse1_ch1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(17).Value = CType(stato_pulse1_ch1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (stato_pulse2_ch1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(18).Value = CType(stato_pulse2_ch1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (stato_pulse_ch2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(19).Value = CType(stato_pulse_ch2.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (stato_rele_ch1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(20).Value = CType(stato_rele_ch1.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (stato_rele_ch2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(21).Value = CType(stato_rele_ch2.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (stby.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(22).Value = CType(stby.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As log_db.wh_logDataTable = New log_db.wh_logDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As log_db.wh_logDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As log_db) As Integer
            Return Me.Adapter.Update(dataSet, "wh_log")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Global.System.Nullable(Of Global.System.Guid)) As Integer
            If (id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(id.Value,System.Guid)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertQuery( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal valore1 As Global.System.Nullable(Of Single),  _
                    ByVal valore2 As Global.System.Nullable(Of Single),  _
                    ByVal flusso As Global.System.Nullable(Of Boolean),  _
                    ByVal dos_alarm_cl As Global.System.Nullable(Of Boolean),  _
                    ByVal dos_alarm_ph As Global.System.Nullable(Of Boolean),  _
                    ByVal probe_fail_ph As Global.System.Nullable(Of Boolean),  _
                    ByVal probe_fail_cl As Global.System.Nullable(Of Boolean),  _
                    ByVal livello1 As Global.System.Nullable(Of Boolean),  _
                    ByVal livello2 As Global.System.Nullable(Of Boolean),  _
                    ByVal timer_filtro As Global.System.Nullable(Of Boolean),  _
                    ByVal timer_sonda_ph As Global.System.Nullable(Of Boolean),  _
                    ByVal timer_sonda_mv As Global.System.Nullable(Of Boolean),  _
                    ByVal timer_pagamento As Global.System.Nullable(Of Boolean),  _
                    ByVal timer_manutenzione As Global.System.Nullable(Of Boolean),  _
                    ByVal stato_pulse1_ch1 As Global.System.Nullable(Of Integer),  _
                    ByVal stato_pulse2_ch1 As Global.System.Nullable(Of Integer),  _
                    ByVal stato_pulse_ch2 As Global.System.Nullable(Of Integer),  _
                    ByVal stato_rele_ch1 As Global.System.Nullable(Of Boolean),  _
                    ByVal stato_rele_ch2 As Global.System.Nullable(Of Boolean),  _
                    ByVal stby As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                command.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                command.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (flusso.HasValue = true) Then
                command.Parameters(5).Value = CType(flusso.Value,Boolean)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (dos_alarm_cl.HasValue = true) Then
                command.Parameters(6).Value = CType(dos_alarm_cl.Value,Boolean)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (dos_alarm_ph.HasValue = true) Then
                command.Parameters(7).Value = CType(dos_alarm_ph.Value,Boolean)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (probe_fail_ph.HasValue = true) Then
                command.Parameters(8).Value = CType(probe_fail_ph.Value,Boolean)
            Else
                command.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (probe_fail_cl.HasValue = true) Then
                command.Parameters(9).Value = CType(probe_fail_cl.Value,Boolean)
            Else
                command.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (livello1.HasValue = true) Then
                command.Parameters(10).Value = CType(livello1.Value,Boolean)
            Else
                command.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (livello2.HasValue = true) Then
                command.Parameters(11).Value = CType(livello2.Value,Boolean)
            Else
                command.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (timer_filtro.HasValue = true) Then
                command.Parameters(12).Value = CType(timer_filtro.Value,Boolean)
            Else
                command.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (timer_sonda_ph.HasValue = true) Then
                command.Parameters(13).Value = CType(timer_sonda_ph.Value,Boolean)
            Else
                command.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (timer_sonda_mv.HasValue = true) Then
                command.Parameters(14).Value = CType(timer_sonda_mv.Value,Boolean)
            Else
                command.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (timer_pagamento.HasValue = true) Then
                command.Parameters(15).Value = CType(timer_pagamento.Value,Boolean)
            Else
                command.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (timer_manutenzione.HasValue = true) Then
                command.Parameters(16).Value = CType(timer_manutenzione.Value,Boolean)
            Else
                command.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (stato_pulse1_ch1.HasValue = true) Then
                command.Parameters(17).Value = CType(stato_pulse1_ch1.Value,Integer)
            Else
                command.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (stato_pulse2_ch1.HasValue = true) Then
                command.Parameters(18).Value = CType(stato_pulse2_ch1.Value,Integer)
            Else
                command.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (stato_pulse_ch2.HasValue = true) Then
                command.Parameters(19).Value = CType(stato_pulse_ch2.Value,Integer)
            Else
                command.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (stato_rele_ch1.HasValue = true) Then
                command.Parameters(20).Value = CType(stato_rele_ch1.Value,Boolean)
            Else
                command.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (stato_rele_ch2.HasValue = true) Then
                command.Parameters(21).Value = CType(stato_rele_ch2.Value,Boolean)
            Else
                command.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (stby.HasValue = true) Then
                command.Parameters(22).Value = CType(stby.Value,Boolean)
            Else
                command.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ltb_logTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ltb_log"
            tableMapping.ColumnMappings.Add("id", "id")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ltb_log] ([id]) VALUES (@id)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.OldCommunication2020.My.MySettings.Default.max_5ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     id"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         ltb_log"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (data = @data) AND (valore1 = @val"& _ 
                "ore1) AND (valore2 = @valore2) AND (temperatura = @temperatura) AND (flusso = @f"& _ 
                "lusso) AND (lev_hcl = @lev_hcl) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (lev_naclo2 = @lev_n"& _ 
                "aclo2) AND (lev_k6 = @lev_k6) AND (temp_max = @temp_max) AND (stop = @stop) AND "& _ 
                "(lev_errata = @lev_errata) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (identificativo = @identi"& _ 
                "ficativo) AND (id_485 = @id_485)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flusso", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "flusso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lev_hcl", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "lev_hcl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lev_naclo2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "lev_naclo2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lev_k6", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "lev_k6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temp_max", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "temp_max", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stop", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "stop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lev_errata", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "lev_errata", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO ltb_log"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (id, identificativo, id_485, data, val"& _ 
                "ore1, valore2, temperatura, flusso, lev_hcl, lev_naclo2, lev_k6, temp_max, stop,"& _ 
                " lev_errata)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES     (NEWID(),@identificativo,@id_485,@data,@valore1,@valore"& _ 
                "2,@temperatura,@flusso,@lev_hcl,@lev_naclo2,@lev_k6,@temp_max,@stop,@lev_errata)"& _ 
                ""
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@valore2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "valore2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flusso", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "flusso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lev_hcl", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "lev_hcl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lev_naclo2", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "lev_naclo2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lev_k6", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "lev_k6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temp_max", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "temp_max", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stop", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "stop", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lev_errata", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "lev_errata", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As log_db.ltb_logDataTable, ByVal data As Global.System.Nullable(Of Date), ByVal valore1 As Global.System.Nullable(Of Single), ByVal valore2 As Global.System.Nullable(Of Single), ByVal temperatura As Global.System.Nullable(Of Single), ByVal flusso As Global.System.Nullable(Of Boolean), ByVal lev_hcl As Global.System.Nullable(Of Boolean), ByVal lev_naclo2 As Global.System.Nullable(Of Boolean), ByVal lev_k6 As Global.System.Nullable(Of Boolean), ByVal temp_max As Global.System.Nullable(Of Boolean), ByVal _stop As Global.System.Nullable(Of Boolean), ByVal lev_errata As Global.System.Nullable(Of Boolean), ByVal identificativo As String, ByVal id_485 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (data.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(data.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(valore1.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(valore2.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (temperatura.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(temperatura.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (flusso.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(flusso.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (lev_hcl.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(lev_hcl.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (lev_naclo2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(lev_naclo2.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (lev_k6.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(lev_k6.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (temp_max.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(temp_max.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (_stop.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(_stop.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (lev_errata.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(lev_errata.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(id_485,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal data As Global.System.Nullable(Of Date), ByVal valore1 As Global.System.Nullable(Of Single), ByVal valore2 As Global.System.Nullable(Of Single), ByVal temperatura As Global.System.Nullable(Of Single), ByVal flusso As Global.System.Nullable(Of Boolean), ByVal lev_hcl As Global.System.Nullable(Of Boolean), ByVal lev_naclo2 As Global.System.Nullable(Of Boolean), ByVal lev_k6 As Global.System.Nullable(Of Boolean), ByVal temp_max As Global.System.Nullable(Of Boolean), ByVal _stop As Global.System.Nullable(Of Boolean), ByVal lev_errata As Global.System.Nullable(Of Boolean), ByVal identificativo As String, ByVal id_485 As String) As log_db.ltb_logDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (data.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(data.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(valore1.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(valore2.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (temperatura.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(temperatura.Value,Single)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (flusso.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(flusso.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (lev_hcl.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(lev_hcl.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (lev_naclo2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(lev_naclo2.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (lev_k6.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(lev_k6.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (temp_max.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(temp_max.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (_stop.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(_stop.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (lev_errata.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(lev_errata.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(id_485,String)
            End If
            Dim dataTable As log_db.ltb_logDataTable = New log_db.ltb_logDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As log_db.ltb_logDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As log_db) As Integer
            Return Me.Adapter.Update(dataSet, "ltb_log")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Global.System.Nullable(Of Global.System.Guid)) As Integer
            If (id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(id.Value,System.Guid)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function InsertQuery(ByVal identificativo As String, ByVal id_485 As String, ByVal data As Global.System.Nullable(Of Date), ByVal valore1 As Global.System.Nullable(Of Single), ByVal valore2 As Global.System.Nullable(Of Single), ByVal temperatura As Global.System.Nullable(Of Single), ByVal flusso As Global.System.Nullable(Of Boolean), ByVal lev_hcl As Global.System.Nullable(Of Boolean), ByVal lev_naclo2 As Global.System.Nullable(Of Boolean), ByVal lev_k6 As Global.System.Nullable(Of Boolean), ByVal temp_max As Global.System.Nullable(Of Boolean), ByVal _stop As Global.System.Nullable(Of Boolean), ByVal lev_errata As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (valore1.HasValue = true) Then
                command.Parameters(3).Value = CType(valore1.Value,Single)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (valore2.HasValue = true) Then
                command.Parameters(4).Value = CType(valore2.Value,Single)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (temperatura.HasValue = true) Then
                command.Parameters(5).Value = CType(temperatura.Value,Single)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (flusso.HasValue = true) Then
                command.Parameters(6).Value = CType(flusso.Value,Boolean)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (lev_hcl.HasValue = true) Then
                command.Parameters(7).Value = CType(lev_hcl.Value,Boolean)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (lev_naclo2.HasValue = true) Then
                command.Parameters(8).Value = CType(lev_naclo2.Value,Boolean)
            Else
                command.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (lev_k6.HasValue = true) Then
                command.Parameters(9).Value = CType(lev_k6.Value,Boolean)
            Else
                command.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (temp_max.HasValue = true) Then
                command.Parameters(10).Value = CType(temp_max.Value,Boolean)
            Else
                command.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (_stop.HasValue = true) Then
                command.Parameters(11).Value = CType(_stop.Value,Boolean)
            Else
                command.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (lev_errata.HasValue = true) Then
                command.Parameters(12).Value = CType(lev_errata.Value,Boolean)
            Else
                command.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class log_ldmaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "log_ldma"
            tableMapping.ColumnMappings.Add("data", "data")
            tableMapping.ColumnMappings.Add("livello1", "livello1")
            tableMapping.ColumnMappings.Add("livello2", "livello2")
            tableMapping.ColumnMappings.Add("livello3", "livello3")
            tableMapping.ColumnMappings.Add("livello4", "livello4")
            tableMapping.ColumnMappings.Add("livello5", "livello5")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [log_ldma] ([data], [livello1], [livello2], [livello3], [livello4], ["& _ 
                "livello5]) VALUES (@data, @livello1, @livello2, @livello3, @livello4, @livello5)"& _ 
                ""
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello1", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "livello1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello2", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "livello2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello3", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "livello3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello4", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "livello4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello5", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "livello5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.OldCommunication2020.My.MySettings.Default.max_5ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DISTINCT TOP (10) data, livello1, livello2, livello3, livello4, livello5"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "FROM         log_ldma"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (identificativo = @identificativo) AND (id_485 "& _ 
                "= @id_485)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY data DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO [dbo].[log_ldma] ([id], [identificativo], [id_485], [data], [livello1"& _ 
                "], [livello2], [livello3], [livello4], [livello5]) VALUES (NEWID(), @identificat"& _ 
                "ivo, @id_485, @data, @livello1, @livello2, @livello3, @livello4, @livello5)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "livello1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "livello2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello3", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "livello3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello4", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "livello4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@livello5", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "livello5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As log_db.log_ldmaDataTable, ByVal identificativo As String, ByVal id_485 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal identificativo As String, ByVal id_485 As String) As log_db.log_ldmaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            Dim dataTable As log_db.log_ldmaDataTable = New log_db.log_ldmaDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As log_db.log_ldmaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As log_db) As Integer
            Return Me.Adapter.Update(dataSet, "log_ldma")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal data As Global.System.Nullable(Of Date), ByVal livello1 As Global.System.Nullable(Of Single), ByVal livello2 As Global.System.Nullable(Of Single), ByVal livello3 As Global.System.Nullable(Of Single), ByVal livello4 As Global.System.Nullable(Of Single), ByVal livello5 As Global.System.Nullable(Of Single)) As Integer
            If (data.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(data.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (livello1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(livello1.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (livello2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(livello2.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (livello3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(livello3.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (livello4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(livello4.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (livello5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(livello5.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertQuery(ByVal identificativo As String, ByVal id_485 As String, ByVal data As Global.System.Nullable(Of Date), ByVal livello1 As Global.System.Nullable(Of Single), ByVal livello2 As Global.System.Nullable(Of Single), ByVal livello3 As Global.System.Nullable(Of Single), ByVal livello4 As Global.System.Nullable(Of Single), ByVal livello5 As Global.System.Nullable(Of Single)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (livello1.HasValue = true) Then
                command.Parameters(3).Value = CType(livello1.Value,Single)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (livello2.HasValue = true) Then
                command.Parameters(4).Value = CType(livello2.Value,Single)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (livello3.HasValue = true) Then
                command.Parameters(5).Value = CType(livello3.Value,Single)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (livello4.HasValue = true) Then
                command.Parameters(6).Value = CType(livello4.Value,Single)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (livello5.HasValue = true) Then
                command.Parameters(7).Value = CType(livello5.Value,Single)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class log_lta_ltu_ltdTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "log_lta_ltu_ltd"
            tableMapping.ColumnMappings.Add("id", "id")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [log_lta_ltu_ltd] ([id]) VALUES (@id)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.OldCommunication2020.My.MySettings.Default.max_5ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     id"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         log_lta_ltu_ltd"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (identificativo = @identif"& _ 
                "icativo) AND (id_485 = @id_485) AND (data = @data) AND (Flow_Acid_L = @Flow_Acid"& _ 
                "_L) AND (Flow_Self_Water_L = @Flow_Self_Water_L) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      AND (Fl"& _ 
                "ow_Chlorite_L = @Flow_Chlorite_L) AND (Lev_Acid_L = @Lev_Acid_L) AND (Lev_Chlori"& _ 
                "te_L = @Lev_Chlorite_L) AND (Lev_Water_L = @Lev_Water_L) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "     (Sefl_Acid_L = @Sefl_Acid_L) AND (Sefl_Chlorite_L = @Sefl_Chlorite_L) AND ("& _ 
                "TimeOut_L = @TimeOut_L) AND (Flow_Water_dil_L = @Flow_Water_dil_L) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "               (Service_F_L = @Service_F_L) AND (Analog_L = @Analog_L) AND (Tank"& _ 
                "_Empty_L = @Tank_Empty_L) AND (Level_SW = @Level_SW) AND (BypassB = @BypassB) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "                      AND (Lim_Dioxide = @Lim_Dioxide) AND (Lev_Alflow = @Lev_Al"& _ 
                "flow) AND (Overf = @Overf)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flow_Acid_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Flow_Acid_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flow_Self_Water_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Flow_Self_Water_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flow_Chlorite_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Flow_Chlorite_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lev_Acid_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Lev_Acid_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lev_Chlorite_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Lev_Chlorite_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lev_Water_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Lev_Water_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sefl_Acid_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Sefl_Acid_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sefl_Chlorite_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Sefl_Chlorite_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeOut_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeOut_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flow_Water_dil_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Flow_Water_dil_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Service_F_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Service_F_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Analog_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Analog_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tank_Empty_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Tank_Empty_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Level_SW", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Level_SW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BypassB", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "BypassB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lim_Dioxide", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Lim_Dioxide", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lev_Alflow", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Lev_Alflow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Overf", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Overf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO log_lta_ltu_ltd"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (id, identificativo, id_485"& _ 
                ", data, Flow_Acid_L, Flow_Self_Water_L, Flow_Chlorite_L, Lev_Acid_L, Lev_Chlorit"& _ 
                "e_L, Lev_Water_L, Sefl_Acid_L, Sefl_Chlorite_L, TimeOut_L, Flow_Water_dil_L, Ser"& _ 
                "vice_F_L, Analog_L, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Tank_Empty_L, Level_SW, BypassB, "& _ 
                "Lim_Dioxide, Lev_Alflow, Overf, flow1, flow2, lettura, naso, temperatura, levSog"& _ 
                "lia, totAcido, totCloro, totAcqua, totAcidoDay, totCloroDay, totAcquaDay, setpoi"& _ 
                "nt)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES        (NEWID(),@identificativo,@id_485,@data,@Flow_Acid_L,@Flow_Sel"& _ 
                "f_Water_L,@Flow_Chlorite_L,@Lev_Acid_L,@Lev_Chlorite_L,@Lev_Water_L,@Sefl_Acid_L"& _ 
                ",@Sefl_Chlorite_L,@TimeOut_L,@Flow_Water_dil_L,@Service_F_L,@Analog_L,@Tank_Empt"& _ 
                "y_L,@Level_SW,@BypassB,@Lim_Dioxide,@Lev_Alflow,@Overf,@flow1,@flow2,@lettura,@n"& _ 
                "aso,@temperatura,@levSoglia,@totAcido,@totCloro,@totAcqua,@totAcidoDay,@totCloro"& _ 
                "Day,@totAcquaDay,@setpoint)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flow_Acid_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Flow_Acid_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flow_Self_Water_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Flow_Self_Water_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flow_Chlorite_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Flow_Chlorite_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lev_Acid_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Lev_Acid_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lev_Chlorite_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Lev_Chlorite_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lev_Water_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Lev_Water_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sefl_Acid_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Sefl_Acid_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sefl_Chlorite_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Sefl_Chlorite_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeOut_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeOut_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flow_Water_dil_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Flow_Water_dil_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Service_F_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Service_F_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Analog_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Analog_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tank_Empty_L", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Tank_Empty_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Level_SW", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Level_SW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BypassB", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "BypassB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lim_Dioxide", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Lim_Dioxide", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lev_Alflow", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Lev_Alflow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Overf", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Overf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flow1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "flow1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@flow2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "flow2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lettura", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "lettura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@naso", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "naso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@temperatura", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "temperatura", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@levSoglia", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "levSoglia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@totAcido", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "totAcido", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@totCloro", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "totCloro", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@totAcqua", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "totAcqua", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@totAcidoDay", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "totAcidoDay", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@totCloroDay", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "totCloroDay", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@totAcquaDay", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "totAcquaDay", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@setpoint", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "setpoint", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill( _
                    ByVal dataTable As log_db.log_lta_ltu_ltdDataTable,  _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal Flow_Acid_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Flow_Self_Water_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Flow_Chlorite_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Lev_Acid_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Lev_Chlorite_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Lev_Water_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Sefl_Acid_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Sefl_Chlorite_L As Global.System.Nullable(Of Boolean),  _
                    ByVal TimeOut_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Flow_Water_dil_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Service_F_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Analog_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Tank_Empty_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Level_SW As Global.System.Nullable(Of Boolean),  _
                    ByVal BypassB As Global.System.Nullable(Of Boolean),  _
                    ByVal Lim_Dioxide As Global.System.Nullable(Of Boolean),  _
                    ByVal Lev_Alflow As Global.System.Nullable(Of Boolean),  _
                    ByVal Overf As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(data.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Flow_Acid_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Flow_Acid_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Flow_Self_Water_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Flow_Self_Water_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Flow_Chlorite_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Flow_Chlorite_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Lev_Acid_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Lev_Acid_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Lev_Chlorite_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(Lev_Chlorite_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Lev_Water_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(Lev_Water_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Sefl_Acid_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(Sefl_Acid_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Sefl_Chlorite_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(Sefl_Chlorite_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (TimeOut_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(TimeOut_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Flow_Water_dil_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(Flow_Water_dil_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Service_F_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(Service_F_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Analog_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(Analog_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Tank_Empty_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(Tank_Empty_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Level_SW.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(Level_SW.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (BypassB.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(17).Value = CType(BypassB.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Lim_Dioxide.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(18).Value = CType(Lim_Dioxide.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Lev_Alflow.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(19).Value = CType(Lev_Alflow.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Overf.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(20).Value = CType(Overf.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal Flow_Acid_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Flow_Self_Water_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Flow_Chlorite_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Lev_Acid_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Lev_Chlorite_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Lev_Water_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Sefl_Acid_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Sefl_Chlorite_L As Global.System.Nullable(Of Boolean),  _
                    ByVal TimeOut_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Flow_Water_dil_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Service_F_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Analog_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Tank_Empty_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Level_SW As Global.System.Nullable(Of Boolean),  _
                    ByVal BypassB As Global.System.Nullable(Of Boolean),  _
                    ByVal Lim_Dioxide As Global.System.Nullable(Of Boolean),  _
                    ByVal Lev_Alflow As Global.System.Nullable(Of Boolean),  _
                    ByVal Overf As Global.System.Nullable(Of Boolean)) As log_db.log_lta_ltu_ltdDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(data.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Flow_Acid_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Flow_Acid_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Flow_Self_Water_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Flow_Self_Water_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Flow_Chlorite_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Flow_Chlorite_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Lev_Acid_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Lev_Acid_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Lev_Chlorite_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(Lev_Chlorite_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Lev_Water_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(Lev_Water_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Sefl_Acid_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(Sefl_Acid_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Sefl_Chlorite_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(Sefl_Chlorite_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (TimeOut_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(TimeOut_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Flow_Water_dil_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(Flow_Water_dil_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Service_F_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(Service_F_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Analog_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(Analog_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Tank_Empty_L.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(Tank_Empty_L.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Level_SW.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(Level_SW.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (BypassB.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(17).Value = CType(BypassB.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Lim_Dioxide.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(18).Value = CType(Lim_Dioxide.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Lev_Alflow.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(19).Value = CType(Lev_Alflow.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Overf.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(20).Value = CType(Overf.Value,Boolean)
            Else
                Me.Adapter.SelectCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As log_db.log_lta_ltu_ltdDataTable = New log_db.log_lta_ltu_ltdDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As log_db.log_lta_ltu_ltdDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As log_db) As Integer
            Return Me.Adapter.Update(dataSet, "log_lta_ltu_ltd")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Global.System.Nullable(Of Global.System.Guid)) As Integer
            If (id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(id.Value,System.Guid)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function InsertQuery( _
                    ByVal identificativo As String,  _
                    ByVal id_485 As String,  _
                    ByVal data As Global.System.Nullable(Of Date),  _
                    ByVal Flow_Acid_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Flow_Self_Water_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Flow_Chlorite_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Lev_Acid_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Lev_Chlorite_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Lev_Water_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Sefl_Acid_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Sefl_Chlorite_L As Global.System.Nullable(Of Boolean),  _
                    ByVal TimeOut_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Flow_Water_dil_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Service_F_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Analog_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Tank_Empty_L As Global.System.Nullable(Of Boolean),  _
                    ByVal Level_SW As Global.System.Nullable(Of Boolean),  _
                    ByVal BypassB As Global.System.Nullable(Of Boolean),  _
                    ByVal Lim_Dioxide As Global.System.Nullable(Of Boolean),  _
                    ByVal Lev_Alflow As Global.System.Nullable(Of Boolean),  _
                    ByVal Overf As Global.System.Nullable(Of Boolean),  _
                    ByVal flow1 As Global.System.Nullable(Of Single),  _
                    ByVal flow2 As Global.System.Nullable(Of Single),  _
                    ByVal lettura As Global.System.Nullable(Of Single),  _
                    ByVal naso As Global.System.Nullable(Of Single),  _
                    ByVal temperatura As Global.System.Nullable(Of Single),  _
                    ByVal levSoglia As Global.System.Nullable(Of Boolean),  _
                    ByVal totAcido As Global.System.Nullable(Of Single),  _
                    ByVal totCloro As Global.System.Nullable(Of Single),  _
                    ByVal totAcqua As Global.System.Nullable(Of Single),  _
                    ByVal totAcidoDay As Global.System.Nullable(Of Single),  _
                    ByVal totCloroDay As Global.System.Nullable(Of Single),  _
                    ByVal totAcquaDay As Global.System.Nullable(Of Single),  _
                    ByVal setpoint As Global.System.Nullable(Of Single)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Flow_Acid_L.HasValue = true) Then
                command.Parameters(3).Value = CType(Flow_Acid_L.Value,Boolean)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Flow_Self_Water_L.HasValue = true) Then
                command.Parameters(4).Value = CType(Flow_Self_Water_L.Value,Boolean)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Flow_Chlorite_L.HasValue = true) Then
                command.Parameters(5).Value = CType(Flow_Chlorite_L.Value,Boolean)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Lev_Acid_L.HasValue = true) Then
                command.Parameters(6).Value = CType(Lev_Acid_L.Value,Boolean)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Lev_Chlorite_L.HasValue = true) Then
                command.Parameters(7).Value = CType(Lev_Chlorite_L.Value,Boolean)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Lev_Water_L.HasValue = true) Then
                command.Parameters(8).Value = CType(Lev_Water_L.Value,Boolean)
            Else
                command.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Sefl_Acid_L.HasValue = true) Then
                command.Parameters(9).Value = CType(Sefl_Acid_L.Value,Boolean)
            Else
                command.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Sefl_Chlorite_L.HasValue = true) Then
                command.Parameters(10).Value = CType(Sefl_Chlorite_L.Value,Boolean)
            Else
                command.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (TimeOut_L.HasValue = true) Then
                command.Parameters(11).Value = CType(TimeOut_L.Value,Boolean)
            Else
                command.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Flow_Water_dil_L.HasValue = true) Then
                command.Parameters(12).Value = CType(Flow_Water_dil_L.Value,Boolean)
            Else
                command.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Service_F_L.HasValue = true) Then
                command.Parameters(13).Value = CType(Service_F_L.Value,Boolean)
            Else
                command.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Analog_L.HasValue = true) Then
                command.Parameters(14).Value = CType(Analog_L.Value,Boolean)
            Else
                command.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Tank_Empty_L.HasValue = true) Then
                command.Parameters(15).Value = CType(Tank_Empty_L.Value,Boolean)
            Else
                command.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Level_SW.HasValue = true) Then
                command.Parameters(16).Value = CType(Level_SW.Value,Boolean)
            Else
                command.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (BypassB.HasValue = true) Then
                command.Parameters(17).Value = CType(BypassB.Value,Boolean)
            Else
                command.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Lim_Dioxide.HasValue = true) Then
                command.Parameters(18).Value = CType(Lim_Dioxide.Value,Boolean)
            Else
                command.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Lev_Alflow.HasValue = true) Then
                command.Parameters(19).Value = CType(Lev_Alflow.Value,Boolean)
            Else
                command.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Overf.HasValue = true) Then
                command.Parameters(20).Value = CType(Overf.Value,Boolean)
            Else
                command.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (flow1.HasValue = true) Then
                command.Parameters(21).Value = CType(flow1.Value,Single)
            Else
                command.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (flow2.HasValue = true) Then
                command.Parameters(22).Value = CType(flow2.Value,Single)
            Else
                command.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (lettura.HasValue = true) Then
                command.Parameters(23).Value = CType(lettura.Value,Single)
            Else
                command.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (naso.HasValue = true) Then
                command.Parameters(24).Value = CType(naso.Value,Single)
            Else
                command.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (temperatura.HasValue = true) Then
                command.Parameters(25).Value = CType(temperatura.Value,Single)
            Else
                command.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (levSoglia.HasValue = true) Then
                command.Parameters(26).Value = CType(levSoglia.Value,Boolean)
            Else
                command.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (totAcido.HasValue = true) Then
                command.Parameters(27).Value = CType(totAcido.Value,Single)
            Else
                command.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (totCloro.HasValue = true) Then
                command.Parameters(28).Value = CType(totCloro.Value,Single)
            Else
                command.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (totAcqua.HasValue = true) Then
                command.Parameters(29).Value = CType(totAcqua.Value,Single)
            Else
                command.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (totAcidoDay.HasValue = true) Then
                command.Parameters(30).Value = CType(totAcidoDay.Value,Single)
            Else
                command.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (totCloroDay.HasValue = true) Then
                command.Parameters(31).Value = CType(totCloroDay.Value,Single)
            Else
                command.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (totAcquaDay.HasValue = true) Then
                command.Parameters(32).Value = CType(totAcquaDay.Value,Single)
            Else
                command.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (setpoint.HasValue = true) Then
                command.Parameters(33).Value = CType(setpoint.Value,Single)
            Else
                command.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class log_ldlgTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "log_ldlg"
            tableMapping.ColumnMappings.Add("data", "data")
            tableMapping.ColumnMappings.Add("counter1", "counter1")
            tableMapping.ColumnMappings.Add("counter2", "counter2")
            tableMapping.ColumnMappings.Add("counter3", "counter3")
            tableMapping.ColumnMappings.Add("counter4", "counter4")
            tableMapping.ColumnMappings.Add("counter5", "counter5")
            tableMapping.ColumnMappings.Add("counter1_1", "counter1_1")
            tableMapping.ColumnMappings.Add("counter2_1", "counter2_1")
            tableMapping.ColumnMappings.Add("counter3_1", "counter3_1")
            tableMapping.ColumnMappings.Add("counter4_1", "counter4_1")
            tableMapping.ColumnMappings.Add("counter5_1", "counter5_1")
            tableMapping.ColumnMappings.Add("counter1_2", "counter1_2")
            tableMapping.ColumnMappings.Add("counter2_2", "counter2_2")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [log_ldlg] ([data], [counter1], [counter2], [counter3], [counter4], ["& _ 
                "counter5], [counter1_1], [counter2_1], [counter3_1], [counter4_1], [counter5_1],"& _ 
                " [counter1_2], [counter2_2]) VALUES (@data, @counter1, @counter2, @counter3, @co"& _ 
                "unter4, @counter5, @counter1_1, @counter2_1, @counter3_1, @counter4_1, @counter5"& _ 
                "_1, @counter1_2, @counter2_2)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter1", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "counter1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter2", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "counter2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter3", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "counter3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter4", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "counter4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter5", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "counter5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter1_1", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "counter1_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter2_1", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "counter2_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter3_1", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "counter3_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter4_1", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "counter4_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter5_1", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "counter5_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter1_2", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "counter1_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter2_2", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "counter2_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.OldCommunication2020.My.MySettings.Default.max_5ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DISTINCT TOP (10) data, counter1, counter2, counter3, counter4, counter5, "& _ 
                "counter1_1, counter2_1, counter3_1, counter4_1, counter5_1, counter1_2, counter2"& _ 
                "_2"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         log_ldlg"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (identificativo = @identificativo) AND (id_"& _ 
                "485 = @id_485)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY data DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO log_ldlg"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (id, identificativo, id_485, data, co"& _ 
                "unter1, counter2, counter3,counter4, counter5,counter1_1,counter2_1,counter3_1,c"& _ 
                "ounter4_1,counter5_1,counter1_2,counter2_2)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES     (NEWID(),@identificativo"& _ 
                ",@id_485,@data,@counter1,@counter2,@counter3,@counter4,@counter5,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"@counter1_1,@"& _ 
                "counter2_1,@counter3_1,@counter4_1,@counter5_1,@counter1_2,@counter2_2)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@identificativo", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "identificativo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id_485", Global.System.Data.SqlDbType.NChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "id_485", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "counter1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "counter2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter3", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "counter3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter4", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "counter4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter5", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "counter5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter1_1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "counter1_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter2_1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "counter2_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter3_1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "counter3_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter4_1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "counter4_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter5_1", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "counter5_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter1_2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "counter1_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@counter2_2", Global.System.Data.SqlDbType.Real, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "counter2_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As log_db.log_ldlgDataTable, ByVal identificativo As String, ByVal id_485 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal identificativo As String, ByVal id_485 As String) As log_db.log_ldlgDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (identificativo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_485,String)
            End If
            Dim dataTable As log_db.log_ldlgDataTable = New log_db.log_ldlgDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As log_db.log_ldlgDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As log_db) As Integer
            Return Me.Adapter.Update(dataSet, "log_ldlg")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal data As Global.System.Nullable(Of Date), ByVal counter1 As Global.System.Nullable(Of Single), ByVal counter2 As Global.System.Nullable(Of Single), ByVal counter3 As Global.System.Nullable(Of Single), ByVal counter4 As Global.System.Nullable(Of Single), ByVal counter5 As Global.System.Nullable(Of Single), ByVal counter1_1 As Global.System.Nullable(Of Single), ByVal counter2_1 As Global.System.Nullable(Of Single), ByVal counter3_1 As Global.System.Nullable(Of Single), ByVal counter4_1 As Global.System.Nullable(Of Single), ByVal counter5_1 As Global.System.Nullable(Of Single), ByVal counter1_2 As Global.System.Nullable(Of Single), ByVal counter2_2 As Global.System.Nullable(Of Single)) As Integer
            If (data.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(data.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (counter1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(counter1.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (counter2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(counter2.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (counter3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(counter3.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (counter4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(counter4.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (counter5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(counter5.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (counter1_1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(counter1_1.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (counter2_1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(counter2_1.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (counter3_1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(counter3_1.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (counter4_1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(counter4_1.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (counter5_1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(counter5_1.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (counter1_2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(counter1_2.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (counter2_2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(counter2_2.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertQuery(ByVal identificativo As String, ByVal id_485 As String, ByVal data As Global.System.Nullable(Of Date), ByVal counter1 As Global.System.Nullable(Of Single), ByVal counter2 As Global.System.Nullable(Of Single), ByVal counter3 As Global.System.Nullable(Of Single), ByVal counter4 As Global.System.Nullable(Of Single), ByVal counter5 As Global.System.Nullable(Of Single), ByVal counter1_1 As Global.System.Nullable(Of Single), ByVal counter2_1 As Global.System.Nullable(Of Single), ByVal counter3_1 As Global.System.Nullable(Of Single), ByVal counter4_1 As Global.System.Nullable(Of Single), ByVal counter5_1 As Global.System.Nullable(Of Single), ByVal counter1_2 As Global.System.Nullable(Of Single), ByVal counter2_2 As Global.System.Nullable(Of Single)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (identificativo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(identificativo,String)
            End If
            If (id_485 Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(id_485,String)
            End If
            If (data.HasValue = true) Then
                command.Parameters(2).Value = CType(data.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (counter1.HasValue = true) Then
                command.Parameters(3).Value = CType(counter1.Value,Single)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (counter2.HasValue = true) Then
                command.Parameters(4).Value = CType(counter2.Value,Single)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (counter3.HasValue = true) Then
                command.Parameters(5).Value = CType(counter3.Value,Single)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (counter4.HasValue = true) Then
                command.Parameters(6).Value = CType(counter4.Value,Single)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (counter5.HasValue = true) Then
                command.Parameters(7).Value = CType(counter5.Value,Single)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (counter1_1.HasValue = true) Then
                command.Parameters(8).Value = CType(counter1_1.Value,Single)
            Else
                command.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (counter2_1.HasValue = true) Then
                command.Parameters(9).Value = CType(counter2_1.Value,Single)
            Else
                command.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (counter3_1.HasValue = true) Then
                command.Parameters(10).Value = CType(counter3_1.Value,Single)
            Else
                command.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (counter4_1.HasValue = true) Then
                command.Parameters(11).Value = CType(counter4_1.Value,Single)
            Else
                command.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (counter5_1.HasValue = true) Then
                command.Parameters(12).Value = CType(counter5_1.Value,Single)
            Else
                command.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (counter1_2.HasValue = true) Then
                command.Parameters(13).Value = CType(counter1_2.Value,Single)
            Else
                command.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (counter2_2.HasValue = true) Then
                command.Parameters(14).Value = CType(counter2_2.Value,Single)
            Else
                command.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _ld_logTableAdapter As ld_logTableAdapter
        
        Private _logTableAdapter As logTableAdapter
        
        Private _wd_logTableAdapter As wd_logTableAdapter
        
        Private _ld4_logTableAdapter As ld4_logTableAdapter
        
        Private _log_towerTableAdapter As log_towerTableAdapter
        
        Private _log_tamponeTableAdapter As log_tamponeTableAdapter
        
        Private _ld_log_tamponeTableAdapter As ld_log_tamponeTableAdapter
        
        Private _log_tower_tamponeTableAdapter As log_tower_tamponeTableAdapter
        
        Private _wd_log_tamponeTableAdapter As wd_log_tamponeTableAdapter
        
        Private _wh_logTableAdapter As wh_logTableAdapter
        
        Private _ltb_logTableAdapter As ltb_logTableAdapter
        
        Private _log_ldmaTableAdapter As log_ldmaTableAdapter
        
        Private _log_lta_ltu_ltdTableAdapter As log_lta_ltu_ltdTableAdapter
        
        Private _log_ldlgTableAdapter As log_ldlgTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ld_logTableAdapter() As ld_logTableAdapter
            Get
                Return Me._ld_logTableAdapter
            End Get
            Set
                Me._ld_logTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property logTableAdapter() As logTableAdapter
            Get
                Return Me._logTableAdapter
            End Get
            Set
                Me._logTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property wd_logTableAdapter() As wd_logTableAdapter
            Get
                Return Me._wd_logTableAdapter
            End Get
            Set
                Me._wd_logTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ld4_logTableAdapter() As ld4_logTableAdapter
            Get
                Return Me._ld4_logTableAdapter
            End Get
            Set
                Me._ld4_logTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property log_towerTableAdapter() As log_towerTableAdapter
            Get
                Return Me._log_towerTableAdapter
            End Get
            Set
                Me._log_towerTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property log_tamponeTableAdapter() As log_tamponeTableAdapter
            Get
                Return Me._log_tamponeTableAdapter
            End Get
            Set
                Me._log_tamponeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ld_log_tamponeTableAdapter() As ld_log_tamponeTableAdapter
            Get
                Return Me._ld_log_tamponeTableAdapter
            End Get
            Set
                Me._ld_log_tamponeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property log_tower_tamponeTableAdapter() As log_tower_tamponeTableAdapter
            Get
                Return Me._log_tower_tamponeTableAdapter
            End Get
            Set
                Me._log_tower_tamponeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property wd_log_tamponeTableAdapter() As wd_log_tamponeTableAdapter
            Get
                Return Me._wd_log_tamponeTableAdapter
            End Get
            Set
                Me._wd_log_tamponeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property wh_logTableAdapter() As wh_logTableAdapter
            Get
                Return Me._wh_logTableAdapter
            End Get
            Set
                Me._wh_logTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ltb_logTableAdapter() As ltb_logTableAdapter
            Get
                Return Me._ltb_logTableAdapter
            End Get
            Set
                Me._ltb_logTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property log_ldmaTableAdapter() As log_ldmaTableAdapter
            Get
                Return Me._log_ldmaTableAdapter
            End Get
            Set
                Me._log_ldmaTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property log_lta_ltu_ltdTableAdapter() As log_lta_ltu_ltdTableAdapter
            Get
                Return Me._log_lta_ltu_ltdTableAdapter
            End Get
            Set
                Me._log_lta_ltu_ltdTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property log_ldlgTableAdapter() As log_ldlgTableAdapter
            Get
                Return Me._log_ldlgTableAdapter
            End Get
            Set
                Me._log_ldlgTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._ld_logTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._ld_logTableAdapter.Connection) Is Nothing)) Then
                    Return Me._ld_logTableAdapter.Connection
                End If
                If ((Not (Me._logTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._logTableAdapter.Connection) Is Nothing)) Then
                    Return Me._logTableAdapter.Connection
                End If
                If ((Not (Me._wd_logTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._wd_logTableAdapter.Connection) Is Nothing)) Then
                    Return Me._wd_logTableAdapter.Connection
                End If
                If ((Not (Me._ld4_logTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._ld4_logTableAdapter.Connection) Is Nothing)) Then
                    Return Me._ld4_logTableAdapter.Connection
                End If
                If ((Not (Me._log_towerTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._log_towerTableAdapter.Connection) Is Nothing)) Then
                    Return Me._log_towerTableAdapter.Connection
                End If
                If ((Not (Me._log_tamponeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._log_tamponeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._log_tamponeTableAdapter.Connection
                End If
                If ((Not (Me._ld_log_tamponeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._ld_log_tamponeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._ld_log_tamponeTableAdapter.Connection
                End If
                If ((Not (Me._log_tower_tamponeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._log_tower_tamponeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._log_tower_tamponeTableAdapter.Connection
                End If
                If ((Not (Me._wd_log_tamponeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._wd_log_tamponeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._wd_log_tamponeTableAdapter.Connection
                End If
                If ((Not (Me._wh_logTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._wh_logTableAdapter.Connection) Is Nothing)) Then
                    Return Me._wh_logTableAdapter.Connection
                End If
                If ((Not (Me._ltb_logTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._ltb_logTableAdapter.Connection) Is Nothing)) Then
                    Return Me._ltb_logTableAdapter.Connection
                End If
                If ((Not (Me._log_ldmaTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._log_ldmaTableAdapter.Connection) Is Nothing)) Then
                    Return Me._log_ldmaTableAdapter.Connection
                End If
                If ((Not (Me._log_lta_ltu_ltdTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._log_lta_ltu_ltdTableAdapter.Connection) Is Nothing)) Then
                    Return Me._log_lta_ltu_ltdTableAdapter.Connection
                End If
                If ((Not (Me._log_ldlgTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._log_ldlgTableAdapter.Connection) Is Nothing)) Then
                    Return Me._log_ldlgTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._ld_logTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._logTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._wd_logTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._ld4_logTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._log_towerTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._log_tamponeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._ld_log_tamponeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._log_tower_tamponeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._wd_log_tamponeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._wh_logTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._ltb_logTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._log_ldmaTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._log_lta_ltu_ltdTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._log_ldlgTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As log_db, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._ld_logTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ld_log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._ld_logTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._logTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._logTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._wd_logTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.wd_log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._wd_logTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._ld4_logTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ld4_log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._ld4_logTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._log_towerTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.log_tower.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._log_towerTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._log_tamponeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.log_tampone.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._log_tamponeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._ld_log_tamponeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ld_log_tampone.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._ld_log_tamponeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._log_tower_tamponeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.log_tower_tampone.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._log_tower_tamponeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._wd_log_tamponeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.wd_log_tampone.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._wd_log_tamponeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._wh_logTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.wh_log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._wh_logTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._ltb_logTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ltb_log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._ltb_logTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._log_ldmaTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.log_ldma.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._log_ldmaTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._log_lta_ltu_ltdTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.log_lta_ltu_ltd.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._log_lta_ltu_ltdTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._log_ldlgTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.log_ldlg.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._log_ldlgTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As log_db, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._ld_logTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ld_log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._ld_logTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._logTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._logTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._wd_logTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.wd_log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._wd_logTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._ld4_logTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ld4_log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._ld4_logTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._log_towerTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.log_tower.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._log_towerTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._log_tamponeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.log_tampone.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._log_tamponeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._ld_log_tamponeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ld_log_tampone.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._ld_log_tamponeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._log_tower_tamponeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.log_tower_tampone.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._log_tower_tamponeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._wd_log_tamponeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.wd_log_tampone.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._wd_log_tamponeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._wh_logTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.wh_log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._wh_logTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._ltb_logTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ltb_log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._ltb_logTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._log_ldmaTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.log_ldma.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._log_ldmaTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._log_lta_ltu_ltdTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.log_lta_ltu_ltd.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._log_lta_ltu_ltdTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._log_ldlgTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.log_ldlg.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._log_ldlgTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As log_db, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._log_ldlgTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.log_ldlg.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._log_ldlgTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._log_lta_ltu_ltdTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.log_lta_ltu_ltd.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._log_lta_ltu_ltdTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._log_ldmaTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.log_ldma.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._log_ldmaTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._ltb_logTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ltb_log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._ltb_logTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._wh_logTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.wh_log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._wh_logTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._wd_log_tamponeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.wd_log_tampone.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._wd_log_tamponeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._log_tower_tamponeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.log_tower_tampone.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._log_tower_tamponeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._ld_log_tamponeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ld_log_tampone.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._ld_log_tamponeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._log_tamponeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.log_tampone.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._log_tamponeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._log_towerTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.log_tower.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._log_towerTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._ld4_logTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ld4_log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._ld4_logTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._wd_logTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.wd_log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._wd_logTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._logTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._logTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._ld_logTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ld_log.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._ld_logTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As log_db) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._ld_logTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._ld_logTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tutti gli oggetti TableAdapter gestiti da TableAdapterManager devono utilizzare l"& _ 
                        "a stessa stringa di connessione.")
            End If
            If ((Not (Me._logTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._logTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tutti gli oggetti TableAdapter gestiti da TableAdapterManager devono utilizzare l"& _ 
                        "a stessa stringa di connessione.")
            End If
            If ((Not (Me._wd_logTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._wd_logTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tutti gli oggetti TableAdapter gestiti da TableAdapterManager devono utilizzare l"& _ 
                        "a stessa stringa di connessione.")
            End If
            If ((Not (Me._ld4_logTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._ld4_logTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tutti gli oggetti TableAdapter gestiti da TableAdapterManager devono utilizzare l"& _ 
                        "a stessa stringa di connessione.")
            End If
            If ((Not (Me._log_towerTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._log_towerTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tutti gli oggetti TableAdapter gestiti da TableAdapterManager devono utilizzare l"& _ 
                        "a stessa stringa di connessione.")
            End If
            If ((Not (Me._log_tamponeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._log_tamponeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tutti gli oggetti TableAdapter gestiti da TableAdapterManager devono utilizzare l"& _ 
                        "a stessa stringa di connessione.")
            End If
            If ((Not (Me._ld_log_tamponeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._ld_log_tamponeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tutti gli oggetti TableAdapter gestiti da TableAdapterManager devono utilizzare l"& _ 
                        "a stessa stringa di connessione.")
            End If
            If ((Not (Me._log_tower_tamponeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._log_tower_tamponeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tutti gli oggetti TableAdapter gestiti da TableAdapterManager devono utilizzare l"& _ 
                        "a stessa stringa di connessione.")
            End If
            If ((Not (Me._wd_log_tamponeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._wd_log_tamponeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tutti gli oggetti TableAdapter gestiti da TableAdapterManager devono utilizzare l"& _ 
                        "a stessa stringa di connessione.")
            End If
            If ((Not (Me._wh_logTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._wh_logTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tutti gli oggetti TableAdapter gestiti da TableAdapterManager devono utilizzare l"& _ 
                        "a stessa stringa di connessione.")
            End If
            If ((Not (Me._ltb_logTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._ltb_logTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tutti gli oggetti TableAdapter gestiti da TableAdapterManager devono utilizzare l"& _ 
                        "a stessa stringa di connessione.")
            End If
            If ((Not (Me._log_ldmaTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._log_ldmaTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tutti gli oggetti TableAdapter gestiti da TableAdapterManager devono utilizzare l"& _ 
                        "a stessa stringa di connessione.")
            End If
            If ((Not (Me._log_lta_ltu_ltdTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._log_lta_ltu_ltdTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tutti gli oggetti TableAdapter gestiti da TableAdapterManager devono utilizzare l"& _ 
                        "a stessa stringa di connessione.")
            End If
            If ((Not (Me._log_ldlgTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._log_ldlgTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tutti gli oggetti TableAdapter gestiti da TableAdapterManager devono utilizzare l"& _ 
                        "a stessa stringa di connessione.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager non contiene informazioni di connessione. Impostare la propri"& _ 
                        "età TableAdapter di ciascun oggetto TableAdapterManager su un'istanza TableAdapt"& _ 
                        "er valida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("Impossibile avviare la transazione. La connessione dati corrente non supporta le "& _ 
                        "transazioni oppure lo stato corrente non consente l'avvio della transazione.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._ld_logTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._ld_logTableAdapter, Me._ld_logTableAdapter.Connection)
                    Me._ld_logTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._ld_logTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._ld_logTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._ld_logTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._ld_logTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._logTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._logTableAdapter, Me._logTableAdapter.Connection)
                    Me._logTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._logTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._logTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._logTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._logTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._wd_logTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._wd_logTableAdapter, Me._wd_logTableAdapter.Connection)
                    Me._wd_logTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._wd_logTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._wd_logTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._wd_logTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._wd_logTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._ld4_logTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._ld4_logTableAdapter, Me._ld4_logTableAdapter.Connection)
                    Me._ld4_logTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._ld4_logTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._ld4_logTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._ld4_logTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._ld4_logTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._log_towerTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._log_towerTableAdapter, Me._log_towerTableAdapter.Connection)
                    Me._log_towerTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._log_towerTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._log_towerTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._log_towerTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._log_towerTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._log_tamponeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._log_tamponeTableAdapter, Me._log_tamponeTableAdapter.Connection)
                    Me._log_tamponeTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._log_tamponeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._log_tamponeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._log_tamponeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._log_tamponeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._ld_log_tamponeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._ld_log_tamponeTableAdapter, Me._ld_log_tamponeTableAdapter.Connection)
                    Me._ld_log_tamponeTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._ld_log_tamponeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._ld_log_tamponeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._ld_log_tamponeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._ld_log_tamponeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._log_tower_tamponeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._log_tower_tamponeTableAdapter, Me._log_tower_tamponeTableAdapter.Connection)
                    Me._log_tower_tamponeTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._log_tower_tamponeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._log_tower_tamponeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._log_tower_tamponeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._log_tower_tamponeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._wd_log_tamponeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._wd_log_tamponeTableAdapter, Me._wd_log_tamponeTableAdapter.Connection)
                    Me._wd_log_tamponeTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._wd_log_tamponeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._wd_log_tamponeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._wd_log_tamponeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._wd_log_tamponeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._wh_logTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._wh_logTableAdapter, Me._wh_logTableAdapter.Connection)
                    Me._wh_logTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._wh_logTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._wh_logTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._wh_logTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._wh_logTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._ltb_logTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._ltb_logTableAdapter, Me._ltb_logTableAdapter.Connection)
                    Me._ltb_logTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._ltb_logTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._ltb_logTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._ltb_logTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._ltb_logTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._log_ldmaTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._log_ldmaTableAdapter, Me._log_ldmaTableAdapter.Connection)
                    Me._log_ldmaTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._log_ldmaTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._log_ldmaTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._log_ldmaTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._log_ldmaTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._log_lta_ltu_ltdTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._log_lta_ltu_ltdTableAdapter, Me._log_lta_ltu_ltdTableAdapter.Connection)
                    Me._log_lta_ltu_ltdTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._log_lta_ltu_ltdTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._log_lta_ltu_ltdTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._log_lta_ltu_ltdTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._log_lta_ltu_ltdTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._log_ldlgTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._log_ldlgTableAdapter, Me._log_ldlgTableAdapter.Connection)
                    Me._log_ldlgTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._log_ldlgTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._log_ldlgTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._log_ldlgTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._log_ldlgTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._ld_logTableAdapter) Is Nothing) Then
                    Me._ld_logTableAdapter.Connection = CType(revertConnections(Me._ld_logTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._ld_logTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._logTableAdapter) Is Nothing) Then
                    Me._logTableAdapter.Connection = CType(revertConnections(Me._logTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._logTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._wd_logTableAdapter) Is Nothing) Then
                    Me._wd_logTableAdapter.Connection = CType(revertConnections(Me._wd_logTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._wd_logTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._ld4_logTableAdapter) Is Nothing) Then
                    Me._ld4_logTableAdapter.Connection = CType(revertConnections(Me._ld4_logTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._ld4_logTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._log_towerTableAdapter) Is Nothing) Then
                    Me._log_towerTableAdapter.Connection = CType(revertConnections(Me._log_towerTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._log_towerTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._log_tamponeTableAdapter) Is Nothing) Then
                    Me._log_tamponeTableAdapter.Connection = CType(revertConnections(Me._log_tamponeTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._log_tamponeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._ld_log_tamponeTableAdapter) Is Nothing) Then
                    Me._ld_log_tamponeTableAdapter.Connection = CType(revertConnections(Me._ld_log_tamponeTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._ld_log_tamponeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._log_tower_tamponeTableAdapter) Is Nothing) Then
                    Me._log_tower_tamponeTableAdapter.Connection = CType(revertConnections(Me._log_tower_tamponeTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._log_tower_tamponeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._wd_log_tamponeTableAdapter) Is Nothing) Then
                    Me._wd_log_tamponeTableAdapter.Connection = CType(revertConnections(Me._wd_log_tamponeTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._wd_log_tamponeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._wh_logTableAdapter) Is Nothing) Then
                    Me._wh_logTableAdapter.Connection = CType(revertConnections(Me._wh_logTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._wh_logTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._ltb_logTableAdapter) Is Nothing) Then
                    Me._ltb_logTableAdapter.Connection = CType(revertConnections(Me._ltb_logTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._ltb_logTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._log_ldmaTableAdapter) Is Nothing) Then
                    Me._log_ldmaTableAdapter.Connection = CType(revertConnections(Me._log_ldmaTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._log_ldmaTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._log_lta_ltu_ltdTableAdapter) Is Nothing) Then
                    Me._log_lta_ltu_ltdTableAdapter.Connection = CType(revertConnections(Me._log_lta_ltu_ltdTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._log_lta_ltu_ltdTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._log_ldlgTableAdapter) Is Nothing) Then
                    Me._log_ldlgTableAdapter.Connection = CType(revertConnections(Me._log_ldlgTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._log_ldlgTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
